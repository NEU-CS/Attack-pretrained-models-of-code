{"code": "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_vcenter);}\n", "substitutes": {"serialize": ["store", "encode", "print", "write", "format"], "out": ["bos", "w", "output", "o", "store", "encode", "out", "print", "write", "os", "format"]}}
{"code": "public void addAll(BlockList<T> src) {if (src.size == 0)return;int srcDirIdx = 0;for (; srcDirIdx < src.tailDirIdx; srcDirIdx++)addAll(src.directory[srcDirIdx], 0, BLOCK_SIZE);if (src.tailBlkIdx != 0)addAll(src.tailBlock, 0, src.tailBlkIdx);}\n", "substitutes": {"addAll": ["process", "copy", "add", "shuffle", "append", "block", "write", "read"], "src": ["process", "copy", "ls", "add", "list", "shuffle", "append", "block", "blocks", "bl", "b", "l", "write", "read"], "srcDirIdx": ["process", "n", "shuffle", "append", "block", "blocks", "write", "l", "id", "read", "index", "copy", "add", "bl", "b", "i", "j", "k", "ls", "list", "ii", "pos"]}}
{"code": "public void writeByte(byte b) {if (upto == blockSize) {if (currentBlock != null) {addBlock(currentBlock);}currentBlock = new byte[blockSize];upto = 0;}currentBlock[upto++] = b;}\n", "substitutes": {"writeByte": ["add", "append", "insert", "write", "put"], "b": ["v", "add", "ch", "c", "append", "value", "insert", "b", "write", "put"], "currentBlock": ["bytes", "v", "add", "ch", "c", "append", "value", "block", "blocks", "this", "buf", "insert", "b", "buffer", "write", "put"], "upto": ["append", "value", "block", "blocks", "position", "buffer", "write", "put", "this", "0", "offset", "index", "add", "b", "i", "bytes", "v", "ch", "c", "buf", "insert", "pos", "size"]}}
{"code": "public ObjectId getObjectId() {return objectId;}\n", "substitutes": {"getObjectId": ["Id", "get", "id", "ID"]}}
{"code": "public DeleteDomainEntryResult deleteDomainEntry(DeleteDomainEntryRequest request) {request = beforeClientExecution(request);return executeDeleteDomainEntry(request);}\n", "substitutes": {"deleteDomainEntry": ["update", "execute", "run", "delete", "complete"], "request": ["input", "update", "parent", "execute", "run", "request", "req", "call", "delete", "query", "argument", "p", "complete"]}}
{"code": "public long ramBytesUsed() {return ((termOffsets!=null)? termOffsets.ramBytesUsed() : 0) +((termsDictOffsets!=null)? termsDictOffsets.ramBytesUsed() : 0);}\n", "substitutes": {"ramBytesUsed": ["length", "get", "value", "count", "remaining", "size", "sum"]}}
{"code": "public final String getFullMessage() {byte[] raw = buffer;int msgB = RawParseUtils.tagMessage(raw, 0);if (msgB < 0) {return \"\"; }return RawParseUtils.decode(guessEncoding(), raw, msgB, raw.length);}\n", "substitutes": {"getFullMessage": ["get", "decode", "message", "buffer", "read"], "raw": ["data", "get", "decode", "message", "buf", "body", "b", "buffer", "msg", "read"], "msgB": ["data", "get", "length", "n", "tag", "decode", "0", "1", "message", "offset", "buf", "body", "pos", "b", "buffer", "msg", "read"]}}
{"code": "public POIFSFileSystem() {this(true);_header.setBATCount(1);_header.setBATArray(new int[]{1});BATBlock bb = BATBlock.createEmptyBATBlock(bigBlockSize, false);bb.setOurBlockIndex(1);_bat_blocks.add(bb);setNextBlock(0, POIFSConstants.END_OF_CHAIN);setNextBlock(1, POIFSConstants.FAT_SECTOR_BLOCK);_property_table.setStartBlock(0);}\n", "substitutes": {"this": ["init", "synchronized", "initialize"], "bb": ["initialize", "synchronized", "block", "br", "bl", "init", "b", "bc"]}}
{"code": "public void init(int address) {slice = pool.buffers[address >> ByteBlockPool.BYTE_BLOCK_SHIFT];assert slice != null;upto = address & ByteBlockPool.BYTE_BLOCK_MASK;offset0 = address;assert upto < slice.length;}\n", "substitutes": {"init": ["release", "allocate", "reset", "free", "seek"], "address": ["slice", "index", "release", "off", "0", "block", "start", "allocate", "chunk", "reset", "offset", "size", "free", "i", "seek"], "slice": ["block", "start", "blocks", "buffer", "0", "allocate", "chunk", "offset", "index", "release", "off", "buff", "b", "slice", "free", "i", "seek", "buffers", "bytes", "reset", "buf", "size"], "upto": ["block", "start", "blocks", "buffer", "mask", "0", "allocate", "chunk", "offset", "index", "release", "off", "buff", "b", "slice", "free", "i", "seek", "buffers", "bytes", "address", "reset", "buf", "size"], "offset0": ["block", "start", "blocks", "position", "buffer", "mask", "0", "allocate", "chunk", "offset", "index", "release", "off", "buff", "b", "slice", "free", "i", "seek", "buffers", "bytes", "address", "reset", "buf", "size"]}}
{"code": "public SubmoduleAddCommand setPath(String path) {this.path = path;return this;}\n", "substitutes": {"setPath": ["path", "Path", "append", "add"], "path": ["paths", "v", "path", "add", "name", "append", "value", "Path", "p"]}}
{"code": "public ListIngestionsResult listIngestions(ListIngestionsRequest request) {request = beforeClientExecution(request);return executeListIngestions(request);}\n", "substitutes": {"listIngestions": ["get", "index", "execute", "list", "lists"], "request": ["input", "get", "parent", "index", "execute", "list", "lists", "request", "req", "call", "query", "p"]}}
{"code": "public QueryParserTokenManager(CharStream stream, int lexState){this(stream);SwitchTo(lexState);}\n", "substitutes": {"stream": ["input", "s", "ch", "cs", "stream"], "lexState": ["input", "s", "index", "ch", "start", "to", "cs", "position", "pos", "stream"]}}
{"code": "public GetShardIteratorResult getShardIterator(GetShardIteratorRequest request) {request = beforeClientExecution(request);return executeGetShardIterator(request);}\n", "substitutes": {"getShardIterator": ["get", "execute", "list", "call", "iterator"], "request": ["input", "get", "parent", "execute", "list", "resource", "call", "request", "req", "iterator", "query", "argument"]}}
{"code": "public ModifyStrategyRequest() {super(\"aegis\", \"2016-11-11\", \"ModifyStrategy\", \"vipaegis\");setMethod(MethodType.POST);}\n", "substitutes": {}}
{"code": "public boolean ready() throws IOException {synchronized (lock) {if (in == null) {throw new IOException(\"InputStreamReader is closed\");}try {return bytes.hasRemaining() || in.available() > 0;} catch (IOException e) {return false;}}}\n", "substitutes": {"ready": ["next", "ready", "available", "has", "valid"]}}
{"code": "public EscherOptRecord getOptRecord() {return _optRecord;}\n", "substitutes": {"getOptRecord": ["get", "copy", "record", "clone", "current"]}}
{"code": "public synchronized int read(byte[] buffer, int offset, int length) {if (buffer == null) {throw new NullPointerException(\"buffer == null\");}Arrays.checkOffsetAndCount(buffer.length, offset, length);if (length == 0) {return 0;}int copylen = count - pos < length ? count - pos : length;for (int i = 0; i < copylen; i++) {buffer[offset + i] = (byte) this.buffer.charAt(pos + i);}pos += copylen;return copylen;}\n", "substitutes": {"read": ["copy", "append", "fill", "write", "read"], "buffer": ["input", "data", "array", "bytes", "copy", "this", "append", "buff", "buf", "fill", "b", "buffer", "write", "read"], "offset": ["data", "append", "start", "position", "fill", "buffer", "write", "input", "array", "this", "0", "offset", "read", "index", "copy", "buff", "b", "bytes", "count", "buf", "pos"], "length": ["data", "append", "start", "position", "fill", "buffer", "write", "input", "array", "2", "this", "0", "1", "offset", "len", "read", "index", "copy", "buff", "b", "limit", "length", "bytes", "count", "buf", "pos", "size"], "copylen": ["data", "n", "append", "start", "position", "fill", "buffer", "write", "input", "array", "2", "this", "0", "1", "offset", "len", "read", "index", "copy", "buff", "b", "limit", "length", "bytes", "count", "buf", "pos", "size"], "i": ["data", "n", "append", "start", "position", "fill", "buffer", "write", "input", "array", "2", "this", "0", "1", "offset", "len", "read", "index", "copy", "x", "buff", "b", "limit", "i", "j", "length", "bytes", "c", "ii", "count", "buf", "pos", "size"], "pos": ["data", "n", "append", "start", "position", "fill", "buffer", "write", "input", "array", "2", "this", "0", "1", "offset", "len", "read", "index", "copy", "x", "off", "buff", "b", "limit", "i", "j", "length", "bytes", "c", "ii", "count", "buf", "pos", "size"]}}
{"code": "public OpenNLPSentenceBreakIterator(NLPSentenceDetectorOp sentenceOp) {this.sentenceOp = sentenceOp;}\n", "substitutes": {"sentenceOp": ["open", "parent", "op", "o", "opener", "operation", "operator"]}}
{"code": "public void print(String str) {write(str != null ? str : String.valueOf((Object) null));}\n", "substitutes": {"print": ["add", "append", "println", "print", "write"], "str": ["line", "s", "text", "add", "name", "append", "println", "value", "str", "print", "write", "msg"]}}
{"code": "public NotImplementedFunctionException(String functionName, NotImplementedException cause) {super(functionName, cause);this.functionName = functionName;}\n", "substitutes": {"functionName": ["method", "key", "name", "function", "message", "null", "exception", "cause", "msg"], "cause": ["method", "exc", "key", "name", "function", "e", "message", "ex", "null", "exception", "cause", "msg"]}}
{"code": "public V next() {return super.nextEntry().getValue();}\n", "substitutes": {"next": ["next", "peek", "current", "value", "Next"]}}
{"code": "public final void readBytes(byte[] b, int offset, int len, boolean useBuffer) throws IOException {int available = bufferLength - bufferPosition;if(len <= available){if(len>0) System.arraycopy(buffer, bufferPosition, b, offset, len);bufferPosition+=len;} else {if(available > 0){System.arraycopy(buffer, bufferPosition, b, offset, available);offset += available;len -= available;bufferPosition += available;}if (useBuffer && len<bufferSize){refill();if(bufferLength<len){System.arraycopy(buffer, 0, b, offset, bufferLength);throw new EOFException(\"read past EOF: \" + this);} else {System.arraycopy(buffer, 0, b, offset, len);bufferPosition=len;}} else {long after = bufferStart+bufferPosition+len;if(after > length())throw new EOFException(\"read past EOF: \" + this);readInternal(b, offset, len);bufferStart = after;bufferPosition = 0;bufferLength = 0;                    }}}\n", "substitutes": {"readBytes": ["copy", "append", "fill", "write", "read"], "b": ["data", "array", "bytes", "copy", "output", "in", "append", "buf", "fill", "b", "out", "buffer", "write", "read"], "offset": ["data", "append", "start", "position", "fill", "buffer", "out", "write", "array", "output", "0", "offset", "read", "copy", "off", "b", "in", "bytes", "buf", "after", "pos"], "len": ["data", "capacity", "avail", "append", "start", "position", "fill", "buffer", "out", "write", "array", "output", "0", "offset", "before", "len", "read", "copy", "off", "b", "limit", "length", "in", "bytes", "available", "count", "buf", "remaining", "after", "pos", "size"], "useBuffer": ["data", "capacity", "avail", "append", "start", "position", "fill", "buffer", "out", "write", "array", "output", "0", "filled", "offset", "before", "len", "read", "copy", "off", "refill", "full", "partial", "b", "limit", "length", "in", "bytes", "available", "count", "buf", "remaining", "after", "pos", "size"], "available": ["data", "capacity", "n", "avail", "append", "start", "position", "fill", "buffer", "out", "write", "array", "output", "0", "filled", "offset", "before", "len", "read", "cap", "copy", "off", "refill", "full", "partial", "b", "limit", "length", "end", "in", "bytes", "available", "count", "buf", "remaining", "after", "pos", "size"], "bufferPosition": ["data", "capacity", "n", "avail", "append", "start", "position", "fill", "buffer", "out", "write", "array", "output", "0", "1", "filled", "offset", "before", "len", "read", "cap", "copy", "off", "refill", "full", "partial", "b", "limit", "length", "end", "in", "bytes", "available", "count", "buf", "remaining", "after", "pos", "size"], "after": ["data", "capacity", "n", "avail", "append", "start", "position", "fill", "buffer", "out", "write", "array", "output", "0", "1", "filled", "offset", "before", "len", "read", "cap", "copy", "off", "refill", "full", "partial", "b", "limit", "length", "end", "in", "bytes", "available", "count", "buf", "remaining", "after", "pos", "size"], "bufferStart": ["data", "capacity", "n", "avail", "append", "start", "position", "fill", "buffer", "out", "write", "array", "output", "0", "1", "filled", "offset", "before", "len", "read", "cap", "copy", "off", "refill", "full", "partial", "b", "limit", "length", "end", "in", "bytes", "available", "count", "buf", "remaining", "after", "pos", "size"], "bufferLength": ["data", "capacity", "n", "avail", "append", "start", "position", "fill", "buffer", "out", "write", "array", "output", "0", "1", "filled", "offset", "before", "len", "read", "cap", "written", "copy", "off", "refill", "full", "partial", "b", "limit", "length", "end", "in", "bytes", "available", "count", "buf", "remaining", "after", "pos", "size"]}}
{"code": "public TagQueueResult tagQueue(TagQueueRequest request) {request = beforeClientExecution(request);return executeTagQueue(request);}\n", "substitutes": {"tagQueue": ["create", "execute", "list", "run", "describe"], "request": ["input", "create", "parent", "argument", "execute", "list", "run", "request", "call", "instruction", "query", "req", "describe", "parameters", "p"]}}
{"code": "public void remove() {throw new UnsupportedOperationException();}\n", "substitutes": {"remove": ["destroy", "unused", "unsupported", "clear", "remove"]}}
{"code": "public CacheSubnetGroup modifyCacheSubnetGroup(ModifyCacheSubnetGroupRequest request) {request = beforeClientExecution(request);return executeModifyCacheSubnetGroup(request);}\n", "substitutes": {"modifyCacheSubnetGroup": ["update", "apply", "execute", "modified", "modify"], "request": ["input", "update", "apply", "execute", "resource", "modified", "request", "call", "req", "query", "argument", "parameters", "modify", "p"]}}
{"code": "public void setParams(String params) {super.setParams(params);language = country = variant = \"\";StringTokenizer st = new StringTokenizer(params, \",\");if (st.hasMoreTokens())language = st.nextToken();if (st.hasMoreTokens())country = st.nextToken();if (st.hasMoreTokens())variant = st.nextToken();}\n", "substitutes": {"setParams": ["parse", "initialize", "validate", "add", "setup", "init"], "params": ["parse", "initialize", "s", "params", "validate", "add", "name", "param", "str", "setup", "init", "parameters"], "language": ["parse", "initialize", "s", "params", "validate", "add", "name", "user", "city", "language", "param", "str", "setup", "init", "username", "organization", "parameters"], "country": ["params", "validate", "param", "parameters", "category", "s", "name", "city", "organization", "gender", "parse", "initialize", "add", "title", "str", "user", "language", "setup", "init", "username", "country"], "st": ["params", "validate", "param", "parameters", "category", "l", "variant", "s", "name", "city", "tokens", "organization", "gender", "token", "parse", "initialize", "variants", "add", "title", "str", "scanner", "f", "user", "c", "language", "cs", "setup", "init", "username", "country", "tw"], "variant": ["params", "validate", "street", "param", "parameters", "category", "l", "variant", "s", "name", "city", "tokens", "organization", "gender", "token", "parse", "initialize", "variants", "add", "title", "str", "scanner", "f", "user", "c", "language", "cs", "setup", "init", "username", "country", "tw"]}}
{"code": "public DeleteDocumentationVersionResult deleteDocumentationVersion(DeleteDocumentationVersionRequest request) {request = beforeClientExecution(request);return executeDeleteDocumentationVersion(request);}\n", "substitutes": {"deleteDocumentationVersion": ["update", "begin", "execute", "run", "delete"], "request": ["input", "update", "begin", "parent", "response", "execute", "run", "request", "req", "call", "delete", "query"]}}
{"code": "public boolean equals(Object obj) {if (!(obj instanceof FacetLabel)) {return false;}FacetLabel other = (FacetLabel) obj;if (length != other.length) {return false; }for (int i = length - 1; i >= 0; i--) {if (!components[i].equals(other.components[i])) {return false;}}return true;}\n", "substitutes": {"equals": ["equals", "compare", "equal", "matches", "contains"], "obj": ["obj", "other", "equals", "object", "o", "compare", "equal", "target", "matches", "contains"], "other": ["obj", "other", "f", "equals", "object", "o", "label", "compare", "c", "equal", "ref", "this", "target", "b", "matches", "contains", "el"], "i": ["object", "n", "ref", "contains", "obj", "other", "o", "compare", "this", "equal", "target", "offset", "index", "b", "matches", "i", "j", "f", "equals", "label", "c", "ii", "pos", "el"]}}
{"code": "public GetInstanceAccessDetailsResult getInstanceAccessDetails(GetInstanceAccessDetailsRequest request) {request = beforeClientExecution(request);return executeGetInstanceAccessDetails(request);}\n", "substitutes": {"getInstanceAccessDetails": ["get", "list", "call", "describe", "details"], "request": ["input", "get", "parent", "argument", "list", "resource", "call", "request", "req", "describe", "details"]}}
{"code": "public HSSFPolygon createPolygon(HSSFChildAnchor anchor) {HSSFPolygon shape = new HSSFPolygon(this, anchor);shape.setParent(this);shape.setAnchor(anchor);shapes.add(shape);onCreate(shape);return shape;}\n", "substitutes": {"createPolygon": ["create", "build", "shape", "add", "anchor"], "anchor": ["create", "build", "arc", "shape", "add", "ch", "c", "this", "anchor", "child", "null"], "shape": ["create", "build", "arc", "geometry", "shape", "add", "ch", "c", "this", "rect", "anchor", "child", "pt", "null", "poly", "shapes", "p"]}}
{"code": "public String getSheetName(int sheetIndex) {return getBoundSheetRec(sheetIndex).getSheetname();}\n", "substitutes": {"getSheetName": ["text", "get", "name", "sheet"], "sheetIndex": ["get", "id", "index", "text", "name", "offset", "i", "sheet"]}}
{"code": "public GetDashboardResult getDashboard(GetDashboardRequest request) {request = beforeClientExecution(request);return executeGetDashboard(request);}\n", "substitutes": {"getDashboard": ["get", "execute", "list", "call", "run"], "request": ["input", "get", "parent", "execute", "list", "call", "run", "request", "req", "query", "argument", "p"]}}
{"code": "public AssociateSigninDelegateGroupsWithAccountResult associateSigninDelegateGroupsWithAccount(AssociateSigninDelegateGroupsWithAccountRequest request) {request = beforeClientExecution(request);return executeAssociateSigninDelegateGroupsWithAccount(request);}\n", "substitutes": {"associateSigninDelegateGroupsWithAccount": ["create", "update", "association", "call", "associate"], "request": ["input", "create", "update", "op", "association", "call", "request", "req", "query", "associate"]}}
{"code": "public void addMultipleBlanks(MulBlankRecord mbr) {for (int j = 0; j < mbr.getNumColumns(); j++) {BlankRecord br = new BlankRecord();br.setColumn(( short ) (j + mbr.getFirstColumn()));br.setRow(mbr.getRow());br.setXFIndex(mbr.getXFAt(j));insertCell(br);}}\n", "substitutes": {"addMultipleBlanks": ["process", "add", "append", "fill", "insert"], "mbr": ["process", "m", "cell", "record", "row", "add", "rec", "append", "r", "table", "fill", "insert", "sheet"], "j": ["process", "column", "cell", "n", "append", "r", "fill", "col", "sheet", "record", "0", "1", "table", "m", "rec", "add", "j", "i", "row", "c", "insert"], "br": ["process", "column", "cell", "n", "append", "r", "fill", "col", "sheet", "record", "0", "1", "table", "m", "rec", "add", "j", "i", "row", "c", "insert"]}}
{"code": "public static String quote(String string) {StringBuilder sb = new StringBuilder();sb.append(\"\\\\Q\");int apos = 0;int k;while ((k = string.indexOf(\"\\\\E\", apos)) >= 0) {sb.append(string.substring(apos, k + 2)).append(\"\\\\\\\\E\\\\Q\");apos = k + 2;}return sb.append(string.substring(apos)).append(\"\\\\E\").toString();}\n", "substitutes": {"quote": ["Q", "escape", "q", "quote", "quoted"], "string": ["line", "s", "text", "name", "Q", "escape", "value", "q", "str", "quote", "string", "quoted"], "sb": ["line", "s", "text", "name", "Q", "escape", "value", "builder", "sq", "q", "str", "buf", "b", "quote", "buffer", "string", "quoted"], "apos": ["value", "start", "buffer", "line", "s", "name", "sq", "offset", "quote", "index", "text", "Q", "escape", "builder", "q", "str", "b", "string", "i", "j", "buf", "pos", "quoted"], "k": ["value", "start", "buffer", "line", "s", "name", "sq", "offset", "quote", "index", "text", "Q", "escape", "builder", "q", "str", "b", "string", "i", "j", "buf", "pos", "quoted"]}}
{"code": "public ByteBuffer putInt(int value) {throw new ReadOnlyBufferException();}\n", "substitutes": {"putInt": ["wrap", "duplicate", "allocate", "buffer", "put"], "value": ["wrap", "duplicate", "index", "v", "value", "allocate", "val", "i", "buffer", "put"]}}
{"code": "public ArrayPtg(Object[][] values2d) {int nColumns = values2d[0].length;int nRows = values2d.length;_nColumns = (short) nColumns;_nRows = (short) nRows;Object[] vv = new Object[_nColumns * _nRows];for (int r=0; r<nRows; r++) {Object[] rowData = values2d[r];for (int c=0; c<nColumns; c++) {vv[getValueIndex(c, r)] = rowData[c];}}_arrayValues = vv;_reserved0Int = 0;_reserved1Short = 0;_reserved2Byte = 0;}\n", "substitutes": {"values2d": ["data", "array", "row", "rows", "arr", "values"], "nColumns": ["data", "array", "row", "n", "c", "size", "rows", "columns", "arr", "values", "col"], "nRows": ["len", "data", "length", "array", "row", "n", "c", "r", "rs", "size", "rows", "columns", "arr", "values", "col"], "_nColumns": ["data", "n", "r", "rows", "values", "col", "array", "2", "columns", "rs", "len", "_", "arr", "width", "length", "row", "c", "size", "3"], "_nRows": ["data", "n", "r", "rows", "stride", "values", "col", "array", "2", "columns", "rs", "len", "_", "arr", "width", "length", "row", "c", "4", "size", "3"], "vv": ["data", "n", "r", "rows", "stride", "values", "col", "array", "2", "columns", "rs", "null", "len", "result", "_", "arr", "width", "length", "row", "c", "4", "size", "3"], "r": ["data", "n", "r", "rows", "stride", "values", "col", "array", "2", "columns", "0", "rs", "null", "len", "result", "_", "arr", "i", "j", "width", "length", "row", "c", "4", "size", "3"], "rowData": ["data", "n", "r", "value", "rows", "stride", "values", "col", "array", "2", "columns", "0", "rs", "null", "len", "result", "_", "arr", "i", "j", "width", "length", "v", "row", "c", "4", "val", "size", "3"], "c": ["data", "n", "r", "value", "rows", "stride", "values", "col", "array", "2", "columns", "0", "rs", "null", "len", "result", "w", "_", "arr", "i", "j", "width", "length", "v", "row", "c", "4", "val", "size", "3"], "getValueIndex": ["wrap", "data", "n", "r", "value", "rows", "stride", "values", "col", "put", "array", "2", "columns", "0", "rs", "null", "len", "result", "convert", "w", "merge", "_", "arr", "i", "j", "width", "length", "get", "v", "row", "c", "4", "val", "size", "3"], "_arrayValues": ["wrap", "data", "n", "r", "value", "rows", "stride", "values", "col", "put", "array", "2", "columns", "0", "rs", "null", "len", "result", "convert", "w", "merge", "_", "arr", "i", "j", "width", "length", "get", "v", "row", "c", "4", "val", "size", "3"], "_reserved0Int": ["wrap", "data", "n", "r", "value", "position", "rows", "stride", "values", "col", "put", "array", "2", "columns", "0", "rs", "null", "offset", "len", "result", "convert", "w", "index", "merge", "_", "arr", "i", "j", "width", "length", "get", "v", "row", "c", "4", "val", "pos", "size", "3"], "_reserved1Short": ["wrap", "data", "n", "r", "value", "bits", "position", "rows", "stride", "values", "col", "put", "array", "2", "columns", "0", "rs", "null", "offset", "len", "result", "convert", "w", "index", "merge", "_", "arr", "i", "j", "width", "length", "get", "v", "row", "c", "4", "val", "pos", "size", "3"], "_reserved2Byte": ["wrap", "data", "n", "r", "value", "bits", "position", "rows", "stride", "values", "col", "put", "array", "2", "columns", "0", "rs", "null", "offset", "len", "result", "convert", "w", "index", "merge", "_", "arr", "i", "j", "width", "length", "get", "v", "row", "c", "4", "val", "pos", "size", "3"]}}
{"code": "public GetIceServerConfigResult getIceServerConfig(GetIceServerConfigRequest request) {request = beforeClientExecution(request);return executeGetIceServerConfig(request);}\n", "substitutes": {"getIceServerConfig": ["result", "get", "execute", "call", "run"], "request": ["result", "input", "get", "parent", "execute", "resource", "call", "run", "request", "req", "query", "argument"]}}
{"code": "public String toString() {return getClass().getName() + \" [\" +getValueAsString() +\"]\";}\n", "substitutes": {"toString": ["get", "name", "value", "String", "string"]}}
{"code": "public String toString(String field) {return \"ToChildBlockJoinQuery (\"+parentQuery.toString()+\")\";}\n", "substitutes": {"toString": ["get", "build", "id", "join", "select", "name", "from", "field", "to"], "field": ["get", "build", "id", "parent", "join", "select", "sql", "name", "from", "field", "to", "query", "expression"]}}
{"code": "public final void incRef() {refCount.incrementAndGet();}\n", "substitutes": {"incRef": ["release", "increment", "reset", "close", "clear"]}}
{"code": "public UpdateConfigurationSetSendingEnabledResult updateConfigurationSetSendingEnabled(UpdateConfigurationSetSendingEnabledRequest request) {request = beforeClientExecution(request);return executeUpdateConfigurationSetSendingEnabled(request);}\n", "substitutes": {"updateConfigurationSetSendingEnabled": ["update", "apply", "execute", "send", "enable"], "request": ["input", "update", "apply", "parent", "argument", "execute", "request", "req", "call", "instruction", "query", "send", "p", "enable"]}}
{"code": "public int getNextXBATChainOffset() {return getXBATEntriesPerBlock() * LittleEndianConsts.INT_SIZE;}\n", "substitutes": {"getNextXBATChainOffset": ["length", "bytes", "capacity", "count", "size"]}}
{"code": "public void multiplyByPowerOfTen(int pow10) {TenPower tp = TenPower.getInstance(Math.abs(pow10));if (pow10 < 0) {mulShift(tp._divisor, tp._divisorShift);} else {mulShift(tp._multiplicand, tp._multiplierShift);}}\n", "substitutes": {"multiplyByPowerOfTen": ["shift", "pow", "multiply", "mul", "divide"], "pow10": ["shift", "value", "pow", "multiply", "power", "mul", "divide", "factor", "p"], "tp": ["this", "shift", "value", "t", "pow", "multiply", "power", "mul", "pt", "pc", "divide", "factor", "p"]}}
{"code": "public String toString(){final StringBuilder b = new StringBuilder();final int          l = length();b.append(File.separatorChar);for (int i = 0; i < l; i++){b.append(getComponent(i));if (i < l - 1){b.append(File.separatorChar);}}return b.toString();}\n", "substitutes": {"toString": ["length", "component", "get", "path", "name", "value", "reverse", "String", "string", "trim"], "b": ["result", "length", "component", "get", "s", "path", "name", "value", "builder", "reverse", "buf", "b", "String", "string", "trim"], "l": ["component", "n", "value", "reverse", "String", "l", "s", "name", "len", "trim", "result", "builder", "b", "string", "length", "get", "path", "buf", "size"], "i": ["component", "n", "value", "reverse", "String", "l", "s", "name", "len", "trim", "result", "index", "builder", "b", "string", "i", "j", "k", "length", "get", "path", "c", "buf", "pos", "size"]}}
{"code": "public InstanceProfileCredentialsProvider withFetcher(ECSMetadataServiceCredentialsFetcher fetcher) {this.fetcher = fetcher;this.fetcher.setRoleName(roleName);return this;}\n", "substitutes": {"withFetcher": ["create", "get", "with", "fetch"], "fetcher": ["create", "credential", "get", "client", "f", "config", "kh", "credentials", "cf", "supplier", "fetch", "with"]}}
{"code": "public void setProgressMonitor(ProgressMonitor pm) {progressMonitor = pm;}\n", "substitutes": {"setProgressMonitor": ["add", "attach", "init", "register", "set"], "pm": ["m", "w", "add", "attach", "monitor", "pm", "old", "init", "register", "set", "p"], "progressMonitor": ["m", "w", "cm", "add", "attach", "monitor", "pm", "old", "init", "register", "set", "p"]}}
{"code": "public void reset() {if (!first()) {ptr = 0;if (!eof())parseEntry();}}\n", "substitutes": {"reset": ["next", "skip", "parse", "close", "read"], "ptr": ["next", "skip", "parse", "index", "counter", "position", "pos", "offset", "close", "read"]}}
{"code": "public E previous() {if (iterator.previousIndex() >= start) {return iterator.previous();}throw new NoSuchElementException();}\n", "substitutes": {"previous": ["next", "prev", "current", "previous", "Previous", "remove"]}}
{"code": "public String getNewPrefix() {return this.newPrefix;}\n", "substitutes": {"getNewPrefix": ["suffix", "name", "get", "prefix"]}}
{"code": "public int indexOfValue(int value) {for (int i = 0; i < mSize; i++)if (mValues[i] == value)return i;return -1;}\n", "substitutes": {"indexOfValue": ["index", "find", "locate", "search", "contains"], "value": ["index", "v", "o", "value", "find", "locate", "val", "search", "contains", "i"], "i": ["k", "index", "v", "o", "n", "value", "find", "locate", "val", "j", "pos", "search", "contains", "i"]}}
{"code": "public List<CharsRef> uniqueStems(char word[], int length) {List<CharsRef> stems = stem(word, length);if (stems.size() < 2) {return stems;}CharArraySet terms = new CharArraySet(8, dictionary.ignoreCase);List<CharsRef> deduped = new ArrayList<>();for (CharsRef s : stems) {if (!terms.contains(s)) {deduped.add(s);terms.add(s);}}return deduped;}\n", "substitutes": {"uniqueStems": ["stems", "stem", "classify", "split", "trim"], "word": ["stems", "char", "s", "stem", "text", "classify", "c", "split", "word", "str", "chars", "words", "trim"], "length": ["num", "stems", "char", "length", "s", "index", "stem", "text", "classify", "n", "c", "split", "word", "count", "str", "chars", "words", "trim"], "stems": ["stems", "n", "split", "sentence", "words", "num", "char", "s", "stem", "null", "trim", "result", "index", "text", "word", "str", "chars", "terms", "sorted", "parts", "length", "classify", "list", "c", "count", "stemmed"], "terms": ["stems", "ignore", "n", "split", "sentence", "words", "num", "char", "s", "stem", "null", "set", "trim", "result", "index", "text", "word", "str", "chars", "terms", "sorted", "parts", "length", "classify", "list", "c", "seen", "original", "count", "ignored", "stemmed", "intersection"], "deduped": ["tmp", "stems", "ignore", "n", "split", "sentence", "words", "num", "char", "s", "unique", "stem", "null", "set", "trim", "result", "res", "index", "text", "ret", "word", "reversed", "str", "chars", "terms", "sorted", "parts", "length", "classify", "list", "c", "seen", "original", "count", "ignored", "stemmed", "intersection"], "s": ["tmp", "stems", "ignore", "n", "split", "r", "term", "sentence", "words", "num", "char", "s", "unique", "stem", "null", "set", "trim", "result", "res", "index", "w", "text", "ret", "word", "reversed", "str", "chars", "terms", "sorted", "parts", "length", "classify", "list", "c", "seen", "original", "count", "ignored", "stemmed", "intersection"]}}
{"code": "public GetGatewayResponsesResult getGatewayResponses(GetGatewayResponsesRequest request) {request = beforeClientExecution(request);return executeGetGatewayResponses(request);}\n", "substitutes": {"getGatewayResponses": ["get", "execute", "list", "call", "describe"], "request": ["input", "get", "parent", "argument", "response", "execute", "list", "call", "request", "req", "instruction", "query", "describe"]}}
{"code": "public void setPosition(long pos) {currentBlockIndex = (int) (pos >> blockBits);currentBlock = blocks[currentBlockIndex];currentBlockUpto = (int) (pos & blockMask);}\n", "substitutes": {"setPosition": ["update", "add", "block", "set", "seek"], "pos": ["update", "index", "add", "block", "value", "position", "pos", "set", "p", "i", "seek"], "currentBlockIndex": ["update", "index", "add", "0", "block", "value", "position", "pos", "offset", "set", "p", "i", "seek"], "currentBlock": ["update", "index", "add", "0", "block", "value", "blocks", "current", "position", "pos", "offset", "set", "p", "i", "seek"], "currentBlockUpto": ["update", "index", "add", "0", "block", "value", "blocks", "current", "position", "pos", "offset", "set", "p", "i", "seek"]}}
{"code": "public long skip(long n) {int s = (int) Math.min(available(), Math.max(0, n));ptr += s;return s;}\n", "substitutes": {"skip": ["skip", "available", "reserve", "fill", "read"], "n": ["skip", "index", "available", "n", "reserve", "fill", "pos", "offset", "ptr", "read"], "s": ["skip", "cap", "index", "available", "n", "capacity", "reserve", "min", "pointer", "fill", "pos", "offset", "len", "ptr", "read"], "ptr": ["skip", "cap", "s", "index", "available", "n", "capacity", "current", "reserve", "min", "pointer", "total", "fill", "pos", "offset", "len", "ptr", "read"]}}
{"code": "public BootstrapActionDetail(BootstrapActionConfig bootstrapActionConfig) {setBootstrapActionConfig(bootstrapActionConfig);}\n", "substitutes": {"bootstrapActionConfig": ["info", "config", "configuration", "c", "conf"]}}
{"code": "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_row);out.writeShort(field_2_col);out.writeShort(field_3_flags);out.writeShort(field_4_shapeid);out.writeShort(field_6_author.length());out.writeByte(field_5_hasMultibyte ? 0x01 : 0x00);if (field_5_hasMultibyte) {StringUtil.putUnicodeLE(field_6_author, out);} else {StringUtil.putCompressedUnicode(field_6_author, out);}if (field_7_padding != null) {out.writeByte(field_7_padding.intValue());}}\n", "substitutes": {"serialize": ["output", "store", "encode", "flush", "write"], "out": ["bos", "w", "output", "o", "store", "encode", "flush", "b", "out", "write", "os"]}}
{"code": "public int lastIndexOf(String string) {return lastIndexOf(string, count);}\n", "substitutes": {"lastIndexOf": ["length", "count", "find", "size", "search", "len", "match"], "string": ["length", "s", "text", "value", "count", "find", "str", "size", "search", "len", "string", "match"]}}
{"code": "public boolean add(E object) {return addLastImpl(object);}\n", "substitutes": {"add": ["add", "adds", "append", "contains", "remove"], "object": ["s", "add", "adds", "e", "append", "child", "i", "contains", "impl", "remove"]}}
{"code": "public void unsetSection(String section, String subsection) {ConfigSnapshot src, res;do {src = state.get();res = unsetSection(src, section, subsection);} while (!state.compareAndSet(src, res));}\n", "substitutes": {"unsetSection": ["update", "create", "initialize", "copy", "merge", "clone", "snapshot", "init", "set"], "section": ["update", "create", "initialize", "copy", "merge", "clone", "name", "prefix", "section", "key", "title", "subsection", "snapshot", "init", "set"], "subsection": ["update", "create", "initialize", "copy", "merge", "clone", "name", "prefix", "section", "key", "title", "value", "subsection", "snapshot", "init", "option", "set"], "src": ["update", "create", "tmp", "config", "section", "value", "prev", "s", "key", "name", "option", "set", "initialize", "copy", "merge", "clone", "prefix", "title", "subsection", "snapshot", "cur", "c", "snap", "init"], "res": ["update", "create", "tmp", "config", "section", "value", "prev", "s", "key", "name", "target", "option", "set", "result", "initialize", "copy", "merge", "clone", "state", "prefix", "title", "dest", "src", "subsection", "snapshot", "dst", "cur", "c", "snap", "init"]}}
{"code": "public final String getTagName() {return tagName;}\n", "substitutes": {"getTagName": ["key", "name", "tag", "get"]}}
{"code": "public void addSubRecord(int index, SubRecord element) {subrecords.add(index, element);}\n", "substitutes": {"addSubRecord": ["record", "add", "insert", "set", "put"], "index": ["id", "index", "record", "add", "key", "position", "i", "insert", "set", "put"], "element": ["id", "index", "record", "rec", "add", "key", "r", "position", "child", "i", "insert", "sub", "set", "put"]}}
{"code": "public boolean remove(Object o) {synchronized (mutex) {return delegate().remove(o);}}\n", "substitutes": {"remove": ["equals", "remove", "add", "accept", "contains", "put"], "o": ["obj", "id", "equals", "object", "remove", "add", "key", "o", "accept", "e", "contains", "put"]}}
{"code": "public DoubleMetaphoneFilter create(TokenStream input) {return new DoubleMetaphoneFilter(input, maxCodeLength, inject);}\n", "substitutes": {"create": ["wrap", "create", "apply", "build", "filter"], "input": ["wrap", "create", "token", "apply", "build", "input", "s", "filter", "tokens", "stream"]}}
{"code": "public long length() {return inCoreLength();}\n", "substitutes": {"length": ["length", "Length", "enabled", "size", "len"]}}
{"code": "public void setValue(boolean newValue) {value = newValue;}\n", "substitutes": {"setValue": ["update", "accept", "value", "set", "put"], "newValue": ["update", "v", "accept", "value", "val", "b", "set", "true", "put"], "value": ["update", "Value", "enabled", "v", "accept", "value", "checked", "selected", "val", "b", "set", "true", "put"]}}
{"code": "public Pair(ContentSource oldSource, ContentSource newSource) {this.oldSource = oldSource;this.newSource = newSource;}\n", "substitutes": {"oldSource": ["source", "parent", "s", "original", "pair", "src", "Source"], "newSource": ["source", "parent", "s", "original", "pair", "src", "target", "null", "content", "Source"]}}
{"code": "public int get(int i) {if (count <= i)throw new ArrayIndexOutOfBoundsException(i);return entries[i];}\n", "substitutes": {"get": ["entry", "get", "peek", "index", "find"], "i": ["entry", "get", "peek", "index", "0", "1", "start", "this", "find", "count", "position", "offset", "i"]}}
{"code": "public CreateRepoRequest() {super(\"cr\", \"2016-06-07\", \"CreateRepo\", \"cr\");setUriPattern(\"/repos\");setMethod(MethodType.PUT);}\n", "substitutes": {}}
{"code": "public boolean isDeltaBaseAsOffset() {return deltaBaseAsOffset;}\n", "substitutes": {"isDeltaBaseAsOffset": ["get", "exists", "abs", "delta", "offset"]}}
{"code": "public void remove() {if (expectedModCount == list.modCount) {if (lastLink != null) {Link<ET> next = lastLink.next;Link<ET> previous = lastLink.previous;next.previous = previous;previous.next = next;if (lastLink == link) {pos--;}link = previous;lastLink = null;expectedModCount++;list.size--;list.modCount++;} else {throw new IllegalStateException();}} else {throw new ConcurrentModificationException();}}\n", "substitutes": {"remove": ["pop", "reset", "close", "clear", "remove"], "next": ["next", "link", "links", "linked", "current", "last", "pop", "reset", "previous", "null", "close", "clear", "remove"], "previous": ["next", "prev", "parent", "link", "links", "linked", "current", "last", "pop", "old", "reset", "previous", "null", "close", "clear", "remove"], "pos": ["link", "current", "previous", "prev", "linked", "last", "pop", "old", "null", "close", "clear", "next", "index", "links", "remove", "length", "parent", "count", "reset", "size"], "link": ["link", "current", "previous", "prev", "linked", "last", "pop", "old", "null", "close", "clear", "next", "index", "links", "remove", "length", "parent", "count", "reset", "size"], "lastLink": ["link", "current", "previous", "prev", "linked", "last", "pop", "old", "null", "close", "clear", "next", "index", "links", "remove", "length", "parent", "count", "reset", "size"], "expectedModCount": ["link", "current", "position", "previous", "prev", "linked", "0", "last", "pop", "old", "null", "close", "len", "clear", "next", "index", "links", "remove", "length", "parent", "count", "reset", "pos", "size"], "list": ["link", "current", "position", "previous", "prev", "linked", "0", "last", "this", "pop", "old", "null", "close", "len", "clear", "next", "index", "links", "remove", "length", "parent", "list", "count", "reset", "pos", "size"], "size": ["link", "current", "position", "previous", "prev", "linked", "0", "last", "this", "pop", "old", "null", "close", "len", "clear", "next", "index", "links", "remove", "length", "parent", "list", "count", "reset", "pos", "size"], "modCount": ["link", "current", "position", "previous", "prev", "linked", "0", "last", "this", "pop", "old", "null", "close", "len", "clear", "next", "index", "links", "max", "limit", "remove", "length", "parent", "list", "count", "reset", "pos", "size"]}}
{"code": "public MergeShardsResult mergeShards(MergeShardsRequest request) {request = beforeClientExecution(request);return executeMergeShards(request);}\n", "substitutes": {"mergeShards": ["update", "create", "merge", "execute", "merged"], "request": ["input", "update", "create", "parent", "merge", "execute", "merged", "resource", "request", "call", "req", "query", "argument", "parameters"]}}
{"code": "public AllocateHostedConnectionResult allocateHostedConnection(AllocateHostedConnectionRequest request) {request = beforeClientExecution(request);return executeAllocateHostedConnection(request);}\n", "substitutes": {"allocateHostedConnection": ["apply", "execute", "allocate", "call", "complete"], "request": ["input", "apply", "parent", "execute", "allocate", "call", "request", "req", "query", "p", "complete"]}}
{"code": "public int getBeginIndex() {return start;}\n", "substitutes": {"getBeginIndex": ["get", "index", "start", "position", "size"]}}
{"code": "public static final WeightedTerm[] getTerms(Query query){return getTerms(query,false);}\n", "substitutes": {"getTerms": ["filter", "weights", "term", "terms", "sort"], "query": ["filter", "weights", "search", "term", "q", "query", "terms", "sort", "Query"]}}
{"code": "public ByteBuffer compact() {throw new ReadOnlyBufferException();}\n", "substitutes": {"compact": ["create", "get", "build", "allocate", "throw"]}}
{"code": "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = byte0 >>> 2;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte0 & 3) << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 2) | (byte2 >>> 6);values[valuesOffset++] = byte2 & 63;}}\n", "substitutes": {"decode": ["process", "update", "generate", "shuffle", "encode"], "blocks": ["process", "update", "data", "bytes", "generate", "shuffle", "blocks", "encode", "buf", "buffer", "values"], "blocksOffset": ["process", "update", "data", "bytes", "index", "generate", "shuffle", "blocks", "start", "position", "encode", "buf", "i", "pos", "offset", "j", "buffer", "values"], "values": ["process", "update", "data", "shuffle", "bits", "blocks", "start", "position", "buffer", "mask", "values", "generate", "offset", "result", "index", "encode", "i", "j", "bytes", "buf", "sizes", "pos"], "valuesOffset": ["process", "update", "data", "shuffle", "bits", "blocks", "start", "position", "buffer", "mask", "values", "generate", "offset", "result", "index", "off", "encode", "i", "j", "length", "bytes", "count", "buf", "sizes", "pos", "size"], "iterations": ["process", "update", "data", "n", "shuffle", "bits", "blocks", "start", "position", "buffer", "mask", "values", "generate", "offset", "len", "result", "index", "off", "encode", "i", "j", "length", "bytes", "count", "buf", "sizes", "pos", "size"], "i": ["process", "update", "data", "n", "shuffle", "bits", "blocks", "start", "r", "position", "e", "buffer", "mask", "values", "iter", "generate", "t", "offset", "len", "result", "iterations", "index", "iteration", "off", "x", "encode", "i", "j", "length", "bytes", "count", "buf", "sizes", "pos", "size"], "byte0": ["process", "update", "data", "n", "shuffle", "bits", "blocks", "start", "r", "position", "e", "value", "block", "buffer", "mask", "values", "iter", "generate", "t", "offset", "len", "result", "iterations", "index", "iteration", "off", "x", "encode", "b", "i", "j", "length", "bytes", "count", "buf", "sizes", "val", "pos", "size"], "byte1": ["process", "update", "data", "n", "shuffle", "bits", "blocks", "start", "r", "position", "e", "value", "block", "buffer", "mask", "values", "iter", "generate", "t", "1", "chunk", "offset", "len", "result", "iterations", "index", "iteration", "off", "x", "first", "encode", "b", "i", "j", "length", "bytes", "count", "buf", "sizes", "val", "pos", "size"], "byte2": ["process", "update", "data", "bit", "n", "shuffle", "bits", "blocks", "start", "r", "position", "e", "value", "block", "buffer", "mask", "values", "iter", "2", "generate", "t", "1", "chunk", "offset", "second", "len", "result", "iterations", "next", "index", "iteration", "off", "x", "first", "encode", "b", "i", "j", "length", "bytes", "count", "buf", "sizes", "val", "pos", "size", "remainder"]}}
{"code": "public String getHumanishName() throws IllegalArgumentException {String s = getPath();if (\"/\".equals(s) || \"\".equals(s)) s = getHost();if (s == null) throw new IllegalArgumentException();String[] elements;if (\"file\".equals(scheme) || LOCAL_FILE.matcher(s).matches()) elements = s.split(\"[\\\\\" + File.separatorChar + \"/]\"); elseelements = s.split(\"/+\"); if (elements.length == 0)throw new IllegalArgumentException();String result = elements[elements.length - 1];if (Constants.DOT_GIT.equals(result))result = elements[elements.length - 2];else if (result.endsWith(Constants.DOT_GIT_EXT))result = result.substring(0, result.length()- Constants.DOT_GIT_EXT.length());return result;}\n", "substitutes": {"getHumanishName": ["get", "host", "path", "split", "url"], "s": ["get", "host", "path", "name", "schema", "split", "url", "scheme"], "elements": ["element", "result", "entries", "get", "s", "host", "path", "Elements", "name", "schema", "split", "url", "segments", "scheme", "lements", "elements", "parts"], "elseelements": ["element", "result", "entries", "get", "s", "host", "path", "Elements", "name", "schema", "split", "url", "segments", "scheme", "lements", "elements", "parts"], "result": ["schema", "e", "split", "url", "scheme", "lements", "elements", "entries", "s", "name", "segments", "element", "result", "prefix", "parts", "get", "host", "path", "Elements"]}}
{"code": "public DescribeNotebookInstanceLifecycleConfigResult describeNotebookInstanceLifecycleConfig(DescribeNotebookInstanceLifecycleConfigRequest request) {request = beforeClientExecution(request);return executeDescribeNotebookInstanceLifecycleConfig(request);}\n", "substitutes": {"describeNotebookInstanceLifecycleConfig": ["execute", "call", "request", "send", "describe"], "request": ["input", "op", "execute", "call", "request", "req", "query", "send", "describe"]}}
{"code": "public String getAccessKeySecret() {return this.accessKeySecret;}\n", "substitutes": {"getAccessKeySecret": ["name", "key", "get", "secret"]}}
{"code": "public CreateVpnConnectionResult createVpnConnection(CreateVpnConnectionRequest request) {request = beforeClientExecution(request);return executeCreateVpnConnection(request);}\n", "substitutes": {"createVpnConnection": ["create", "begin", "execute", "call", "connect"], "request": ["input", "create", "begin", "parent", "execute", "resource", "call", "request", "req", "p", "query", "connect"]}}
{"code": "public DescribeVoicesResult describeVoices(DescribeVoicesRequest request) {request = beforeClientExecution(request);return executeDescribeVoices(request);}\n", "substitutes": {"describeVoices": ["execute", "call", "request", "send", "describe"], "request": ["input", "parent", "argument", "execute", "call", "request", "req", "query", "send", "describe"]}}
{"code": "public ListMonitoringExecutionsResult listMonitoringExecutions(ListMonitoringExecutionsRequest request) {request = beforeClientExecution(request);return executeListMonitoringExecutions(request);}\n", "substitutes": {"listMonitoringExecutions": ["get", "execute", "list", "lists", "run"], "request": ["input", "get", "parent", "execute", "list", "lists", "run", "request", "call", "req", "query", "instruction", "argument", "p"]}}
{"code": "public DescribeJobRequest(String vaultName, String jobId) {setVaultName(vaultName);setJobId(jobId);}\n", "substitutes": {"vaultName": ["account", "name", "vault", "username", "namespace"], "jobId": ["id", "identifier", "account", "name", "vault", "ID", "job", "username", "namespace", "Id"]}}
{"code": "public EscherRecord getEscherRecord(int index){return escherRecords.get(index);}\n", "substitutes": {"getEscherRecord": ["record", "find", "get", "retrieve"], "index": ["get", "id", "index", "record", "retrieve", "key", "name", "find", "offset", "i"]}}
{"code": "public GetApisResult getApis(GetApisRequest request) {request = beforeClientExecution(request);return executeGetApis(request);}\n", "substitutes": {"getApis": ["get", "execute", "list", "call", "describe"], "request": ["input", "get", "parent", "argument", "execute", "list", "call", "request", "req", "instruction", "query", "describe", "p"]}}
{"code": "public DeleteSmsChannelResult deleteSmsChannel(DeleteSmsChannelRequest request) {request = beforeClientExecution(request);return executeDeleteSmsChannel(request);}\n", "substitutes": {"deleteSmsChannel": ["execute", "delete", "send", "complete", "remove"], "request": ["input", "parent", "execute", "resource", "request", "call", "req", "delete", "send", "query", "complete", "p", "remove"]}}
{"code": "public TrackingRefUpdate getTrackingRefUpdate() {return trackingRefUpdate;}\n", "substitutes": {"getTrackingRefUpdate": ["update", "create", "get", "build", "copy"]}}
{"code": "public void print(boolean b) {print(String.valueOf(b));}\n", "substitutes": {"print": ["output", "println", "log", "b", "print", "write"], "b": ["output", "v", "println", "value", "val", "log", "b", "print", "write", "true", "i"]}}
{"code": "public QueryNode getChild() {return getChildren().get(0);}\n", "substitutes": {"getChild": ["get", "last", "first", "root", "node"]}}
{"code": "public NotIgnoredFilter(int workdirTreeIndex) {this.index = workdirTreeIndex;}\n", "substitutes": {"workdirTreeIndex": ["index", "name", "0", "indexes", "indexed", "indices", "i"], "index": ["index", "path", "tree", "name", "0", "indexes", "indexed", "indices", "root", "i"]}}
{"code": "public AreaRecord(RecordInputStream in) {field_1_formatFlags            = in.readShort();}\n", "substitutes": {"in": ["ins", "in", "is", "out", "stream"], "field_1_formatFlags": ["ins", "in", "id", "record", "area", "level", "offset", "is", "out", "stream"]}}
{"code": "public GetThumbnailRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"GetThumbnail\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n", "substitutes": {}}
{"code": "public DescribeTransitGatewayVpcAttachmentsResult describeTransitGatewayVpcAttachments(DescribeTransitGatewayVpcAttachmentsRequest request) {request = beforeClientExecution(request);return executeDescribeTransitGatewayVpcAttachments(request);}\n", "substitutes": {"describeTransitGatewayVpcAttachments": ["list", "execute", "call", "describe", "summary"], "request": ["input", "op", "list", "execute", "call", "request", "req", "instruction", "query", "describe", "summary"]}}
{"code": "public PutVoiceConnectorStreamingConfigurationResult putVoiceConnectorStreamingConfiguration(PutVoiceConnectorStreamingConfigurationRequest request) {request = beforeClientExecution(request);return executePutVoiceConnectorStreamingConfiguration(request);}\n", "substitutes": {"putVoiceConnectorStreamingConfiguration": ["execute", "call", "run", "send", "put"], "request": ["input", "op", "execute", "call", "run", "request", "req", "query", "send", "put"]}}
{"code": "public OrdRange getOrdRange(String dim) {return prefixToOrdRange.get(dim);}\n", "substitutes": {"getOrdRange": ["get", "lookup", "find", "opt", "resolve"], "dim": ["get", "key", "name", "lookup", "prefix", "c", "find", "pref", "opt", "p", "resolve"]}}
{"code": "public String toString() {String symbol = \"\";if (startIndex >= 0 && startIndex < getInputStream().size()) {symbol = getInputStream().getText(Interval.of(startIndex,startIndex));symbol = Utils.escapeWhitespace(symbol, false);}return String.format(Locale.getDefault(), \"%s('%s')\", LexerNoViableAltException.class.getSimpleName(), symbol);}\n", "substitutes": {"toString": ["get", "alternate", "generate", "name", "escape"], "symbol": ["input", "line", "get", "alternate", "s", "generate", "text", "name", "escape", "str", "string", "msg"]}}
{"code": "public E peek() {return peekFirstImpl();}\n", "substitutes": {"peek": ["next", "peek", "current", "first", "pop"]}}
{"code": "public CreateWorkspacesResult createWorkspaces(CreateWorkspacesRequest request) {request = beforeClientExecution(request);return executeCreateWorkspaces(request);}\n", "substitutes": {"createWorkspaces": ["create", "begin", "execute", "created", "call"], "request": ["input", "create", "begin", "parent", "response", "execute", "created", "call", "request", "instruction", "req", "query", "argument", "parameters"]}}
{"code": "public NumberFormatIndexRecord clone() {return copy();}\n", "substitutes": {"clone": ["get", "duplicate", "copy", "clone", "Copy"]}}
{"code": "public DescribeRepositoriesResult describeRepositories(DescribeRepositoriesRequest request) {request = beforeClientExecution(request);return executeDescribeRepositories(request);}\n", "substitutes": {"describeRepositories": ["execute", "list", "request", "describe", "summary"], "request": ["input", "parent", "argument", "execute", "list", "request", "req", "call", "query", "describe", "summary"]}}
{"code": "public SparseIntArray(int initialCapacity) {initialCapacity = ArrayUtils.idealIntArraySize(initialCapacity);mKeys = new int[initialCapacity];mValues = new int[initialCapacity];mSize = 0;}\n", "substitutes": {"initialCapacity": ["length", "s", "n", "N", "capacity", "0", "1", "count", "size", "len"], "mKeys": ["length", "s", "array", "n", "N", "capacity", "0", "1", "indices", "count", "indexes", "keys", "size", "len", "elements"], "mValues": ["length", "s", "array", "n", "N", "capacity", "0", "1", "Values", "value", "indices", "count", "indexes", "keys", "size", "len", "elements", "values"], "mSize": ["n", "capacity", "value", "position", "keys", "indices", "elements", "values", "s", "array", "0", "1", "Values", "indexes", "len", "index", "i", "length", "N", "count", "size"]}}
{"code": "public HyphenatedWordsFilter create(TokenStream input) {return new HyphenatedWordsFilter(input);}\n", "substitutes": {"create": ["wrap", "create", "parse", "build", "filter"], "input": ["wrap", "create", "parse", "input", "build", "s", "token", "filter", "tokens", "stream"]}}
{"code": "public CreateDistributionWithTagsResult createDistributionWithTags(CreateDistributionWithTagsRequest request) {request = beforeClientExecution(request);return executeCreateDistributionWithTags(request);}\n", "substitutes": {"createDistributionWithTags": ["create", "execute", "call", "run", "describe"], "request": ["input", "create", "parent", "argument", "execute", "resource", "call", "run", "request", "req", "query", "describe", "parameters", "p"]}}
{"code": "public RandomAccessFile(String fileName, String mode) throws FileNotFoundException {this(new File(fileName), mode);}\n", "substitutes": {"fileName": ["file", "filename", "path", "name", "url"], "mode": ["file", "filename", "path", "name", "url", "password", "type", "encoding", "content"]}}
{"code": "public DeleteWorkspaceImageResult deleteWorkspaceImage(DeleteWorkspaceImageRequest request) {request = beforeClientExecution(request);return executeDeleteWorkspaceImage(request);}\n", "substitutes": {"deleteWorkspaceImage": ["begin", "execute", "run", "delete", "complete"], "request": ["input", "begin", "parent", "execute", "resource", "run", "request", "req", "call", "delete", "query", "argument", "p", "complete"]}}
{"code": "public static String toHex(long value) {StringBuilder sb = new StringBuilder(16);writeHex(sb, value, 16, \"\");return sb.toString();}\n", "substitutes": {"toHex": ["escape", "hex", "encode", "string", "format"], "value": ["length", "s", "escape", "value", "hex", "encode", "val", "b", "l", "len", "string", "format"], "sb": ["result", "length", "s", "escape", "value", "hex", "builder", "encode", "buf", "val", "buffer", "b", "l", "len", "string", "format"]}}
{"code": "public UpdateDistributionResult updateDistribution(UpdateDistributionRequest request) {request = beforeClientExecution(request);return executeUpdateDistribution(request);}\n", "substitutes": {"updateDistribution": ["update", "create", "execute", "run", "put"], "request": ["input", "update", "create", "parent", "execute", "run", "request", "req", "call", "query", "argument", "parameters", "p", "put"]}}
{"code": "public HSSFColor getColor(short index){if (index == HSSFColorPredefined.AUTOMATIC.getIndex()) {return HSSFColorPredefined.AUTOMATIC.getColor();}byte[] b = _palette.getColor(index);return (b == null) ? null : new CustomColor(index, b);}\n", "substitutes": {"getColor": ["rgb", "create", "get", "color", "copy", "clone", "lookup", "value", "find", "read"], "index": ["rgb", "create", "get", "color", "id", "index", "copy", "s", "clone", "name", "lookup", "c", "value", "a", "find", "i", "read"], "b": ["create", "data", "color", "value", "a", "id", "s", "name", "read", "result", "index", "copy", "clone", "b", "i", "rgb", "get", "colors", "lookup", "c", "find"]}}
{"code": "public ValueEval evaluate(ValueEval[] operands, int srcRow, int srcCol) {throw new NotImplementedFunctionException(_functionName);}\n", "substitutes": {"evaluate": ["apply", "execute", "call", "evaluate", "invoke"], "operands": ["eval", "apply", "evaluations", "arguments", "execute", "call", "evaluate", "invoke", "args", "values"], "srcRow": ["eval", "line", "apply", "evaluations", "arguments", "row", "execute", "call", "evaluate", "invoke", "src", "args", "rows", "values", "col"], "srcCol": ["eval", "line", "apply", "column", "evaluations", "arguments", "index", "row", "execute", "call", "evaluate", "invoke", "src", "args", "rows", "columns", "values", "col"]}}
{"code": "public void serialize(LittleEndianOutput out) {out.writeShort((short)field_1_number_crn_records);out.writeShort((short)field_2_sheet_table_index);}\n", "substitutes": {"serialize": ["record", "serial", "store", "encode", "write"], "out": ["bos", "record", "o", "output", "serial", "store", "encode", "out", "write", "os"]}}
{"code": "public DescribeDBEngineVersionsResult describeDBEngineVersions() {return describeDBEngineVersions(new DescribeDBEngineVersionsRequest());}\n", "substitutes": {"describeDBEngineVersions": ["get", "list", "execute", "call", "request", "send", "describe"]}}
{"code": "public FormatRun(short character, short fontIndex) {this._character = character;this._fontIndex = fontIndex;}\n", "substitutes": {"character": ["char", "characteristic", "c", "0", "character", "Character"], "fontIndex": ["font", "char", "characteristic", "index", "c", "0", "offset", "character", "style", "Character", "i"], "_character": ["font", "char", "characteristic", "index", "rune", "c", "0", "_", "offset", "character", "style", "Character", "i"], "_fontIndex": ["width", "font", "char", "characteristic", "index", "rune", "c", "0", "_", "offset", "character", "size", "style", "Character", "i"]}}
{"code": "public static byte[] toBigEndianUtf16Bytes(char[] chars, int offset, int length) {byte[] result = new byte[length * 2];int end = offset + length;int resultIndex = 0;for (int i = offset; i < end; ++i) {char ch = chars[i];result[resultIndex++] = (byte) (ch >> 8);result[resultIndex++] = (byte) ch;}return result;}\n", "substitutes": {"toBigEndianUtf16Bytes": ["range", "bytes", "copy", "split", "slice"], "chars": ["input", "range", "data", "array", "bytes", "copy", "split", "chars", "slice", "arr"], "offset": ["input", "range", "data", "begin", "array", "bytes", "copy", "off", "base", "0", "split", "start", "chars", "pos", "offset", "slice", "arr"], "length": ["data", "n", "base", "split", "start", "input", "begin", "array", "0", "offset", "len", "range", "copy", "off", "chars", "slice", "arr", "length", "bytes", "count", "pos", "size"], "result": ["data", "n", "base", "split", "start", "out", "input", "begin", "array", "0", "offset", "len", "result", "range", "copy", "off", "ret", "chars", "b", "slice", "arr", "length", "bytes", "count", "buf", "pos", "size"], "end": ["data", "n", "base", "split", "start", "out", "input", "begin", "array", "0", "offset", "len", "result", "range", "copy", "off", "ret", "chars", "b", "slice", "arr", "limit", "length", "end", "bytes", "count", "buf", "pos", "size"], "resultIndex": ["data", "n", "base", "split", "start", "out", "input", "begin", "array", "0", "offset", "len", "result", "range", "index", "copy", "off", "ret", "chars", "b", "slice", "arr", "limit", "i", "length", "end", "bytes", "count", "buf", "pos", "size"], "i": ["data", "n", "base", "split", "start", "out", "input", "begin", "array", "0", "offset", "len", "result", "range", "index", "copy", "off", "ret", "chars", "b", "slice", "arr", "limit", "i", "j", "length", "end", "bytes", "c", "ii", "count", "buf", "pos", "size"], "ch": ["data", "n", "base", "split", "start", "out", "input", "begin", "char", "array", "s", "0", "offset", "len", "result", "range", "index", "copy", "off", "ret", "chars", "b", "slice", "arr", "limit", "i", "j", "length", "end", "bytes", "ch", "c", "ii", "count", "buf", "pos", "size"]}}
{"code": "public UploadArchiveResult uploadArchive(UploadArchiveRequest request) {request = beforeClientExecution(request);return executeUploadArchive(request);}\n", "substitutes": {"uploadArchive": ["create", "archive", "execute", "upload", "run"], "request": ["input", "create", "archive", "parent", "execute", "resource", "upload", "run", "request", "call", "req", "argument"]}}
{"code": "public List<Token> getHiddenTokensToLeft(int tokenIndex) {return getHiddenTokensToLeft(tokenIndex, -1);}\n", "substitutes": {"getHiddenTokensToLeft": ["range", "get", "list", "split", "tokens", "tail"], "tokenIndex": ["range", "get", "index", "n", "list", "split", "depth", "tokens", "tail", "level", "pos", "offset", "i"]}}
{"code": "public boolean equals(Object obj) {if (this == obj)return true;if (!super.equals(obj))return false;if (getClass() != obj.getClass())return false;AutomatonQuery other = (AutomatonQuery) obj;if (!compiled.equals(other.compiled))return false;if (term == null) {if (other.term != null)return false;} else if (!term.equals(other.term))return false;return true;}\n", "substitutes": {"equals": ["equals", "test", "add", "compare", "accept", "equal", "matches", "contains", "match"], "obj": ["obj", "other", "arg", "equals", "object", "test", "add", "o", "compare", "accept", "equal", "this", "target", "matches", "contains", "match"], "other": ["object", "test", "r", "a", "term", "contains", "obj", "other", "o", "compare", "this", "equal", "target", "add", "q", "match", "matches", "equals", "accept", "query", "arg"]}}
{"code": "public SpanQuery makeSpanClause() {SpanQuery [] spanQueries = new SpanQuery[size()];Iterator<SpanQuery> sqi = weightBySpanQuery.keySet().iterator();int i = 0;while (sqi.hasNext()) {SpanQuery sq = sqi.next();float boost = weightBySpanQuery.get(sq);if (boost != 1f) {sq = new SpanBoostQuery(sq, boost);}spanQueries[i++] = sq;}if (spanQueries.length == 1)return spanQueries[0];else return new SpanOrQuery(spanQueries);}\n", "substitutes": {"makeSpanClause": ["next", "build", "span", "first", "query"], "spanQueries": ["next", "result", "queries", "build", "span", "first", "q", "query", "clauses"], "sqi": ["next", "result", "iter", "queries", "build", "span", "f", "first", "q", "iterator", "query", "it", "clauses", "i"], "i": ["n", "iter", "build", "span", "clauses", "next", "result", "index", "first", "q", "iterator", "it", "j", "i", "queries", "f", "count", "query", "pos"], "sq": ["n", "iter", "build", "span", "s", "name", "sq", "clauses", "next", "result", "index", "first", "q", "iterator", "it", "j", "i", "queries", "f", "count", "query", "pos"], "boost": ["n", "iter", "build", "span", "s", "name", "weights", "weight", "boost", "sq", "clauses", "next", "result", "index", "w", "first", "q", "iterator", "it", "j", "i", "queries", "f", "count", "query", "pos"]}}
{"code": "public StashCreateCommand stashCreate() {return new StashCreateCommand(repo);}\n", "substitutes": {"stashCreate": ["create", "command", "build", "builder"]}}
{"code": "public FieldInfo fieldInfo(String fieldName) {return byName.get(fieldName);}\n", "substitutes": {"fieldInfo": ["info", "get", "lookup", "field", "find"], "fieldName": ["info", "get", "id", "s", "n", "key", "name", "lookup", "field", "find"]}}
{"code": "public DescribeEventSourceResult describeEventSource(DescribeEventSourceRequest request) {request = beforeClientExecution(request);return executeDescribeEventSource(request);}\n", "substitutes": {"describeEventSource": ["execute", "call", "request", "send", "describe"], "request": ["input", "parent", "argument", "execute", "resource", "call", "request", "req", "send", "describe"]}}
{"code": "public GetDocumentAnalysisResult getDocumentAnalysis(GetDocumentAnalysisRequest request) {request = beforeClientExecution(request);return executeGetDocumentAnalysis(request);}\n", "substitutes": {"getDocumentAnalysis": ["get", "execute", "call", "run", "analyze"], "request": ["input", "get", "parent", "execute", "resource", "call", "run", "analyze", "request", "query", "req", "argument"]}}
{"code": "public CancelUpdateStackResult cancelUpdateStack(CancelUpdateStackRequest request) {request = beforeClientExecution(request);return executeCancelUpdateStack(request);}\n", "substitutes": {"cancelUpdateStack": ["execute", "call", "cancel", "delete", "send"], "request": ["input", "argument", "execute", "call", "request", "cancel", "req", "delete", "instruction", "send", "parameters"]}}
{"code": "public ModifyLoadBalancerAttributesResult modifyLoadBalancerAttributes(ModifyLoadBalancerAttributesRequest request) {request = beforeClientExecution(request);return executeModifyLoadBalancerAttributes(request);}\n", "substitutes": {"modifyLoadBalancerAttributes": ["result", "update", "apply", "execute", "modify"], "request": ["result", "update", "input", "apply", "execute", "request", "req", "call", "instruction", "query", "argument", "modify", "p"]}}
{"code": "public SetInstanceProtectionResult setInstanceProtection(SetInstanceProtectionRequest request) {request = beforeClientExecution(request);return executeSetInstanceProtection(request);}\n", "substitutes": {"setInstanceProtection": ["update", "begin", "create", "execute", "call"], "request": ["input", "update", "begin", "create", "execute", "resource", "call", "request", "req", "query", "argument", "parameters", "p"]}}
{"code": "public ModifyDBProxyResult modifyDBProxy(ModifyDBProxyRequest request) {request = beforeClientExecution(request);return executeModifyDBProxy(request);}\n", "substitutes": {"modifyDBProxy": ["update", "apply", "execute", "run", "modify"], "request": ["input", "update", "apply", "parent", "execute", "run", "request", "call", "req", "query", "argument", "modify", "p"]}}
{"code": "public void add(char[] output, int offset, int len, int endOffset, int posLength) {if (count == outputs.length) {outputs = ArrayUtil.grow(outputs, count+1);}if (count == endOffsets.length) {final int[] next = new int[ArrayUtil.oversize(1+count, Integer.BYTES)];System.arraycopy(endOffsets, 0, next, 0, count);endOffsets = next;}if (count == posLengths.length) {final int[] next = new int[ArrayUtil.oversize(1+count, Integer.BYTES)];System.arraycopy(posLengths, 0, next, 0, count);posLengths = next;}if (outputs[count] == null) {outputs[count] = new CharsRefBuilder();}outputs[count].copyChars(output, offset, len);endOffsets[count] = endOffset;posLengths[count] = posLength;count++;}\n", "substitutes": {"add": ["copy", "output", "transfer", "add", "write"], "output": ["input", "copy", "output", "transfer", "add", "text", "buf", "chars", "arr", "buffer", "write"], "offset": ["input", "index", "copy", "output", "transfer", "add", "text", "0", "off", "start", "count", "buf", "chars", "pos", "offset", "arr", "buffer", "write"], "len": ["start", "buffer", "write", "input", "output", "transfer", "0", "offset", "len", "index", "copy", "off", "text", "add", "chars", "limit", "arr", "length", "count", "buf", "pos", "size"], "endOffset": ["start", "buffer", "write", "input", "output", "transfer", "0", "offset", "len", "next", "index", "copy", "off", "text", "add", "chars", "limit", "arr", "length", "count", "buf", "pos", "size"], "posLength": ["start", "buffer", "write", "input", "output", "transfer", "0", "1", "offset", "len", "next", "index", "copy", "off", "text", "add", "chars", "limit", "arr", "length", "depth", "count", "buf", "pos", "size"], "outputs": ["start", "buffer", "write", "out", "input", "output", "transfer", "0", "1", "offset", "len", "next", "references", "index", "copy", "off", "text", "add", "builder", "chars", "limit", "arr", "buffers", "length", "bytes", "depth", "builders", "count", "buf", "pos", "size"], "next": ["tmp", "start", "buffer", "write", "out", "orig", "input", "output", "transfer", "0", "1", "temp", "offset", "len", "lengths", "next", "references", "result", "index", "copy", "off", "text", "add", "builder", "chars", "limit", "arr", "offsets", "buffers", "length", "bytes", "depth", "builders", "count", "buf", "pos", "size"], "endOffsets": ["tmp", "start", "blocks", "buffer", "write", "out", "orig", "input", "output", "transfer", "0", "1", "temp", "offset", "len", "ends", "lengths", "next", "references", "result", "index", "copy", "off", "text", "add", "builder", "chars", "limit", "arr", "offsets", "buffers", "length", "end", "bytes", "depth", "builders", "count", "buf", "sizes", "pos", "outputs", "size"], "posLengths": ["tmp", "start", "blocks", "buffer", "write", "out", "orig", "input", "output", "transfer", "0", "1", "temp", "offset", "len", "ends", "lengths", "next", "references", "result", "index", "copy", "off", "text", "add", "builder", "chars", "limit", "arr", "offsets", "buffers", "length", "end", "positions", "bytes", "depth", "builders", "count", "buf", "sizes", "pos", "outputs", "size"], "count": ["tmp", "n", "start", "blocks", "buffer", "write", "out", "orig", "input", "2", "output", "transfer", "0", "1", "temp", "offset", "len", "ends", "lengths", "next", "references", "result", "index", "copy", "off", "text", "add", "builder", "chars", "limit", "arr", "offsets", "buffers", "i", "length", "end", "positions", "bytes", "depth", "builders", "count", "buf", "sizes", "pos", "outputs", "size"]}}
{"code": "public FetchLibrariesRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"FetchLibraries\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n", "substitutes": {}}
{"code": "public boolean exists() {return fs.exists(objects);}\n", "substitutes": {"exists": ["next", "exists", "delete", "has", "remove"]}}
{"code": "public FilterOutputStream(OutputStream out) {this.out = out;}\n", "substitutes": {"out": ["stream", "output", "o", "out", "os"]}}
{"code": "public ScaleClusterRequest() {super(\"CS\", \"2015-12-15\", \"ScaleCluster\", \"csk\");setUriPattern(\"/clusters/[ClusterId]\");setMethod(MethodType.PUT);}\n", "substitutes": {}}
{"code": "public DataValidationConstraint createTimeConstraint(int operatorType, String formula1, String formula2) {return DVConstraint.createTimeConstraint(operatorType, formula1, formula2);}\n", "substitutes": {"createTimeConstraint": ["create", "get", "constraint", "validate", "make", "of"], "operatorType": ["create", "get", "id", "index", "constraint", "validate", "make", "name", "field", "of", "type"], "formula1": ["create", "get", "id", "index", "constraint", "validate", "make", "name", "text", "value", "formula", "field", "expression", "of", "type"], "formula2": ["create", "get", "description", "id", "index", "constraint", "validate", "make", "name", "text", "value", "formula", "field", "expression", "message", "of", "type"]}}
{"code": "public ListObjectParentPathsResult listObjectParentPaths(ListObjectParentPathsRequest request) {request = beforeClientExecution(request);return executeListObjectParentPaths(request);}\n", "substitutes": {"listObjectParentPaths": ["get", "execute", "list", "lists", "call"], "request": ["input", "get", "parent", "op", "execute", "list", "lists", "call", "request", "req", "instruction", "query", "p"]}}
{"code": "public DescribeCacheSubnetGroupsResult describeCacheSubnetGroups(DescribeCacheSubnetGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeCacheSubnetGroups(request);}\n", "substitutes": {"describeCacheSubnetGroups": ["list", "execute", "call", "describe", "summary"], "request": ["input", "parent", "op", "list", "execute", "call", "request", "req", "query", "describe", "summary"]}}
{"code": "public void setSharedFormula(boolean flag) {field_5_options =sharedFormula.setShortBoolean(field_5_options, flag);}\n", "substitutes": {"setSharedFormula": ["flag", "assign", "option", "options", "set"], "flag": ["flag", "s", "v", "value", "assign", "val", "b", "option", "options", "set", "true", "false"], "field_5_options": ["result", "flag", "s", "v", "name", "this", "0", "value", "null", "assign", "val", "flags", "b", "option", "options", "set", "true", "false"]}}
{"code": "public boolean isReuseObjects() {return reuseObjects;}\n", "substitutes": {"isReuseObjects": ["get", "use", "used", "reused", "reuse"]}}
{"code": "public ErrorNode addErrorNode(Token badToken) {ErrorNodeImpl t = new ErrorNodeImpl(badToken);addAnyChild(t);t.setParent(this);return t;}\n", "substitutes": {"addErrorNode": ["create", "add", "build", "make"], "badToken": ["token", "create", "build", "s", "make", "add", "t", "error", "root", "node"], "t": ["token", "create", "result", "build", "s", "make", "add", "n", "e", "t", "c", "ret", "child", "error", "root", "node"]}}
{"code": "public LatvianStemFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n", "substitutes": {}}
{"code": "public EventSubscription removeSourceIdentifierFromSubscription(RemoveSourceIdentifierFromSubscriptionRequest request) {request = beforeClientExecution(request);return executeRemoveSourceIdentifierFromSubscription(request);}\n", "substitutes": {"removeSourceIdentifierFromSubscription": ["update", "execute", "call", "delete", "remove"], "request": ["input", "update", "parent", "op", "execute", "call", "request", "req", "instruction", "delete", "query", "p", "remove"]}}
{"code": "public static TokenFilterFactory forName(String name, Map<String,String> args) {return loader.newInstance(name, args);}\n", "substitutes": {"forName": ["load", "create", "factory", "of"], "name": ["create", "method", "f", "filename", "name", "prefix", "tag", "fn", "of", "pattern", "load", "factory"]}}
{"code": "public AddAlbumPhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"AddAlbumPhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n", "substitutes": {}}
{"code": "public GetThreatIntelSetResult getThreatIntelSet(GetThreatIntelSetRequest request) {request = beforeClientExecution(request);return executeGetThreatIntelSet(request);}\n", "substitutes": {"getThreatIntelSet": ["get", "execute", "call", "invoke", "run"], "request": ["input", "get", "parent", "execute", "call", "invoke", "run", "request", "req", "query", "instruction", "p"]}}
{"code": "public RevFilter clone() {return new Binary(a.clone(), b.clone());}\n", "substitutes": {"clone": ["binary", "get", "build", "name", "filter", "head", "digest", "init", "hash", "rev"]}}
{"code": "public boolean equals( Object o ) {return o instanceof ArmenianStemmer;}\n", "substitutes": {"equals": ["is", "equals", "matches", "contains", "match"], "o": ["obj", "other", "is", "equals", "object", "o", "v", "a", "matches", "contains", "match"]}}
{"code": "public final boolean hasArray() {return protectedHasArray();}\n", "substitutes": {"hasArray": ["any", "has", "Array", "array"]}}
{"code": "public UpdateContributorInsightsResult updateContributorInsights(UpdateContributorInsightsRequest request) {request = beforeClientExecution(request);return executeUpdateContributorInsights(request);}\n", "substitutes": {"updateContributorInsights": ["update", "apply", "execute", "call", "run"], "request": ["input", "update", "apply", "execute", "resource", "call", "run", "request", "req", "query", "argument", "parameters", "p"]}}
{"code": "public void unwriteProtectWorkbook() {records.remove(fileShare);records.remove(writeProtect);fileShare = null;writeProtect = null;}\n", "substitutes": {"unwriteProtectWorkbook": ["destroy", "close", "free", "clear", "remove"], "fileShare": ["cover", "destroy", "copy", "save", "protection", "backup", "close", "protect", "write", "free", "clear", "remove"], "writeProtect": ["file", "save", "records", "content", "write", "files", "sheet", "cover", "record", "name", "close", "clear", "copy", "free", "backup", "remove", "destroy", "protection", "protect"]}}
{"code": "public SolrSynonymParser(boolean dedup, boolean expand, Analyzer analyzer) {super(dedup, analyzer);this.expand = expand;}\n", "substitutes": {"dedup": ["recursive", "expand", "test", "strict", "accept", "search"], "expand": ["ignore", "recursive", "expand", "test", "strict", "accept", "canonical", "reverse", "implicit", "inverted", "search", "true", "false"], "analyzer": ["ignore", "recursive", "test", "analysis", "strict", "a", "reverse", "inverted", "true", "implicit", "analyze", "expand", "merge", "canonical", "search", "analy", "accept", "zer", "false"]}}
{"code": "public RequestSpotInstancesResult requestSpotInstances(RequestSpotInstancesRequest request) {request = beforeClientExecution(request);return executeRequestSpotInstances(request);}\n", "substitutes": {"requestSpotInstances": ["execute", "list", "request", "call", "send"], "request": ["input", "argument", "execute", "list", "resource", "request", "call", "req", "query", "send"]}}
{"code": "public byte[] getObjectData() {return findObjectRecord().getObjectData();}\n", "substitutes": {"getObjectData": ["data", "get", "array", "bytes", "clone", "value"]}}
{"code": "public GetContactAttributesResult getContactAttributes(GetContactAttributesRequest request) {request = beforeClientExecution(request);return executeGetContactAttributes(request);}\n", "substitutes": {"getContactAttributes": ["get", "execute", "list", "call", "send"], "request": ["input", "get", "parent", "response", "execute", "list", "call", "request", "req", "query", "send"]}}
{"code": "public String toString() {return getKey() + \": \" + getValue(); }\n", "substitutes": {"toString": ["String", "key", "get", "value"]}}
{"code": "public ListTextTranslationJobsResult listTextTranslationJobs(ListTextTranslationJobsRequest request) {request = beforeClientExecution(request);return executeListTextTranslationJobs(request);}\n", "substitutes": {"listTextTranslationJobs": ["index", "execute", "list", "run", "call"], "request": ["input", "parent", "op", "index", "execute", "list", "run", "call", "request", "req", "query", "instruction", "p"]}}
{"code": "public GetContactMethodsResult getContactMethods(GetContactMethodsRequest request) {request = beforeClientExecution(request);return executeGetContactMethods(request);}\n", "substitutes": {"getContactMethods": ["get", "execute", "list", "call", "send"], "request": ["input", "get", "execute", "list", "call", "request", "req", "instruction", "query", "send", "p"]}}
{"code": "public static short lookupIndexByName(String name) {FunctionMetadata fd = getInstance().getFunctionByNameInternal(name);if (fd == null) {fd = getInstanceCetab().getFunctionByNameInternal(name);if (fd == null) {return -1;}}return (short) fd.getIndex();}\n", "substitutes": {"lookupIndexByName": ["get", "index", "name", "lookup", "find"], "name": ["get", "f", "index", "n", "key", "name", "lookup", "find", "fn", "nm", "func"], "fd": ["get", "meta", "f", "index", "df", "n", "key", "name", "lookup", "function", "cf", "find", "fn", "def", "nm", "sd", "d", "func"]}}
{"code": "public DescribeAnomalyDetectorsResult describeAnomalyDetectors(DescribeAnomalyDetectorsRequest request) {request = beforeClientExecution(request);return executeDescribeAnomalyDetectors(request);}\n", "substitutes": {"describeAnomalyDetectors": ["list", "execute", "call", "describe", "summary"], "request": ["input", "parent", "argument", "response", "list", "execute", "call", "request", "req", "instruction", "query", "describe", "summary"]}}
{"code": "public static String insertId(String message, ObjectId changeId) {return insertId(message, changeId, false);}\n", "substitutes": {"insertId": ["replace", "warning", "message", "change", "msg", "format"], "message": ["replace", "warning", "id", "sql", "name", "message", "table", "query", "change", "msg", "format"], "changeId": ["obj", "replace", "warning", "id", "sql", "object", "key", "name", "o", "message", "table", "query", "change", "msg", "format"]}}
{"code": "public long getObjectSize(AnyObjectId objectId, int typeHint)throws MissingObjectException, IncorrectObjectTypeException,IOException {long sz = db.getObjectSize(this, objectId);if (sz < 0) {if (typeHint == OBJ_ANY)throw new MissingObjectException(objectId.copy(),JGitText.get().unknownObjectType2);throw new MissingObjectException(objectId.copy(), typeHint);}return sz;}\n", "substitutes": {"getObjectSize": ["length", "add", "count", "store", "insert", "size", "put"], "objectId": ["obj", "length", "id", "o", "add", "key", "this", "ref", "count", "store", "insert", "null", "size", "put"], "typeHint": ["kind", "ref", "type", "put", "obj", "id", "o", "key", "this", "0", "null", "mode", "blob", "add", "length", "count", "store", "insert", "size"], "sz": ["kind", "n", "ref", "type", "put", "obj", "id", "s", "o", "key", "this", "0", "null", "mode", "result", "res", "blob", "add", "ret", "length", "count", "store", "insert", "size"]}}
{"code": "public ImportInstallationMediaResult importInstallationMedia(ImportInstallationMediaRequest request) {request = beforeClientExecution(request);return executeImportInstallationMedia(request);}\n", "substitutes": {"importInstallationMedia": ["run", "create", "execute", "call"], "request": ["input", "create", "parent", "execute", "run", "request", "call", "req", "query", "argument"]}}
{"code": "public PutLifecycleEventHookExecutionStatusResult putLifecycleEventHookExecutionStatus(PutLifecycleEventHookExecutionStatusRequest request) {request = beforeClientExecution(request);return executePutLifecycleEventHookExecutionStatus(request);}\n", "substitutes": {"putLifecycleEventHookExecutionStatus": ["execute", "status", "call", "describe", "put"], "request": ["input", "op", "argument", "response", "execute", "status", "call", "request", "req", "query", "describe", "put"]}}
{"code": "public NumberPtg(LittleEndianInput in)  {this(in.readDouble());}\n", "substitutes": {"in": ["input", "ins", "in", "bis", "is", "stream"]}}
{"code": "public GetFieldLevelEncryptionConfigResult getFieldLevelEncryptionConfig(GetFieldLevelEncryptionConfigRequest request) {request = beforeClientExecution(request);return executeGetFieldLevelEncryptionConfig(request);}\n", "substitutes": {"getFieldLevelEncryptionConfig": ["result", "get", "execute", "call", "run"], "request": ["result", "input", "get", "op", "execute", "call", "run", "request", "req", "query", "instruction", "p"]}}
{"code": "public DescribeDetectorResult describeDetector(DescribeDetectorRequest request) {request = beforeClientExecution(request);return executeDescribeDetector(request);}\n", "substitutes": {"describeDetector": ["begin", "get", "execute", "detect", "describe"], "request": ["input", "begin", "get", "parent", "argument", "execute", "detect", "request", "req", "call", "query", "describe"]}}
{"code": "public ReportInstanceStatusResult reportInstanceStatus(ReportInstanceStatusRequest request) {request = beforeClientExecution(request);return executeReportInstanceStatus(request);}\n", "substitutes": {"reportInstanceStatus": ["get", "execute", "status", "run", "report"], "request": ["input", "get", "parent", "response", "execute", "status", "run", "request", "call", "req", "query", "argument", "report"]}}
{"code": "public DeleteAlarmResult deleteAlarm(DeleteAlarmRequest request) {request = beforeClientExecution(request);return executeDeleteAlarm(request);}\n", "substitutes": {"deleteAlarm": ["update", "execute", "run", "delete", "send"], "request": ["input", "update", "argument", "execute", "run", "request", "call", "req", "delete", "query", "send", "parameters", "p"]}}
{"code": "public TokenStream create(TokenStream input) {return new PortugueseStemFilter(input);}\n", "substitutes": {"create": ["convert", "create", "wrap", "apply", "filter"], "input": ["convert", "create", "wrap", "apply", "token", "input", "s", "filter", "tokens", "stream"]}}
{"code": "public FtCblsSubRecord() {reserved = new byte[ENCODED_SIZE];}\n", "substitutes": {"reserved": ["data", "bytes", "b", "buffer", "encoding"]}}
{"code": "@Override public boolean remove(Object object) {synchronized (mutex) {return c.remove(object);}}\n", "substitutes": {"remove": ["offer", "add", "accept", "contains", "remove"], "object": ["obj", "offer", "object", "o", "add", "key", "e", "accept", "i", "contains", "remove"]}}
{"code": "public GetDedicatedIpResult getDedicatedIp(GetDedicatedIpRequest request) {request = beforeClientExecution(request);return executeGetDedicatedIp(request);}\n", "substitutes": {"getDedicatedIp": ["get", "execute", "list", "first", "call"], "request": ["input", "get", "parent", "execute", "list", "first", "call", "request", "req", "instruction", "query", "p"]}}
{"code": "public String toString() {return precedence + \" >= _p\";}\n", "substitutes": {"toString": ["name", "prefix", "precedence", "get"]}}
{"code": "public ListStreamProcessorsResult listStreamProcessors(ListStreamProcessorsRequest request) {request = beforeClientExecution(request);return executeListStreamProcessors(request);}\n", "substitutes": {"listStreamProcessors": ["get", "execute", "list", "List", "lists"], "request": ["input", "get", "parent", "response", "execute", "list", "List", "lists", "resource", "request", "call", "req", "query", "argument"]}}
{"code": "public DeleteLoadBalancerPolicyRequest(String loadBalancerName, String policyName) {setLoadBalancerName(loadBalancerName);setPolicyName(policyName);}\n", "substitutes": {"loadBalancerName": ["alias", "Name", "id", "account", "name", "namespace"], "policyName": ["pid", "policy", "alias", "Name", "id", "account", "name", "prefix", "key", "namespace"]}}
{"code": "public WindowProtectRecord(int options) {_options = options;}\n", "substitutes": {"options": ["record", "0", "1", "flags", "option", "options", "i"], "_options": ["record", "0", "1", "level", "flags", "option", "options", "i"]}}
{"code": "public UnbufferedCharStream(int bufferSize) {n = 0;data = new int[bufferSize];}\n", "substitutes": {"bufferSize": ["length", "n", "capacity", "0", "count", "flags", "size", "len"], "n": ["length", "index", "off", "n", "capacity", "0", "count", "position", "flags", "offset", "size", "len", "pos"], "data": ["length", "index", "bytes", "off", "n", "capacity", "0", "count", "position", "buf", "chars", "flags", "offset", "size", "len", "pos", "buffer", "buffers"]}}
{"code": "public GetOperationsResult getOperations(GetOperationsRequest request) {request = beforeClientExecution(request);return executeGetOperations(request);}\n", "substitutes": {"getOperations": ["get", "operations", "execute", "list", "call"], "request": ["input", "get", "operations", "parent", "execute", "list", "call", "request", "req", "query", "p"]}}
{"code": "public void copyRawTo(byte[] b, int o) {NB.encodeInt32(b, o, w1);NB.encodeInt32(b, o + 4, w2);NB.encodeInt32(b, o + 8, w3);NB.encodeInt32(b, o + 12, w4);NB.encodeInt32(b, o + 16, w5);}\n", "substitutes": {"copyRawTo": ["wrap", "append", "encode", "compress", "write"], "b": ["wrap", "data", "s", "w", "append", "src", "encode", "buf", "compress", "b", "buffer", "write"], "o": ["wrap", "data", "n", "append", "r", "buffer", "write", "s", "0", "offset", "w", "src", "encode", "b", "i", "width", "buf", "compress", "pos"]}}
{"code": "public WindowOneRecord(RecordInputStream in) {field_1_h_hold            = in.readShort();field_2_v_hold            = in.readShort();field_3_width             = in.readShort();field_4_height            = in.readShort();field_5_options           = in.readShort();field_6_active_sheet      = in.readShort();field_7_first_visible_tab = in.readShort();field_8_num_selected_tabs = in.readShort();field_9_tab_width_ratio   = in.readShort();}\n", "substitutes": {"in": ["input", "ins", "in", "is", "reader", "out", "stream"], "field_1_h_hold": ["input", "width", "ins", "in", "id", "height", "record", "size", "is", "reader", "out", "stream"], "field_2_v_hold": ["input", "width", "ins", "in", "id", "height", "record", "window", "size", "is", "rows", "reader", "out", "stream"], "field_3_width": ["input", "width", "ins", "in", "id", "height", "record", "row", "window", "size", "is", "rows", "reader", "out", "stream"], "field_4_height": ["input", "width", "ins", "in", "id", "height", "record", "row", "options", "window", "size", "is", "rows", "reader", "out", "stream"], "field_5_options": ["input", "width", "ins", "in", "id", "height", "record", "row", "options", "window", "size", "offset", "is", "rows", "reader", "out", "stream", "sheet"], "field_6_active_sheet": ["ins", "rows", "out", "sheet", "input", "id", "record", "offset", "stream", "window", "flags", "is", "reader", "width", "in", "height", "row", "size", "options"], "field_7_first_visible_tab": ["ins", "rows", "out", "sheet", "input", "id", "record", "offset", "stream", "index", "window", "flags", "is", "reader", "width", "in", "height", "row", "size", "options"], "field_8_num_selected_tabs": ["ins", "rows", "out", "sheet", "input", "id", "record", "offset", "stream", "index", "window", "flags", "is", "reader", "width", "in", "height", "row", "size", "options"], "field_9_tab_width_ratio": ["ins", "rows", "out", "sheet", "input", "id", "record", "offset", "stream", "index", "window", "flags", "is", "reader", "width", "in", "height", "row", "tab", "size", "options"]}}
{"code": "public StopWorkspacesResult stopWorkspaces(StopWorkspacesRequest request) {request = beforeClientExecution(request);return executeStopWorkspaces(request);}\n", "substitutes": {"stopWorkspaces": ["execute", "run", "delete", "pause", "stop"], "request": ["input", "parent", "response", "execute", "run", "request", "call", "req", "delete", "query", "pause", "argument", "stop"]}}
{"code": "public void close() throws IOException {if (isOpen) {isOpen = false;try {dump();} finally {try {channel.truncate(fileLength);} finally {try {channel.close();} finally {fos.close();}}}}}\n", "substitutes": {"close": ["shutdown", "disconnect", "destroy", "cleanup", "delete", "flush", "close", "abort", "clear"]}}
{"code": "public DescribeMatchmakingRuleSetsResult describeMatchmakingRuleSets(DescribeMatchmakingRuleSetsRequest request) {request = beforeClientExecution(request);return executeDescribeMatchmakingRuleSets(request);}\n", "substitutes": {"describeMatchmakingRuleSets": ["execute", "list", "call", "describe", "summary"], "request": ["input", "op", "argument", "execute", "list", "call", "request", "req", "query", "describe", "summary"]}}
{"code": "public String getPronunciation(int wordId, char surface[], int off, int len) {return null; }\n", "substitutes": {"getPronunciation": ["get", "word", "encode", "string", "render"], "wordId": ["get", "text", "lang", "word", "seq", "encode", "pos", "string", "render"], "surface": ["get", "s", "text", "ch", "lang", "c", "word", "seq", "p", "encode", "pos", "b", "string", "render"], "off": ["get", "s", "off", "text", "ch", "lang", "c", "word", "seq", "start", "p", "encode", "offset", "pos", "b", "string", "render", "i"], "len": ["on", "start", "seq", "s", "lang", "offset", "len", "render", "off", "text", "word", "encode", "b", "string", "i", "length", "get", "ch", "c", "pos", "p"]}}
{"code": "public String getPath() {return pathStr;}\n", "substitutes": {"getPath": ["path", "str", "string", "get"]}}
{"code": "public static double devsq(double[] v) {double r = Double.NaN;if (v!=null && v.length >= 1) {double m = 0;double s = 0;int n = v.length;for (int i=0; i<n; i++) {s += v[i];}m = s / n;s = 0;for (int i=0; i<n; i++) {s += (v[i]- m) * (v[i] - m);}r = (n == 1)? 0: s;}return r;}\n", "substitutes": {"devsq": ["r", "mean", "norm", "sum", "median"], "v": ["x", "y", "r", "a", "mean", "b", "norm", "d", "sum", "arr", "median", "p"], "r": ["result", "s", "x", "n", "y", "det", "r", "a", "ret", "mean", "sd", "b", "norm", "d", "sum", "arr", "median", "p"], "m": ["n", "det", "r", "a", "sd", "sum", "s", "t", "1", "result", "x", "y", "ret", "mean", "b", "arr", "d", "median", "c", "norm", "p"], "s": ["n", "det", "r", "a", "sd", "sum", "s", "t", "1", "result", "m", "x", "y", "ret", "mean", "b", "arr", "d", "median", "c", "norm", "p"], "n": ["n", "det", "r", "a", "sd", "sum", "l", "s", "t", "1", "len", "result", "m", "x", "y", "ret", "mean", "b", "arr", "d", "median", "i", "length", "N", "c", "norm", "p"], "i": ["n", "det", "r", "a", "sd", "sum", "l", "s", "t", "1", "len", "result", "m", "x", "y", "ret", "mean", "b", "arr", "d", "median", "i", "j", "k", "length", "N", "c", "norm", "p"]}}
{"code": "public DescribeResizeResult describeResize(DescribeResizeRequest request) {request = beforeClientExecution(request);return executeDescribeResize(request);}\n", "substitutes": {"describeResize": ["create", "begin", "resize", "execute", "describe"], "request": ["input", "create", "begin", "parent", "resize", "argument", "execute", "resource", "request", "req", "call", "describe"]}}
{"code": "public final boolean hasPassedThroughNonGreedyDecision() {return passedThroughNonGreedyDecision;}\n", "substitutes": {"hasPassedThroughNonGreedyDecision": ["decide", "get", "judge", "decision", "decided"]}}
{"code": "public int end() {return end(0);}\n", "substitutes": {"end": ["next", "length", "get", "abs", "count", "-", "size"]}}
{"code": "public void traverse(CellHandler handler) {int firstRow = range.getFirstRow();int lastRow = range.getLastRow();int firstColumn = range.getFirstColumn();int lastColumn = range.getLastColumn();final int width = lastColumn - firstColumn + 1;SimpleCellWalkContext ctx = new SimpleCellWalkContext();Row currentRow = null;Cell currentCell = null;for (ctx.rowNumber = firstRow; ctx.rowNumber <= lastRow; ++ctx.rowNumber) {currentRow = sheet.getRow(ctx.rowNumber);if (currentRow == null) {continue;}for (ctx.colNumber = firstColumn; ctx.colNumber <= lastColumn; ++ctx.colNumber) {currentCell = currentRow.getCell(ctx.colNumber);if (currentCell == null) {continue;}if (isEmpty(currentCell) && !traverseEmptyCells) {continue;}long rowSize = ArithmeticUtils.mulAndCheck((long)ArithmeticUtils.subAndCheck(ctx.rowNumber, firstRow), (long)width);ctx.ordinalNumber = ArithmeticUtils.addAndCheck(rowSize, (ctx.colNumber - firstColumn + 1));handler.onCell(currentCell, ctx);}}}\n", "substitutes": {"traverse": ["process", "walk", "traverse", "handle", "draw"], "handler": ["process", "walk", "h", "f", "traverse", "handler", "handle", "callback", "fn", "draw"], "firstRow": ["process", "cell", "handler", "start", "sheet", "h", "2", "traverse", "handle", "0", "callback", "1", "walk", "index", "first", "fn", "width", "f", "row", "draw"], "lastRow": ["process", "cell", "handler", "start", "rows", "sheet", "h", "2", "traverse", "handle", "0", "callback", "1", "last", "walk", "index", "first", "fn", "width", "end", "f", "row", "draw"], "firstColumn": ["process", "column", "cell", "handler", "start", "rows", "sheet", "col", "h", "2", "traverse", "handle", "0", "callback", "1", "last", "offset", "walk", "index", "first", "fn", "i", "width", "end", "f", "row", "draw", "columns"], "lastColumn": ["process", "column", "cell", "handler", "start", "rows", "sheet", "col", "h", "2", "traverse", "handle", "0", "callback", "1", "last", "offset", "walk", "index", "first", "fn", "i", "width", "length", "end", "f", "row", "draw", "size", "columns"], "width": ["process", "column", "cell", "handler", "padding", "start", "rows", "stride", "sheet", "col", "step", "h", "2", "traverse", "handle", "0", "callback", "1", "last", "delta", "offset", "walk", "index", "first", "fn", "i", "width", "length", "end", "f", "row", "count", "draw", "size", "columns"], "ctx": ["process", "column", "cell", "handler", "padding", "current", "start", "rows", "stride", "sheet", "col", "context", "step", "h", "2", "traverse", "pc", "handle", "0", "callback", "1", "last", "delta", "offset", "range", "walk", "sc", "index", "first", "fn", "i", "width", "length", "end", "f", "row", "path", "c", "count", "cs", "draw", "size", "columns"], "currentRow": ["process", "column", "cell", "handler", "padding", "current", "r", "start", "rows", "stride", "sheet", "col", "context", "step", "h", "2", "traverse", "pc", "handle", "0", "callback", "1", "last", "tr", "table", "delta", "offset", "range", "walk", "sc", "index", "first", "fn", "i", "width", "length", "end", "f", "row", "path", "c", "count", "cs", "draw", "size", "columns"], "currentCell": ["process", "column", "cell", "handler", "padding", "current", "r", "start", "rows", "stride", "sheet", "col", "context", "step", "h", "2", "traverse", "pc", "handle", "0", "callback", "1", "last", "tr", "cells", "table", "delta", "offset", "range", "walk", "sc", "index", "first", "fn", "i", "width", "length", "end", "f", "row", "path", "c", "count", "cs", "draw", "size", "columns"], "rowNumber": ["process", "column", "cell", "handler", "padding", "current", "r", "start", "rows", "stride", "sheet", "col", "context", "step", "line", "h", "2", "traverse", "pc", "handle", "0", "callback", "1", "last", "tr", "cells", "table", "delta", "offset", "range", "walk", "sc", "index", "first", "fn", "i", "width", "length", "end", "f", "row", "path", "c", "count", "cs", "draw", "size", "columns"], "colNumber": ["process", "column", "cell", "handler", "padding", "current", "r", "start", "rows", "stride", "sheet", "col", "context", "step", "line", "h", "2", "traverse", "pc", "handle", "0", "callback", "1", "last", "tr", "cells", "table", "delta", "offset", "range", "walk", "sc", "index", "first", "fn", "i", "width", "length", "end", "f", "row", "path", "c", "count", "cs", "draw", "size", "columns"], "rowSize": ["process", "column", "cell", "handler", "padding", "current", "r", "start", "value", "rows", "stride", "sheet", "col", "context", "step", "line", "num", "h", "2", "traverse", "pc", "handle", "0", "callback", "1", "last", "tr", "cells", "table", "delta", "offset", "result", "number", "range", "walk", "sc", "index", "x", "first", "fn", "i", "width", "ord", "length", "end", "f", "row", "path", "c", "count", "cs", "draw", "size", "columns"], "ordinalNumber": ["process", "column", "cell", "handler", "padding", "current", "r", "start", "value", "rows", "stride", "sheet", "col", "context", "step", "line", "num", "h", "2", "traverse", "pc", "handle", "0", "callback", "1", "last", "tr", "cells", "table", "delta", "offset", "result", "number", "range", "walk", "sc", "index", "x", "first", "fn", "i", "width", "ord", "length", "end", "f", "row", "path", "c", "count", "cs", "draw", "size", "columns"]}}
{"code": "public int getReadIndex() {return pos;}\n", "substitutes": {"getReadIndex": ["length", "index", "position", "pos", "size"]}}
{"code": "public int compareTo(ScoreTerm other) {if (this.boost == other.boost) return other.bytes.get().compareTo(this.bytes.get());else return Float.compare(this.boost, other.boost);}\n", "substitutes": {"compareTo": ["get", "equals", "score", "add", "compare", "similarity", "distance"], "other": ["other", "get", "s", "equals", "score", "add", "o", "compare", "t", "similarity", "this", "a", "term", "b", "distance"]}}
{"code": "public int normalize(char s[], int len) {for (int i = 0; i < len; i++) {switch (s[i]) {case FARSI_YEH:case YEH_BARREE:s[i] = YEH;break;case KEHEH:s[i] = KAF;break;case HEH_YEH:case HEH_GOAL:s[i] = HEH;break;case HAMZA_ABOVE: len = delete(s, i, len);i--;break;default:break;}}return len;}\n", "substitutes": {"normalize": ["length", "count", "cut", "delete", "remove"], "s": ["result", "length", "s", "c", "count", "cut", "buf", "delete", "chars", "b", "arr", "out", "alphabet", "remove"], "len": ["n", "r", "delete", "out", "s", "0", "1", "len", "result", "index", "chars", "b", "arr", "remove", "i", "length", "alphabet", "N", "c", "count", "cut", "buf", "size", "p"], "i": ["n", "r", "delete", "out", "s", "0", "1", "offset", "len", "result", "index", "chars", "b", "arr", "remove", "i", "j", "k", "length", "alphabet", "N", "c", "count", "cut", "buf", "pos", "size", "p"]}}
{"code": "public void serialize(LittleEndianOutput out) {out.writeShort(_options);}\n", "substitutes": {"serialize": ["store", "encode", "flush", "print", "write"], "out": ["bos", "output", "o", "store", "encode", "out", "flush", "print", "write", "os"]}}
{"code": "public DiagnosticErrorListener(boolean exactOnly) {this.exactOnly = exactOnly;}\n", "substitutes": {"exactOnly": ["fatal", "ignore", "enabled", "error", "ignored", "b", "debug", "true", "false"]}}
{"code": "public KeySchemaElement(String attributeName, KeyType keyType) {setAttributeName(attributeName);setKeyType(keyType.toString());}\n", "substitutes": {"attributeName": ["Name", "key", "name", "prefix", "value", "property", "attribute"], "keyType": ["k", "Name", "key", "name", "prefix", "t", "value", "property", "type", "attribute"]}}
{"code": "public GetAssignmentResult getAssignment(GetAssignmentRequest request) {request = beforeClientExecution(request);return executeGetAssignment(request);}\n", "substitutes": {"getAssignment": ["get", "list", "execute", "call", "fetch"], "request": ["input", "get", "argument", "list", "execute", "resource", "call", "request", "req", "query", "fetch", "p"]}}
{"code": "public boolean hasObject(AnyObjectId id) {return findOffset(id) != -1;}\n", "substitutes": {"hasObject": ["exists", "find", "offset", "has", "contains"], "id": ["id", "object", "o", "key", "exists", "find", "offset", "has", "contains", "i"]}}
{"code": "public GroupingSearch setAllGroups(boolean allGroups) {this.allGroups = allGroups;return this;}\n", "substitutes": {"setAllGroups": ["all", "groups", "group", "Group", "All"], "allGroups": ["v", "all", "groups", "group", "Group", "value", "grouped", "All", "b", "arr", "teams"]}}
{"code": "public synchronized void setMultiValued(String dimName, boolean v) {DimConfig ft = fieldTypes.get(dimName);if (ft == null) {ft = new DimConfig();fieldTypes.put(dimName, ft);}ft.multiValued = v;}\n", "substitutes": {"setMultiValued": ["add", "field", "init", "set", "put"], "dimName": ["k", "s", "add", "name", "key", "field", "init", "type", "set", "put"], "v": ["k", "enabled", "s", "v", "add", "name", "key", "value", "field", "init", "val", "b", "type", "set", "true", "put"], "ft": ["config", "value", "type", "true", "put", "s", "key", "name", "this", "t", "cf", "conf", "set", "enabled", "add", "field", "b", "d", "k", "v", "c", "def", "init", "val"], "multiValued": ["config", "value", "type", "true", "put", "s", "key", "name", "this", "t", "cf", "conf", "set", "enabled", "add", "field", "b", "d", "k", "v", "multi", "c", "def", "init", "val", "multiple"]}}
{"code": "public int getCellsVal() {Iterator<Character> i = cells.keySet().iterator();int size = 0;for (; i.hasNext();) {Character c = i.next();Cell e = at(c);if (e.cmd >= 0) {size++;}}return size;}\n", "substitutes": {"getCellsVal": ["length", "sizeof", "count", "sizes", "size"], "i": ["iter", "k", "length", "sizeof", "c", "count", "iterator", "sizes", "it", "size", "i"], "size": ["iter", "k", "length", "result", "res", "sizeof", "v", "c", "ret", "count", "iterator", "sizes", "it", "val", "size", "i"], "c": ["character", "iter", "char", "key", "result", "res", "sizeof", "ret", "iterator", "it", "i", "k", "length", "v", "ch", "c", "count", "sizes", "val", "size"], "e": ["cell", "character", "iter", "char", "key", "cells", "t", "result", "res", "sizeof", "x", "ret", "iterator", "it", "i", "k", "length", "v", "ch", "c", "count", "sizes", "val", "size", "el"]}}
{"code": "public DeleteVoiceConnectorResult deleteVoiceConnector(DeleteVoiceConnectorRequest request) {request = beforeClientExecution(request);return executeDeleteVoiceConnector(request);}\n", "substitutes": {"deleteVoiceConnector": ["execute", "call", "request", "delete", "send"], "request": ["input", "parent", "execute", "call", "request", "req", "delete", "query", "send", "p"]}}
{"code": "public DeleteLifecyclePolicyResult deleteLifecyclePolicy(DeleteLifecyclePolicyRequest request) {request = beforeClientExecution(request);return executeDeleteLifecyclePolicy(request);}\n", "substitutes": {"deleteLifecyclePolicy": ["update", "execute", "perform", "run", "delete"], "request": ["input", "update", "parent", "execute", "perform", "run", "request", "req", "call", "delete", "query", "instruction", "argument", "p"]}}
{"code": "public void write(byte[] b) {int len = b.length;checkPosition(len);System.arraycopy(b, 0, _buf, _writeIndex, len);_writeIndex += len;}\n", "substitutes": {"write": ["add", "append", "set", "write", "put"], "b": ["data", "bytes", "add", "append", "buf", "b", "buffer", "set", "write", "put"], "len": ["len", "data", "length", "bytes", "n", "add", "append", "position", "buf", "pos", "b", "size", "buffer", "set", "write", "put", "l"], "_writeIndex": ["data", "n", "append", "start", "position", "buffer", "write", "put", "l", "offset", "len", "set", "off", "add", "b", "length", "bytes", "buf", "pos", "size"]}}
{"code": "public RebaseResult getRebaseResult() {return this.rebaseResult;}\n", "substitutes": {"getRebaseResult": ["result", "get", "copy", "clone", "current"]}}
{"code": "public static int getNearestSetSize(int maxNumberOfValuesExpected,float desiredSaturation) {for (int i = 0; i < usableBitSetSizes.length; i++) {int numSetBitsAtDesiredSaturation = (int) (usableBitSetSizes[i] * desiredSaturation);int estimatedNumUniqueValues = getEstimatedNumberUniqueValuesAllowingForCollisions(usableBitSetSizes[i], numSetBitsAtDesiredSaturation);if (estimatedNumUniqueValues > maxNumberOfValuesExpected) {return usableBitSetSizes[i];}}return -1;}\n", "substitutes": {"getNearestSetSize": ["get", "choose", "pick", "estimate", "find"], "maxNumberOfValuesExpected": ["get", "choose", "pick", "tolerance", "estimate", "cutoff", "saturation", "0", "threshold", "find", "size", "ratio"], "desiredSaturation": ["get", "choose", "pick", "tolerance", "estimate", "cutoff", "saturation", "0", "alpha", "threshold", "find", "scale", "beta", "size", "stride", "factor", "ratio"], "i": ["pick", "choose", "tolerance", "n", "estimate", "cutoff", "threshold", "stride", "0", "saturation", "alpha", "offset", "index", "ratio", "i", "j", "k", "get", "ii", "find", "scale", "beta", "size", "factor"], "numSetBitsAtDesiredSaturation": ["pick", "choose", "tolerance", "n", "estimate", "cutoff", "value", "threshold", "stride", "s", "0", "saturation", "alpha", "offset", "index", "ratio", "i", "j", "k", "get", "ii", "find", "scale", "beta", "size", "factor"], "estimatedNumUniqueValues": ["pick", "choose", "tolerance", "n", "estimate", "cutoff", "value", "threshold", "stride", "num", "s", "0", "saturation", "alpha", "offset", "index", "max", "ratio", "i", "j", "k", "get", "expected", "ii", "find", "scale", "count", "beta", "size", "factor"]}}
{"code": "public DescribeDashboardResult describeDashboard(DescribeDashboardRequest request) {request = beforeClientExecution(request);return executeDescribeDashboard(request);}\n", "substitutes": {"describeDashboard": ["execute", "call", "request", "describe", "summary"], "request": ["input", "parent", "argument", "execute", "call", "request", "req", "query", "describe", "summary"]}}
{"code": "public CreateSegmentResult createSegment(CreateSegmentRequest request) {request = beforeClientExecution(request);return executeCreateSegment(request);}\n", "substitutes": {"createSegment": ["create", "execute", "call", "send", "put"], "request": ["input", "create", "parent", "argument", "execute", "resource", "call", "request", "req", "send", "parameters", "p", "put"]}}
{"code": "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[DBCELL]\\n\");buffer.append(\"    .rowoffset = \").append(HexDump.intToHex(field_1_row_offset)).append(\"\\n\");for (int k = 0; k < field_2_cell_offsets.length; k++) {buffer.append(\"    .cell_\").append(k).append(\" = \").append(HexDump.shortToHex(field_2_cell_offsets[ k ])).append(\"\\n\");}buffer.append(\"[/DBCELL]\\n\");return buffer.toString();}\n", "substitutes": {"toString": ["length", "build", "output", "dump", "reverse", "print", "String", "string", "trim"], "buffer": ["result", "length", "build", "s", "output", "dump", "builder", "reverse", "buf", "buffer", "b", "print", "String", "string", "trim"], "k": ["reverse", "buffer", "String", "build", "s", "output", "offset", "trim", "result", "index", "builder", "b", "string", "j", "i", "k", "length", "c", "dump", "buf", "print"]}}
{"code": "public List<String> getUndeletedList() {return undeletedList;}\n", "substitutes": {"getUndeletedList": ["list", "delete", "elements", "clear", "remove"]}}
{"code": "public String toString() {return \"[INTERFACEEND/]\\n\";}\n", "substitutes": {"toString": ["description", "String", "end", "version"]}}
{"code": "public MergeScheduler clone() {return this;}\n", "substitutes": {"clone": ["copy", "clone", "merge", "this", "Copy"]}}
{"code": "public PlainTextDictionary(Reader reader) {in = new BufferedReader(reader);}\n", "substitutes": {"reader": ["input", "in", "r", "reader", "out"], "in": ["input", "in", "r", "reader", "out", "stream"]}}
{"code": "public StringBuilder append(CharSequence csq) {if (csq == null) {appendNull();} else {append0(csq, 0, csq.length());}return this;}\n", "substitutes": {"append": ["string", "escape", "append", "null"], "csq": ["s", "text", "escape", "append", "c", "value", "str", "null", "string"]}}
{"code": "public ListAssociatedStacksResult listAssociatedStacks(ListAssociatedStacksRequest request) {request = beforeClientExecution(request);return executeListAssociatedStacks(request);}\n", "substitutes": {"listAssociatedStacks": ["get", "execute", "list", "lists", "call"], "request": ["input", "get", "parent", "execute", "list", "lists", "call", "request", "req", "instruction", "query", "p"]}}
{"code": "public static double avedev(double[] v) {double r = 0;double m = 0;double s = 0;for (int i=0, iSize=v.length; i<iSize; i++) {s += v[i];}m = s / v.length;s = 0;for (int i=0, iSize=v.length; i<iSize; i++) {s += Math.abs(v[i]-m);}r = s / v.length;return r;}\n", "substitutes": {"avedev": ["diff", "r", "abs", "norm", "sum"], "v": ["diff", "data", "m", "x", "s", "r", "a", "abs", "norm", "d", "sum", "arr", "p"], "r": ["diff", "data", "m", "x", "s", "n", "c", "r", "a", "abs", "norm", "d", "sum", "arr", "p", "i"], "m": ["diff", "data", "m", "x", "s", "n", "c", "r", "a", "t", "abs", "b", "norm", "d", "sum", "arr", "p", "i"], "s": ["diff", "data", "m", "x", "s", "n", "c", "r", "a", "t", "abs", "b", "norm", "d", "sum", "arr", "p", "i"], "i": ["data", "n", "r", "a", "sum", "diff", "s", "t", "m", "x", "index", "abs", "b", "arr", "d", "j", "i", "k", "c", "ii", "norm", "p"], "iSize": ["data", "n", "r", "a", "sum", "l", "diff", "s", "t", "len", "m", "x", "index", "abs", "b", "arr", "d", "j", "i", "k", "N", "c", "ii", "norm", "p"]}}
{"code": "public DescribeByoipCidrsResult describeByoipCidrs(DescribeByoipCidrsRequest request) {request = beforeClientExecution(request);return executeDescribeByoipCidrs(request);}\n", "substitutes": {"describeByoipCidrs": ["list", "execute", "call", "request", "describe"], "request": ["input", "parent", "op", "argument", "list", "execute", "Request", "call", "request", "req", "instruction", "query", "describe", "p"]}}
{"code": "public GetDiskResult getDisk(GetDiskRequest request) {request = beforeClientExecution(request);return executeGetDisk(request);}\n", "substitutes": {"getDisk": ["get", "execute", "list", "call", "disk"], "request": ["input", "get", "parent", "execute", "list", "call", "request", "req", "instruction", "query", "argument", "disk"]}}
{"code": "public DBClusterParameterGroup createDBClusterParameterGroup(CreateDBClusterParameterGroupRequest request) {request = beforeClientExecution(request);return executeCreateDBClusterParameterGroup(request);}\n", "substitutes": {"createDBClusterParameterGroup": ["create", "execute", "Create", "call", "run"], "request": ["input", "create", "parent", "op", "execute", "Create", "call", "run", "request", "req", "instruction", "query", "p"]}}
{"code": "public static CharBuffer wrap(char[] array, int start, int charCount) {Arrays.checkOffsetAndCount(array.length, start, charCount);CharBuffer buf = new ReadWriteCharArrayBuffer(array);buf.position = start;buf.limit = start + charCount;return buf;}\n", "substitutes": {"wrap": ["wrap", "create", "allocate", "alloc", "buffer"], "array": ["wrap", "create", "input", "array", "allocate", "buf", "chars", "alloc", "buffer", "content"], "start": ["wrap", "create", "input", "array", "off", "limit", "start", "allocate", "position", "buf", "chars", "pos", "offset", "alloc", "buffer", "content"], "charCount": ["wrap", "create", "n", "start", "position", "alloc", "buffer", "content", "input", "array", "allocate", "offset", "len", "off", "chars", "limit", "length", "count", "buf", "pos"], "buf": ["wrap", "create", "n", "r", "start", "position", "alloc", "buffer", "content", "input", "array", "allocate", "offset", "len", "result", "off", "ret", "buff", "chars", "limit", "b", "length", "count", "buf", "pos"], "position": ["wrap", "create", "n", "r", "start", "position", "alloc", "buffer", "content", "input", "array", "allocate", "offset", "len", "result", "off", "ret", "buff", "chars", "limit", "b", "length", "count", "buf", "pos"], "limit": ["wrap", "create", "n", "r", "start", "position", "alloc", "buffer", "content", "input", "array", "allocate", "offset", "len", "result", "off", "ret", "buff", "chars", "limit", "b", "length", "end", "count", "buf", "pos", "size"]}}
{"code": "public SubmoduleStatusType getType() {return type;}\n", "substitutes": {"getType": ["instance", "type", "get", "current"]}}
{"code": "public DescribeGameServerGroupResult describeGameServerGroup(DescribeGameServerGroupRequest request) {request = beforeClientExecution(request);return executeDescribeGameServerGroup(request);}\n", "substitutes": {"describeGameServerGroup": ["execute", "call", "request", "send", "describe"], "request": ["input", "parent", "argument", "execute", "call", "request", "req", "query", "send", "p", "describe"]}}
{"code": "public Pattern pattern() {return pattern;}\n", "substitutes": {"pattern": ["get", "this", "current", "null", "pattern", "Pattern", "p"]}}
{"code": "public V setValue(V object) {throw new UnsupportedOperationException();}\n", "substitutes": {"setValue": ["apply", "call", "invoke", "set", "remove"], "object": ["apply", "x", "v", "o", "value", "call", "invoke", "val", "set", "remove"]}}
{"code": "public StringBuilder stem(CharSequence word) {CharSequence cmd = stemmer.getLastOnPath(word);if (cmd == null)return null;buffer.setLength(0);buffer.append(word);Diff.apply(buffer, cmd);if (buffer.length() > 0)return buffer;else return null;}\n", "substitutes": {"stem": ["diff", "apply", "add", "append", "Diff"], "word": ["diff", "input", "apply", "s", "path", "add", "text", "prefix", "append", "name", "src", "Diff", "root"], "cmd": ["diff", "input", "result", "apply", "s", "path", "add", "text", "prefix", "append", "name", "last", "first", "src", "previous", "Diff", "root", "prev"]}}
{"code": "public RenameFaceRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"RenameFace\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n", "substitutes": {}}
{"code": "public char requireChar(Map<String,String> args, String name) {return require(args, name).charAt(0);}\n", "substitutes": {"requireChar": ["get", "value", "at", "find", "require"], "name": ["method", "get", "command", "path", "key", "name", "value", "at", "find", "require"]}}
{"code": "public static String toStringTree(Tree t) {return toStringTree(t, (List<String>)null);}\n", "substitutes": {"toStringTree": ["join", "list", "str", "help", "string", "format"], "t": ["join", "Tree", "list", "tree", "t", "str", "root", "help", "string", "node", "format"]}}
{"code": "public String toString() {return \"<deleted/>\";}\n", "substitutes": {"toString": ["description", "destroy", "delete", "html", "deleted"]}}
{"code": "public GetRepoWebhookLogListRequest() {super(\"cr\", \"2016-06-07\", \"GetRepoWebhookLogList\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]/logs\");setMethod(MethodType.GET);}\n", "substitutes": {}}
{"code": "public GetJobUnlockCodeResult getJobUnlockCode(GetJobUnlockCodeRequest request) {request = beforeClientExecution(request);return executeGetJobUnlockCode(request);}\n", "substitutes": {"getJobUnlockCode": ["result", "get", "execute", "call", "run"], "request": ["result", "input", "get", "parent", "op", "execute", "call", "run", "request", "req", "query", "instruction", "p"]}}
{"code": "public RemoveTagsRequest(String resourceId) {setResourceId(resourceId);}\n", "substitutes": {"resourceId": ["id", "identifier", "name", "resource", "value"]}}
{"code": "public short getGB2312Id(char ch) {try {byte[] buffer = Character.toString(ch).getBytes(\"GB2312\");if (buffer.length != 2) {return -1;}int b0 = (buffer[0] & 0x0FF) - 161; int b1 = (buffer[1] & 0x0FF) - 161; return (short) (b0 * 94 + b1);} catch (UnsupportedEncodingException e) {throw new RuntimeException(e);}}\n", "substitutes": {"getGB2312Id": ["convert", "ord", "get", "decode", "encode"], "ch": ["convert", "ord", "get", "char", "code", "id", "ch", "c", "decode", "encode", "character"], "buffer": ["convert", "ord", "data", "get", "char", "code", "id", "bytes", "ch", "c", "decode", "b", "bits", "encode", "buf", "character", "parts"], "b0": ["data", "code", "bits", "a", "character", "char", "id", "0", "decode", "convert", "index", "encode", "b", "parts", "i", "ord", "get", "bytes", "ch", "c", "buf"], "b1": ["data", "code", "bits", "a", "96", "character", "bc", "char", "bi", "id", "0", "decode", "convert", "index", "encode", "b", "parts", "i", "95", "ord", "get", "bytes", "ch", "c", "buf", "94"]}}
{"code": "public BatchRefUpdate addCommand(Collection<ReceiveCommand> cmd) {commands.addAll(cmd);return this;}\n", "substitutes": {"addCommand": ["command", "add", "Command", "cmd", "commands"], "cmd": ["command", "array", "add", "Command", "list", "c", "ele", "elements", "cmd", "commands"]}}
{"code": "public short checkExternSheet(int sheetNumber){return (short)getOrCreateLinkTable().checkExternSheet(sheetNumber);}\n", "substitutes": {"checkExternSheet": ["get", "cell", "row", "key", "value", "item", "remove", "seek"], "sheetNumber": ["get", "id", "index", "cell", "sheet", "row", "key", "n", "value", "i", "offset", "item", "remove", "seek"]}}
{"code": "@Override public boolean equals(Object object) {return c.equals(object);}\n", "substitutes": {"equals": ["apply", "visit", "test", "accept", "contains", "remove"], "object": ["obj", "apply", "visit", "v", "test", "o", "object", "c", "accept", "value", "b", "contains", "remove"]}}
{"code": "public BooleanQuery build(QueryNode queryNode) throws QueryNodeException {AnyQueryNode andNode = (AnyQueryNode) queryNode;BooleanQuery.Builder bQuery = new BooleanQuery.Builder();List<QueryNode> children = andNode.getChildren();if (children != null) {for (QueryNode child : children) {Object obj = child.getTag(QueryTreeBuilder.QUERY_TREE_BUILDER_TAGID);if (obj != null) {Query query = (Query) obj;try {bQuery.add(query, BooleanClause.Occur.SHOULD);} catch (TooManyClauses ex) {throw new QueryNodeException(new MessageImpl(QueryParserMessages.EMPTY_MESSAGE), ex);}}}}bQuery.setMinimumNumberShouldMatch(andNode.getMinimumMatchingElements());return bQuery.build();}\n", "substitutes": {"build": ["result", "create", "parse", "apply", "build", "get", "filter", "and", "query"], "queryNode": ["result", "create", "parse", "apply", "build", "get", "parent", "filter", "and", "q", "query", "root", "node"], "andNode": ["result", "create", "parse", "apply", "build", "get", "parent", "any", "n", "filter", "this", "and", "q", "query", "root", "node"], "bQuery": ["result", "create", "parse", "apply", "build", "get", "parent", "any", "n", "filter", "this", "builder", "and", "q", "query", "b", "root", "node"], "children": ["create", "n", "nodes", "build", "filter", "this", "root", "result", "parse", "apply", "any", "builder", "q", "b", "node", "siblings", "get", "parent", "children", "list", "and", "child", "query", "kids"], "child": ["create", "n", "nodes", "build", "filter", "this", "root", "result", "parse", "apply", "any", "builder", "q", "b", "node", "siblings", "get", "parent", "children", "list", "c", "and", "child", "query", "kids"], "obj": ["create", "n", "nodes", "build", "filter", "this", "root", "result", "parse", "apply", "any", "tag", "tags", "builder", "q", "b", "node", "siblings", "get", "parent", "children", "list", "c", "and", "child", "query", "kids"], "query": ["create", "n", "r", "nodes", "build", "filter", "this", "sq", "root", "result", "parse", "apply", "any", "tag", "tags", "builder", "q", "b", "node", "siblings", "get", "parent", "children", "list", "c", "and", "child", "query", "kids"]}}
{"code": "public DescribeStreamProcessorResult describeStreamProcessor(DescribeStreamProcessorRequest request) {request = beforeClientExecution(request);return executeDescribeStreamProcessor(request);}\n", "substitutes": {"describeStreamProcessor": ["execute", "call", "request", "run", "describe"], "request": ["input", "parent", "argument", "execute", "call", "request", "run", "req", "query", "instruction", "describe"]}}
{"code": "public DescribeDashboardPermissionsResult describeDashboardPermissions(DescribeDashboardPermissionsRequest request) {request = beforeClientExecution(request);return executeDescribeDashboardPermissions(request);}\n", "substitutes": {"describeDashboardPermissions": ["list", "execute", "call", "permissions", "describe"], "request": ["input", "parent", "argument", "list", "execute", "call", "permissions", "request", "req", "query", "describe"]}}
{"code": "public Ref peel(Ref ref) {try {return getRefDatabase().peel(ref);} catch (IOException e) {return ref;}}\n", "substitutes": {"peel": ["open", "create", "get", "add", "find", "resolve", "read"], "ref": ["open", "create", "get", "reference", "add", "Ref", "this", "r", "e", "ref", "find", "null", "resolve", "read"]}}
{"code": "public long ramBytesUsed() {return RamUsageEstimator.alignObjectSize(RamUsageEstimator.NUM_BYTES_OBJECT_HEADER+ 2 * Integer.BYTES     + RamUsageEstimator.NUM_BYTES_OBJECT_REF) + RamUsageEstimator.sizeOf(blocks);}\n", "substitutes": {"ramBytesUsed": ["length", "count", "alignment", "size", "align"]}}
{"code": "public GetDomainSuggestionsResult getDomainSuggestions(GetDomainSuggestionsRequest request) {request = beforeClientExecution(request);return executeGetDomainSuggestions(request);}\n", "substitutes": {"getDomainSuggestions": ["suggestions", "get", "list", "search", "recommendations"], "request": ["input", "suggestions", "get", "list", "resource", "request", "call", "req", "query", "argument", "search", "recommendations"]}}
{"code": "public DescribeStackEventsResult describeStackEvents(DescribeStackEventsRequest request) {request = beforeClientExecution(request);return executeDescribeStackEvents(request);}\n", "substitutes": {"describeStackEvents": ["execute", "call", "request", "send", "describe"], "request": ["input", "parent", "argument", "execute", "call", "request", "req", "query", "send", "describe"]}}
{"code": "public void setRule(int idx, ConditionalFormattingRule cfRule){setRule(idx, (HSSFConditionalFormattingRule)cfRule);}\n", "substitutes": {"setRule": ["add", "accept", "insert", "set", "put"], "idx": ["id", "index", "add", "name", "key", "accept", "i", "insert", "set", "put"], "cfRule": ["id", "index", "f", "s", "add", "name", "key", "accept", "c", "r", "child", "i", "insert", "set", "rule", "put"]}}
{"code": "public CreateResolverRuleResult createResolverRule(CreateResolverRuleRequest request) {request = beforeClientExecution(request);return executeCreateResolverRule(request);}\n", "substitutes": {"createResolverRule": ["create", "update", "execute", "call", "run"], "request": ["input", "create", "update", "parent", "execute", "resource", "call", "run", "request", "req", "query", "argument", "p"]}}
{"code": "public SeriesIndexRecord(RecordInputStream in) {field_1_index = in.readShort();}\n", "substitutes": {"in": ["ins", "in", "is", "out", "stream"], "field_1_index": ["ins", "in", "index", "series", "version", "size", "is", "type", "out", "stream"]}}
{"code": "public GetStylesRequest() {super(\"lubancloud\", \"2018-05-09\", \"GetStyles\", \"luban\");setMethod(MethodType.POST);}\n", "substitutes": {}}
{"code": "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_gridset_flag);}\n", "substitutes": {"serialize": ["store", "encode", "flush", "export", "write"], "out": ["bos", "output", "o", "store", "encode", "flush", "out", "export", "write", "os"]}}
{"code": "public boolean equals(Object obj) {if (this == obj) {return true;}if (obj == null) {return false;}if (getClass() != obj.getClass()) {return false;}Toffs other = (Toffs) obj;if (getStartOffset() != other.getStartOffset()) {return false;}if (getEndOffset() != other.getEndOffset()) {return false;}return true;}\n", "substitutes": {"equals": ["equals", "compare", "equal", "eq", "contains"], "obj": ["obj", "other", "equals", "object", "o", "compare", "this", "equal", "value", "target", "eq", "b", "contains"], "other": ["obj", "other", "f", "s", "equals", "object", "o", "compare", "this", "equal", "value", "t", "ts", "target", "eq", "b", "contains"]}}
{"code": "public CreateGatewayGroupResult createGatewayGroup(CreateGatewayGroupRequest request) {request = beforeClientExecution(request);return executeCreateGatewayGroup(request);}\n", "substitutes": {"createGatewayGroup": ["create", "begin", "execute", "call", "run"], "request": ["input", "create", "begin", "parent", "response", "execute", "resource", "call", "run", "request", "req", "query"]}}
{"code": "public CreateParticipantConnectionResult createParticipantConnection(CreateParticipantConnectionRequest request) {request = beforeClientExecution(request);return executeCreateParticipantConnection(request);}\n", "substitutes": {"createParticipantConnection": ["create", "begin", "execute", "call", "connect"], "request": ["input", "create", "begin", "parent", "execute", "resource", "call", "request", "req", "p", "query", "argument", "connect"]}}
{"code": "public static double irr(double[] income) {return irr(income, 0.1d);}\n", "substitutes": {"irr": ["entropy", "average", "pow", "max", "mean", "divide", "sum", "min"], "income": ["array", "entropy", "A", "average", "d", "a", "pow", "max", "mean", "arr", "divide", "sum", "min", "vec"]}}
{"code": "public RegisterWorkspaceDirectoryResult registerWorkspaceDirectory(RegisterWorkspaceDirectoryRequest request) {request = beforeClientExecution(request);return executeRegisterWorkspaceDirectory(request);}\n", "substitutes": {"registerWorkspaceDirectory": ["create", "execute", "call", "run", "register"], "request": ["input", "create", "parent", "response", "execute", "resource", "call", "run", "request", "req", "query", "register", "argument"]}}
{"code": "public RevertCommand include(AnyObjectId commit) {return include(commit.getName(), commit);}\n", "substitutes": {"include": ["convert", "revert", "create", "add", "revision", "commit"], "commit": ["convert", "revert", "create", "obj", "id", "object", "o", "add", "this", "revision", "commit", "null", "true", "i", "arg"]}}
{"code": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval inumberVE) {ValueEval veText1;try {veText1 = OperandResolver.getSingleValue(inumberVE, srcRowIndex, srcColumnIndex);} catch (EvaluationException e) {return e.getErrorEval();}String iNumber = OperandResolver.coerceValueToString(veText1);Matcher m = COMPLEX_NUMBER_PATTERN.matcher(iNumber);boolean result = m.matches();String imaginary = \"\";if (result) {String imaginaryGroup = m.group(5);boolean hasImaginaryPart = imaginaryGroup.equals(\"i\") || imaginaryGroup.equals(\"j\");if (imaginaryGroup.length() == 0) {return new StringEval(String.valueOf(0));}if (hasImaginaryPart) {String sign = \"\";String imaginarySign = m.group(GROUP3_IMAGINARY_SIGN);if (imaginarySign.length() != 0 && !(imaginarySign.equals(\"+\"))) {sign = imaginarySign;}String groupImaginaryNumber = m.group(GROUP4_IMAGINARY_INTEGER_OR_DOUBLE);if (groupImaginaryNumber.length() != 0) {imaginary = sign + groupImaginaryNumber;} else {imaginary = sign + \"1\";}}} else {return ErrorEval.NUM_ERROR;}return new StringEval(imaginary);}\n", "substitutes": {"evaluate": ["number", "eval", "num", "get", "evaluate"], "srcRowIndex": ["number", "eval", "num", "get", "column", "index", "row", "value", "evaluate", "expression", "i"], "srcColumnIndex": ["number", "eval", "num", "get", "column", "columns", "index", "row", "n", "value", "evaluate", "expression", "i"], "inumberVE": ["number", "eval", "num", "get", "column", "columns", "index", "result", "evaluation", "row", "n", "value", "evaluate", "val", "expression", "i", "expr"], "veText1": ["column", "n", "value", "eval", "num", "number", "result", "res", "index", "evaluation", "evaluate", "expression", "i", "get", "v", "row", "val", "columns", "expr"], "iNumber": ["column", "n", "value", "eval", "num", "number", "result", "res", "index", "evaluation", "text", "evaluate", "expression", "string", "i", "get", "v", "row", "val", "columns", "expr"], "m": ["column", "n", "mat", "value", "eval", "num", "pattern", "number", "result", "res", "m", "index", "evaluation", "text", "evaluate", "match", "matches", "expression", "string", "i", "get", "v", "row", "group", "val", "columns", "expr"], "result": ["column", "n", "mat", "value", "complete", "eval", "num", "digits", "pattern", "complex", "number", "result", "res", "m", "index", "evaluation", "text", "evaluate", "match", "matches", "expression", "string", "i", "get", "v", "row", "group", "val", "columns", "expr"], "imaginaryGroup": ["column", "n", "mat", "value", "imaginary", "digit", "complete", "eval", "num", "digits", "pattern", "complex", "number", "result", "res", "m", "index", "evaluation", "text", "part", "evaluate", "match", "matches", "expression", "string", "i", "get", "v", "row", "group", "symbol", "val", "columns", "expr"], "hasImaginaryPart": ["column", "odd", "n", "mat", "value", "ok", "imaginary", "digit", "complete", "eval", "num", "digits", "found", "pattern", "complex", "number", "result", "res", "m", "index", "evaluation", "text", "part", "evaluate", "even", "match", "matches", "expression", "string", "i", "get", "v", "row", "group", "symbol", "val", "columns", "expr"], "imaginarySign": ["column", "odd", "n", "mat", "value", "ok", "sign", "imaginary", "digit", "complete", "eval", "num", "s", "digits", "indicator", "\"\"", "found", "pattern", "complex", "number", "result", "res", "m", "index", "evaluation", "text", "part", "evaluate", "even", "match", "matches", "expression", "string", "i", "get", "v", "row", "group", "symbol", "val", "columns", "expr"], "sign": ["column", "odd", "n", "mat", "value", "ok", "sign", "imaginary", "digit", "complete", "eval", "num", "s", "digits", "indicator", "\"\"", "found", "pattern", "complex", "number", "result", "res", "m", "index", "evaluation", "text", "real", "part", "evaluate", "even", "match", "matches", "expression", "string", "i", "get", "v", "row", "group", "symbol", "val", "columns", "expr"], "groupImaginaryNumber": ["column", "odd", "n", "mat", "value", "ok", "integer", "sign", "imaginary", "digit", "complete", "eval", "num", "s", "digits", "indicator", "\"\"", "found", "pattern", "complex", "number", "result", "res", "m", "index", "evaluation", "text", "real", "part", "evaluate", "even", "match", "matches", "expression", "string", "i", "get", "exponent", "v", "row", "group", "symbol", "val", "columns", "expr"], "imaginary": ["column", "odd", "n", "mat", "value", "ok", "integer", "sign", "imaginary", "digit", "complete", "eval", "num", "unit", "s", "digits", "indicator", "\"\"", "found", "pattern", "complex", "number", "result", "res", "m", "index", "evaluation", "text", "real", "part", "evaluate", "even", "match", "str", "matches", "expression", "string", "i", "get", "exponent", "v", "row", "group", "symbol", "val", "columns", "expr"]}}
{"code": "public E pollLast() {Map.Entry<E, Object> entry = backingMap.pollLastEntry();return (entry == null) ? null : entry.getKey();}\n", "substitutes": {"pollLast": ["get", "peek", "key", "pop", "remove"], "entry": ["entry", "entries", "get", "peek", "key", "e", "last", "r", "pop", "remove", "l"]}}
{"code": "public int readUShort(){int ch1 = readUByte();int ch2 = readUByte();return (ch2 << 8) + (ch1 << 0);}\n", "substitutes": {"readUShort": ["next", "skip", "peek", "current", "read"], "ch1": ["next", "skip", "peek", "bit", "n", "ch", "current", "c", "b", "d", "read"], "ch2": ["next", "skip", "char", "peek", "bit", "n", "ch", "current", "c", "0", "b", "d", "read"]}}
{"code": "public ModifySnapshotAttributeRequest(String snapshotId, SnapshotAttributeName attribute, OperationType operationType) {setSnapshotId(snapshotId);setAttribute(attribute.toString());setOperationType(operationType.toString());}\n", "substitutes": {"snapshotId": ["id", "identifier", "name", "ID", "snapshot", "Id"], "attribute": ["id", "identifier", "Attribute", "name", "key", "ID", "attributes", "value", "snapshot", "Id", "attribute"], "operationType": ["op", "id", "identifier", "Attribute", "name", "key", "t", "ID", "attributes", "value", "snapshot", "type", "Id", "attribute", "operation", "operator"]}}
{"code": "public ListBonusPaymentsResult listBonusPayments(ListBonusPaymentsRequest request) {request = beforeClientExecution(request);return executeListBonusPayments(request);}\n", "substitutes": {"listBonusPayments": ["get", "execute", "list", "List", "lists"], "request": ["input", "get", "parent", "response", "execute", "list", "List", "lists", "request", "req", "call", "query", "argument"]}}
{"code": "public V get(CharSequence cs) {if(cs == null)throw new NullPointerException();return null;}\n", "substitutes": {"get": ["get", "append", "delete", "trim", "remove"], "cs": ["get", "s", "text", "key", "name", "c", "append", "cs", "delete", "string", "trim", "remove"]}}
{"code": "public TokenFilter create(TokenStream input) {CommonGramsFilter commonGrams = (CommonGramsFilter) super.create(input);return new CommonGramsQueryFilter(commonGrams);}\n", "substitutes": {"create": ["process", "create", "parse", "apply", "filter", "accept", "read"], "input": ["process", "create", "parse", "apply", "input", "s", "in", "filter", "accept", "tokens", "streams", "stream", "read"], "commonGrams": ["process", "create", "streams", "bc", "input", "s", "filter", "tokens", "cf", "stream", "read", "parse", "apply", "sc", "filters", "in", "f", "c", "accept"]}}
{"code": "public String getPath() {return path;}\n", "substitutes": {"getPath": ["path", "get", "name", "root"]}}
{"code": "public InitiateMultipartUploadResult initiateMultipartUpload(InitiateMultipartUploadRequest request) {request = beforeClientExecution(request);return executeInitiateMultipartUpload(request);}\n", "substitutes": {"initiateMultipartUpload": ["execute", "upload", "call", "run", "initiate"], "request": ["input", "parent", "execute", "upload", "call", "run", "request", "req", "query", "initiate", "argument"]}}
{"code": "public StringBuilder insert(int offset, int i) {insert0(offset, Integer.toString(i));return this;}\n", "substitutes": {"insert": ["index", "add", "append", "inserts", "insert"], "offset": ["k", "index", "n", "add", "key", "append", "offset", "inserts", "insert", "j"], "i": ["k", "length", "index", "n", "add", "key", "append", "value", "offset", "count", "val", "inserts", "insert", "len", "j"]}}
{"code": "public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 62; shift >= 0; shift -= 2) {values[valuesOffset++] = (int) ((block >>> shift) & 3);}}}\n", "substitutes": {"decode": ["process", "update", "build", "generate", "shuffle"], "blocks": ["process", "update", "data", "build", "bytes", "generate", "shuffle", "block", "blocks", "bits"], "blocksOffset": ["process", "update", "data", "build", "bytes", "index", "generate", "shuffle", "block", "blocks", "bits", "start", "position", "pos", "offset", "i"], "values": ["process", "update", "data", "shuffle", "block", "blocks", "bits", "start", "position", "value", "values", "build", "generate", "offset", "result", "index", "i", "positions", "bytes", "pos"], "valuesOffset": ["process", "update", "data", "shuffle", "block", "blocks", "bits", "start", "position", "value", "values", "build", "generate", "offset", "result", "index", "i", "length", "positions", "bytes", "count", "pos"], "iterations": ["process", "update", "data", "n", "shuffle", "block", "blocks", "bits", "start", "position", "value", "values", "build", "generate", "offset", "len", "result", "index", "i", "length", "positions", "bytes", "count", "pos", "size"], "i": ["process", "update", "data", "n", "shuffle", "block", "blocks", "bits", "start", "position", "value", "values", "iter", "build", "generate", "t", "offset", "len", "result", "iterations", "index", "iteration", "i", "length", "positions", "bytes", "count", "pos", "size"], "block": ["process", "update", "data", "n", "shuffle", "block", "blocks", "bits", "start", "position", "value", "values", "iter", "build", "generate", "t", "offset", "len", "result", "iterations", "index", "iteration", "b", "i", "length", "positions", "bytes", "count", "val", "pos", "size"], "shift": ["process", "update", "data", "n", "shuffle", "block", "blocks", "bits", "start", "position", "value", "shift", "values", "iter", "build", "2", "generate", "t", "1", "offset", "len", "result", "iterations", "index", "iteration", "b", "i", "j", "length", "positions", "bytes", "c", "count", "val", "pos", "size", "63"]}}
{"code": "public TokenStream create(TokenStream input) {return new ElisionFilter(input, articles);}\n", "substitutes": {"create": ["create", "apply", "build", "filter", "accept"], "input": ["token", "create", "apply", "build", "s", "source", "filter", "accept", "tokens", "ts", "article", "stream"]}}
{"code": "public boolean eat(Row in, int remap[]) {int sum = 0;for (Iterator<Cell> i = in.cells.values().iterator(); i.hasNext();) {Cell c = i.next();sum += c.cnt;if (c.ref >= 0) {if (remap[c.ref] == 0) {c.ref = -1;}}}int frame = sum / 10;boolean live = false;for (Iterator<Cell> i = in.cells.values().iterator(); i.hasNext();) {Cell c = i.next();if (c.cnt < frame && c.cmd >= 0) {c.cnt = 0;c.cmd = -1;}if (c.cmd >= 0 || c.ref >= 0) {live |= true;}}return !live;}\n", "substitutes": {"eat": ["filter", "exists", "live", "contains", "remove"], "in": ["row", "filter", "exists", "r", "tr", "ro", "c", "this", "t", "live", "contains", "remove"], "remap": ["in", "row", "filter", "exists", "r", "tr", "ro", "c", "this", "t", "ref", "seq", "pos", "out", "live", "contains", "frame", "remove"], "sum": ["n", "ro", "r", "ref", "seq", "out", "contains", "filter", "exists", "this", "tr", "t", "live", "total", "frame", "remove", "in", "row", "c", "count", "pos", "size"], "i": ["n", "ro", "r", "ref", "seq", "out", "contains", "iter", "filter", "exists", "this", "tr", "t", "live", "total", "iterator", "it", "frame", "remove", "i", "in", "row", "c", "count", "pos", "size"], "c": ["cell", "n", "ro", "r", "ref", "seq", "out", "contains", "col", "iter", "filter", "exists", "this", "tr", "t", "cells", "live", "total", "iterator", "it", "frame", "remove", "i", "in", "row", "c", "count", "pos", "size"], "ref": ["cell", "n", "ro", "r", "ref", "seq", "out", "contains", "col", "iter", "id", "filter", "exists", "this", "tr", "t", "cells", "name", "live", "rm", "total", "iterator", "it", "frame", "remove", "i", "rev", "in", "row", "c", "count", "pos", "size", "cmd"], "frame": ["cell", "n", "ro", "cutoff", "r", "ref", "seq", "threshold", "out", "contains", "col", "iter", "id", "filter", "exists", "this", "tr", "t", "cells", "name", "0", "delta", "live", "min", "rm", "max", "total", "iterator", "it", "limit", "frame", "remove", "i", "rev", "in", "row", "c", "count", "pos", "size", "cmd"], "cnt": ["cell", "n", "ro", "cutoff", "r", "ref", "seq", "threshold", "out", "contains", "col", "iter", "id", "filter", "exists", "this", "tr", "t", "cells", "name", "0", "delta", "live", "min", "rm", "max", "total", "iterator", "it", "limit", "frame", "remove", "i", "rev", "in", "row", "c", "count", "pos", "size", "cmd"], "cmd": ["cell", "n", "ro", "cutoff", "r", "ref", "seq", "threshold", "rel", "out", "contains", "col", "iter", "id", "filter", "exists", "this", "tr", "t", "cells", "name", "0", "delta", "live", "min", "rm", "alt", "max", "total", "iterator", "it", "limit", "frame", "remove", "i", "rev", "in", "row", "c", "count", "pos", "size", "cmd"], "live": ["ignore", "cell", "n", "ro", "cutoff", "r", "ref", "seq", "threshold", "rel", "out", "contains", "col", "iter", "id", "filter", "exists", "this", "tr", "t", "cells", "name", "0", "delta", "found", "live", "min", "rm", "eat", "alt", "eaten", "max", "total", "iterator", "it", "limit", "frame", "remove", "i", "rev", "skip", "in", "row", "c", "count", "pos", "size", "cmd", "ok"]}}
{"code": "final public Token getToken(int index) {Token t = jj_lookingAhead ? jj_scanpos : token;for (int i = 0; i < index; i++) {if (t.next != null) t = t.next;else t = t.next = token_source.getNextToken();}return t;}\n", "substitutes": {"getToken": ["next", "get", "peek", "advance", "find"], "index": ["next", "length", "get", "peek", "advance", "n", "find", "count", "limit", "size", "len"], "t": ["tmp", "n", "prev", "s", "t", "len", "next", "token", "result", "peek", "ret", "limit", "length", "get", "advance", "find", "count", "pos", "size", "p"], "i": ["tmp", "n", "prev", "s", "t", "len", "next", "token", "result", "peek", "index", "ret", "limit", "i", "j", "k", "length", "get", "advance", "find", "count", "pos", "size", "p"], "next": ["tmp", "n", "value", "prev", "s", "t", "len", "next", "token", "result", "peek", "index", "text", "ret", "limit", "i", "j", "k", "length", "get", "advance", "parent", "right", "source", "find", "count", "pos", "size", "p"]}}
{"code": "public String toString() {StringBuilder sb = new StringBuilder();sb.append(getClass().getName()).append(\" [ARRAY]\\n\");sb.append(\" range=\").append(getRange()).append(\"\\n\");sb.append(\" options=\").append(HexDump.shortToHex(_options)).append(\"\\n\");sb.append(\" notUsed=\").append(HexDump.intToHex(_field3notUsed)).append(\"\\n\");sb.append(\" formula:\").append(\"\\n\");Ptg[] ptgs = _formula.getTokens();for (int i = 0; i < ptgs.length; i++) {Ptg ptg = ptgs[i];sb.append(ptg).append(ptg.getRVAType()).append(\"\\n\");}sb.append(\"]\");return sb.toString();}\n", "substitutes": {"toString": ["length", "build", "output", "generate", "dump", "reverse", "String", "string", "trim"], "sb": ["result", "length", "build", "s", "output", "generate", "dump", "builder", "reverse", "buf", "buffer", "b", "String", "string", "trim"], "ptgs": ["reverse", "buffer", "String", "build", "s", "output", "generate", "t", "tokens", "trim", "result", "token", "builder", "args", "b", "terms", "string", "length", "dump", "buf", "p"], "i": ["reverse", "buffer", "String", "build", "s", "output", "generate", "t", "tokens", "trim", "result", "token", "index", "builder", "args", "b", "terms", "string", "i", "j", "k", "length", "ii", "dump", "buf", "pos", "p"], "ptg": ["reverse", "mt", "buffer", "String", "build", "s", "SPACE", "output", "generate", "t", "tokens", "\"\"", "g", "trim", "result", "token", "index", "prefix", "builder", "pt", "args", "b", "terms", "string", "i", "j", "k", "length", "CR", "ii", "dump", "buf", "pos", "p"]}}
{"code": "public GetFolderResult getFolder(GetFolderRequest request) {request = beforeClientExecution(request);return executeGetFolder(request);}\n", "substitutes": {"getFolder": ["get", "execute", "list", "call", "folder"], "request": ["input", "get", "parent", "execute", "list", "call", "request", "req", "instruction", "query", "p", "folder"]}}
{"code": "@Override public void add(int location, E object) {throw new UnsupportedOperationException();}\n", "substitutes": {"add": ["visit", "add", "insert", "set", "put"], "location": ["visit", "id", "index", "add", "key", "position", "i", "insert", "set", "put"], "object": ["element", "visit", "id", "index", "node", "add", "key", "e", "value", "position", "i", "insert", "item", "set", "put"]}}
{"code": "public PositiveScoresOnlyCollector(Collector in) {super(in);}\n", "substitutes": {"in": ["collector", "parent", "f", "c", "pc", "processor"]}}
{"code": "public CreateRepoBuildRuleRequest() {super(\"cr\", \"2016-06-07\", \"CreateRepoBuildRule\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/rules\");setMethod(MethodType.PUT);}\n", "substitutes": {}}
{"code": "public BaseRef(AreaEval ae) {_refEval = null;_areaEval = ae;_firstRowIndex = ae.getFirstRow();_firstColumnIndex = ae.getFirstColumn();_height = ae.getLastRow() - ae.getFirstRow() + 1;_width = ae.getLastColumn() - ae.getFirstColumn() + 1;}\n", "substitutes": {"ae": ["nil", "area", "this", "ra", "a", "ref", "val", "null", "pa", "el"], "_refEval": ["parent", "nil", "area", "this", "ra", "a", "ref", "_", "val", "null", "buffer", "pa", "root", "el"], "_areaEval": ["parent", "nil", "arc", "area", "this", "ra", "a", "ref", "_", "val", "null", "buffer", "pa", "Area", "root", "el"], "_firstRowIndex": ["a", "ref", "buffer", "pa", "this", "null", "offset", "Area", "root", "nil", "index", "ra", "_", "parent", "arc", "row", "area", "val", "el", "Index"], "_firstColumnIndex": ["a", "ref", "buffer", "pa", "col", "this", "null", "offset", "Area", "root", "nil", "index", "ra", "_", "width", "parent", "arc", "row", "area", "val", "columns", "el", "Index"], "_height": ["a", "ref", "rows", "buffer", "pa", "stride", "col", "this", "null", "offset", "Area", "root", "nil", "index", "ra", "_", "width", "parent", "arc", "height", "row", "area", "val", "columns", "el", "Index"], "_width": ["column", "a", "ref", "rows", "buffer", "pa", "stride", "col", "this", "null", "offset", "Area", "root", "nil", "index", "ra", "_", "width", "parent", "arc", "height", "row", "area", "val", "columns", "el", "Index"]}}
{"code": "public DrawingManager2( EscherDggRecord dgg ) {this.dgg = dgg;}\n", "substitutes": {"dgg": ["parent", "record", "rec", "r", "records", "recorder"]}}
{"code": "public void reset() {if (!first())reset(raw);}\n", "substitutes": {"reset": ["next", "first", "run", "init", "send", "push", "write", "read"]}}
{"code": "public final CharsetDecoder reset() {status = INIT;implReset();return this;}\n", "substitutes": {"reset": ["initialize", "start", "reset", "init", "Init"], "status": ["initialize", "state", "status", "start", "reset", "init", "Init", "type", "mode"]}}
{"code": "public BufferedReader(Reader in, int size) {super(in);if (size <= 0) {throw new IllegalArgumentException(\"size <= 0\");}this.in = in;buf = new char[size];}\n", "substitutes": {"in": ["input", "in", "br", "r", "rc", "null", "reader", "Reader"], "size": ["input", "length", "in", "bytes", "n", "capacity", "0", "br", "r", "count", "rc", "null", "size", "reader", "Reader"], "buf": ["n", "capacity", "r", "buffer", "Reader", "input", "0", "characters", "rc", "null", "br", "chars", "reader", "length", "in", "bytes", "ch", "count", "buf", "size"]}}
{"code": "public DescribeCodeRepositoryResult describeCodeRepository(DescribeCodeRepositoryRequest request) {request = beforeClientExecution(request);return executeDescribeCodeRepository(request);}\n", "substitutes": {"describeCodeRepository": ["list", "execute", "call", "request", "describe"], "request": ["input", "parent", "argument", "list", "execute", "call", "request", "req", "instruction", "query", "describe", "p"]}}
{"code": "public DBSubnetGroup createDBSubnetGroup(CreateDBSubnetGroupRequest request) {request = beforeClientExecution(request);return executeCreateDBSubnetGroup(request);}\n", "substitutes": {"createDBSubnetGroup": ["create", "execute", "Create", "created", "call"], "request": ["input", "create", "parent", "op", "execute", "Create", "created", "resource", "call", "request", "req", "instruction", "p"]}}
{"code": "public RenameBranchCommand setOldName(String oldName) {checkCallable();this.oldName = oldName;return this;}\n", "substitutes": {"setOldName": ["Name", "name", "old", "rename", "named"], "oldName": ["Name", "v", "n", "name", "original", "old", "rename", "named", "orig"]}}
{"code": "public DeleteBranchCommand setForce(boolean force) {checkCallable();this.force = force;return this;}\n", "substitutes": {"setForce": ["forced", "force", "push", "Force"], "force": ["hard", "flag", "f", "Force", "forced", "force", "c", "b", "push", "p"]}}
{"code": "public StopCompilationJobResult stopCompilationJob(StopCompilationJobRequest request) {request = beforeClientExecution(request);return executeStopCompilationJob(request);}\n", "substitutes": {"stopCompilationJob": ["execute", "start", "run", "pause", "stop"], "request": ["input", "parent", "execute", "resource", "start", "run", "request", "call", "req", "pause", "argument", "stop", "p"]}}
{"code": "public synchronized final void incrementSecondaryProgressBy(int diff) {setSecondaryProgress(mSecondaryProgress + diff);}\n", "substitutes": {"incrementSecondaryProgressBy": ["update", "advance", "add", "increment", "progress"], "diff": ["update", "step", "advance", "n", "add", "increment", "amount", "value", "progress", "1", "i"]}}
{"code": "public int[] clear() {return bytesStart = null;}\n", "substitutes": {"clear": ["end", "bytes", "start", "null", "buffer"], "bytesStart": ["result", "end", "array", "bytes", "start", "map", "null", "buffer", "values"]}}
{"code": "public String getRawPath() {return path;}\n", "substitutes": {"getRawPath": ["path", "get", "name", "root"]}}
{"code": "public GetUserSourceAccountRequest() {super(\"cr\", \"2016-06-07\", \"GetUserSourceAccount\", \"cr\");setUriPattern(\"/users/sourceAccount\");setMethod(MethodType.GET);}\n", "substitutes": {}}
{"code": "public CreateExportJobResult createExportJob(CreateExportJobRequest request) {request = beforeClientExecution(request);return executeCreateExportJob(request);}\n", "substitutes": {"createExportJob": ["create", "execute", "call", "run", "export"], "request": ["input", "create", "parent", "execute", "call", "run", "request", "req", "query", "argument", "export", "p"]}}
{"code": "public CreateDedicatedIpPoolResult createDedicatedIpPool(CreateDedicatedIpPoolRequest request) {request = beforeClientExecution(request);return executeCreateDedicatedIpPool(request);}\n", "substitutes": {"createDedicatedIpPool": ["create", "begin", "execute", "call", "run"], "request": ["input", "create", "begin", "execute", "call", "run", "request", "req", "instruction", "query", "parameters", "p"]}}
{"code": "public boolean equals(Object obj) {if (this == obj) {return true;}if (obj == null) {return false;}if (obj instanceof HSSFCellStyle) {final HSSFCellStyle other = (HSSFCellStyle) obj;if (_format == null) {if (other._format != null) {return false;}} else if (!_format.equals(other._format)) {return false;}if (_index != other._index) {return false;}return true;}return false;}\n", "substitutes": {"equals": ["equals", "compare", "equal", "matches", "contains"], "obj": ["obj", "other", "equals", "object", "o", "compare", "equal", "value", "b", "matches", "contains"], "other": ["obj", "other", "s", "equals", "object", "o", "compare", "equal", "value", "child", "b", "matches", "style", "contains"]}}
{"code": "public ReleaseHostsResult releaseHosts(ReleaseHostsRequest request) {request = beforeClientExecution(request);return executeReleaseHosts(request);}\n", "substitutes": {"releaseHosts": ["update", "begin", "create", "release", "execute"], "request": ["input", "update", "begin", "create", "parent", "release", "execute", "request", "call", "req", "query", "argument"]}}
{"code": "public boolean equals(Object object) {if (this == object) {return true;}if (object instanceof Set) {Set<?> s = (Set<?>) object;try {return size() == s.size() && containsAll(s);} catch (NullPointerException ignored) {return false;} catch (ClassCastException ignored) {return false;}}return false;}\n", "substitutes": {"equals": ["equals", "add", "equal", "matches", "contains"], "object": ["obj", "other", "equals", "object", "o", "add", "equal", "value", "matches", "contains"], "s": ["obj", "other", "s", "sets", "equals", "object", "o", "add", "subset", "equal", "value", "matches", "set", "contains"]}}
{"code": "public void setRefLogMessage(String msg, boolean appendStatus) {customRefLog = true;if (msg == null && !appendStatus) {disableRefLog();} else if (msg == null && appendStatus) {refLogMessage = \"\"; refLogIncludeResult = true;} else {refLogMessage = msg;refLogIncludeResult = appendStatus;}}\n", "substitutes": {"setRefLogMessage": ["info", "add", "println", "log", "debug"], "msg": ["result", "info", "messages", "s", "text", "add", "println", "message", "log", "debug", "content", "msg"], "appendStatus": ["ignore", "undefined", "log", "debug", "content", "true", "s", "0", "include", "null", "messages", "msg", "result", "show", "text", "add", "full", "info", "println", "override", "message", "false", "enable"], "refLogMessage": ["ignore", "undefined", "log", "debug", "content", "true", "s", "0", "status", "include", "null", "messages", "msg", "result", "show", "text", "add", "full", "str", "info", "println", "override", "message", "false", "enable"], "refLogIncludeResult": ["ignore", "undefined", "append", "ok", "log", "debug", "content", "true", "disabled", "s", "changed", "0", "status", "include", "null", "messages", "msg", "result", "show", "enabled", "text", "add", "full", "str", "info", "println", "override", "message", "success", "false", "enable"]}}
{"code": "public StreamIDRecord(RecordInputStream in) {idstm = in.readShort();}\n", "substitutes": {"in": ["ins", "in", "is", "out", "stream"], "idstm": ["ins", "in", "id", "record", "flags", "offset", "is", "type", "out", "stream"]}}
{"code": "public RecognizeCarRequest() {super(\"visionai-poc\", \"2020-04-08\", \"RecognizeCar\");setMethod(MethodType.POST);}\n", "substitutes": {}}
{"code": "public final ByteOrder order() {return ByteOrder.nativeOrder();}\n", "substitutes": {"order": ["instance", "ordering", "get", "order"]}}
{"code": "public int getAheadCount() {return aheadCount;}\n", "substitutes": {"getAheadCount": ["next", "length", "count", "size", "len"]}}
{"code": "public boolean isNewFragment() {return false;}\n", "substitutes": {"isNewFragment": ["check", "validate", "exists", "empty", "valid"]}}
{"code": "public GetCloudFrontOriginAccessIdentityConfigResult getCloudFrontOriginAccessIdentityConfig(GetCloudFrontOriginAccessIdentityConfigRequest request) {request = beforeClientExecution(request);return executeGetCloudFrontOriginAccessIdentityConfig(request);}\n", "substitutes": {"getCloudFrontOriginAccessIdentityConfig": ["result", "get", "execute", "call", "describe"], "request": ["result", "input", "get", "op", "parent", "execute", "call", "request", "req", "instruction", "query", "describe"]}}
{"code": "public boolean matches(int symbol, int minVocabSymbol, int maxVocabSymbol) {return label == symbol;}\n", "substitutes": {"matches": ["equals", "accept", "matches", "contains", "match"], "symbol": ["id", "index", "equals", "label", "name", "0", "accept", "symbol", "1", "pattern", "matches", "contains", "i", "match"], "minVocabSymbol": ["id", "index", "equals", "label", "node", "name", "0", "accept", "symbol", "1", "pattern", "matches", "type", "labels", "contains", "i", "match"], "maxVocabSymbol": ["labeled", "type", "labels", "contains", "id", "name", "0", "1", "pattern", "index", "matches", "node", "i", "equals", "label", "accept", "symbol", "count", "match"]}}
{"code": "public DeleteTransitGatewayResult deleteTransitGateway(DeleteTransitGatewayRequest request) {request = beforeClientExecution(request);return executeDeleteTransitGateway(request);}\n", "substitutes": {"deleteTransitGateway": ["execute", "run", "delete", "send", "complete"], "request": ["input", "parent", "execute", "run", "request", "req", "call", "delete", "query", "instruction", "send", "p", "complete"]}}
{"code": "public static byte[] grow(byte[] array, int minSize) {assert minSize >= 0: \"size must be positive (got \" + minSize + \"): likely integer overflow?\";if (array.length < minSize) {return growExact(array, oversize(minSize, Byte.BYTES));} else return array;}\n", "substitutes": {"grow": ["resize", "expand", "shrink", "grow", "min"], "array": ["input", "result", "data", "resize", "array", "expand", "bytes", "shrink", "null", "b", "a", "buf", "grow", "arr", "buffer", "min"], "minSize": ["data", "n", "capacity", "a", "buffer", "input", "array", "s", "shrink", "0", "null", "len", "min", "result", "resize", "expand", "b", "grow", "arr", "limit", "length", "bytes", "buf", "size"]}}
{"code": "public CreateTransactionRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"CreateTransaction\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n", "substitutes": {}}
{"code": "public BatchRefUpdate setRefLogIdent(PersonIdent pi) {refLogIdent = pi;return this;}\n", "substitutes": {"setRefLogIdent": ["create", "put", "add", "append", "with"], "pi": ["create", "put", "id", "v", "add", "name", "append", "value", "ele", "with"], "refLogIdent": ["create", "ident", "put", "id", "v", "identifier", "add", "name", "identity", "append", "value", "ele", "pc", "with"]}}
{"code": "public GetLaunchTemplateDataResult getLaunchTemplateData(GetLaunchTemplateDataRequest request) {request = beforeClientExecution(request);return executeGetLaunchTemplateData(request);}\n", "substitutes": {"getLaunchTemplateData": ["get", "execute", "list", "call", "run"], "request": ["input", "get", "parent", "execute", "list", "resource", "call", "run", "request", "req", "query", "argument", "p"]}}
{"code": "public ParseInfo(ProfilingATNSimulator atnSimulator) {this.atnSimulator = atnSimulator;}\n", "substitutes": {"atnSimulator": ["info", "simulator", "calculator", "s", "ts", "tc", "impl", "profile"]}}
{"code": "public SimpleQQParser(String qqNames[], String indexField) {this.qqNames = qqNames;this.indexField = indexField;}\n", "substitutes": {"qqNames": ["input", "data", "fields", "tokens", "chars", "args", "patterns", "columns"], "indexField": ["input", "data", "description", "encoding", "fields", "name", "prefix", "tokens", "chars", "args", "pattern", "patterns", "columns", "type"]}}
{"code": "public DBCluster promoteReadReplicaDBCluster(PromoteReadReplicaDBClusterRequest request) {request = beforeClientExecution(request);return executePromoteReadReplicaDBCluster(request);}\n", "substitutes": {"promoteReadReplicaDBCluster": ["create", "execute", "promote", "call", "run"], "request": ["input", "create", "op", "execute", "promote", "call", "run", "request", "req", "query", "instruction"]}}
{"code": "public DescribeCapacityReservationsResult describeCapacityReservations(DescribeCapacityReservationsRequest request) {request = beforeClientExecution(request);return executeDescribeCapacityReservations(request);}\n", "substitutes": {"describeCapacityReservations": ["begin", "execute", "call", "describe", "summary"], "request": ["input", "begin", "parent", "op", "execute", "call", "request", "req", "query", "describe", "summary"]}}
{"code": "public String toString() {return \"IndexSearcher(\" + reader + \"; executor=\" + executor + \"; sliceExecutionControlPlane \" + sliceExecutor + \")\";}\n", "substitutes": {"toString": ["print", "name", "description", "main"]}}
{"code": "public final boolean incrementToken() {return false;}\n", "substitutes": {"incrementToken": ["check", "negate", "empty", "false"]}}
{"code": "public void serialize(LittleEndianOutput out) {out.writeShort(main + 1);out.writeShort(subFrom);out.writeShort(subTo);}\n", "substitutes": {"serialize": ["store", "encode", "flush", "close", "write"], "out": ["w", "output", "o", "store", "encode", "out", "flush", "close", "write", "os"]}}
{"code": "public void decode(byte[] blocks, int blocksOffset, int[] values,int valuesOffset, int iterations) {if (bitsPerValue > 32) {throw new UnsupportedOperationException(\"Cannot decode \" + bitsPerValue + \"-bits values into an int[]\");}for (int i = 0; i < iterations; ++i) {final long block = readLong(blocks, blocksOffset);blocksOffset += 8;valuesOffset = decode(block, values, valuesOffset);}}\n", "substitutes": {"decode": ["copy", "decode", "encode", "init", "write", "read"], "blocks": ["data", "bytes", "copy", "decode", "encode", "buf", "init", "b", "buffer", "write", "read"], "blocksOffset": ["data", "bytes", "copy", "index", "decode", "bits", "offset", "encode", "buf", "init", "position", "pos", "b", "size", "buffer", "write", "i", "read"], "values": ["data", "bits", "value", "blocks", "position", "buffer", "write", "values", "decode", "offset", "read", "iterations", "index", "copy", "encode", "b", "offsets", "i", "bytes", "buf", "init", "pos", "size"], "valuesOffset": ["data", "bits", "value", "blocks", "block", "position", "buffer", "write", "values", "decode", "offset", "encoding", "read", "result", "iterations", "index", "copy", "encode", "flags", "b", "offsets", "i", "length", "bytes", "buf", "init", "pos", "size"], "iterations": ["data", "n", "bits", "value", "blocks", "block", "position", "buffer", "write", "values", "decode", "offset", "len", "encoding", "read", "result", "iterations", "index", "copy", "encode", "flags", "b", "limit", "offsets", "i", "length", "bytes", "count", "buf", "init", "pos", "size"], "i": ["data", "n", "bits", "value", "blocks", "block", "position", "r", "buffer", "write", "values", "iter", "decode", "t", "offset", "len", "encoding", "read", "result", "iterations", "index", "copy", "iteration", "x", "encode", "flags", "b", "limit", "offsets", "i", "length", "bytes", "count", "buf", "init", "pos", "size"], "block": ["data", "n", "bits", "value", "blocks", "block", "position", "r", "buffer", "write", "values", "iter", "decode", "t", "offset", "len", "encoding", "read", "result", "iterations", "index", "copy", "iteration", "x", "encode", "flags", "b", "limit", "offsets", "i", "length", "bytes", "count", "buf", "init", "val", "pos", "size"]}}
{"code": "public boolean isExpectedToken(int symbol) {ATN atn = getInterpreter().atn;ParserRuleContext ctx = _ctx;ATNState s = atn.states.get(getState());IntervalSet following = atn.nextTokens(s);if (following.contains(symbol)) {return true;}if ( !following.contains(Token.EPSILON) ) return false;while ( ctx!=null && ctx.invokingState>=0 && following.contains(Token.EPSILON) ) {ATNState invokingState = atn.states.get(ctx.invokingState);RuleTransition rt = (RuleTransition)invokingState.transition(0);following = atn.nextTokens(rt.followState);if (following.contains(symbol)) {return true;}ctx = (ParserRuleContext)ctx.parent;}if ( following.contains(Token.EPSILON) && symbol == Token.EOF ) {return true;}return false;}\n", "substitutes": {"isExpectedToken": ["skip", "accept", "includes", "has", "contains"], "symbol": ["skip", "token", "next", "s", "expected", "c", "accept", "includes", "t", "0", "current", "has", "contains"], "atn": ["syntax", "n", "current", "a", "contains", "context", "s", "ast", "0", "t", "this", "has", "acc", "token", "next", "state", "parser", "skip", "an", "expected", "c", "accept", "includes", "grammar"], "ctx": ["syntax", "n", "current", "a", "cx", "contains", "context", "s", "ast", "0", "t", "this", "has", "acc", "token", "next", "sc", "state", "parser", "skip", "an", "parent", "expected", "c", "accept", "includes", "grammar", "pc", "p"], "s": ["syntax", "n", "current", "a", "start", "cx", "contains", "context", "s", "ast", "0", "t", "this", "states", "has", "acc", "token", "next", "sc", "state", "parser", "skip", "an", "parent", "expected", "c", "accept", "includes", "grammar", "pc", "p"], "following": ["syntax", "n", "current", "a", "start", "cx", "contains", "context", "s", "ast", "0", "t", "this", "tokens", "states", "has", "acc", "set", "token", "next", "sc", "state", "parser", "ts", "skip", "an", "parent", "expected", "c", "accept", "includes", "grammar", "pc", "p"], "invokingState": ["syntax", "n", "current", "r", "a", "start", "cx", "contains", "st", "context", "s", "id", "ast", "0", "t", "this", "tokens", "name", "states", "level", "offset", "has", "acc", "set", "token", "next", "sc", "index", "state", "parser", "ts", "skip", "an", "parent", "expected", "c", "accept", "includes", "grammar", "pc", "p"], "rt": ["syntax", "n", "current", "r", "a", "start", "cx", "contains", "st", "context", "s", "id", "ast", "0", "t", "this", "tokens", "name", "states", "tr", "level", "offset", "has", "acc", "set", "trans", "token", "next", "sc", "index", "state", "parser", "ts", "skip", "an", "parent", "transition", "expected", "c", "accept", "includes", "grammar", "pc", "p"]}}
{"code": "public UpdateStreamResult updateStream(UpdateStreamRequest request) {request = beforeClientExecution(request);return executeUpdateStream(request);}\n", "substitutes": {"updateStream": ["update", "stream", "execute", "run", "put"], "request": ["input", "update", "parent", "stream", "execute", "run", "request", "call", "req", "query", "argument", "p", "put"]}}
{"code": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0) {try {OperandResolver.getSingleValue(arg0, srcRowIndex, srcColumnIndex);return ErrorEval.NA;} catch (EvaluationException e) {int result = translateErrorCodeToErrorTypeValue(e.getErrorEval().getErrorCode());return new NumberEval(result);}}\n", "substitutes": {"evaluate": ["convert", "eval", "apply", "get", "evaluate"], "srcRowIndex": ["convert", "eval", "context", "apply", "get", "column", "index", "evaluate", "expression", "col"], "srcColumnIndex": ["convert", "eval", "context", "apply", "get", "column", "index", "columns", "evaluate", "flags", "expression", "col"], "arg0": ["convert", "eval", "context", "apply", "get", "column", "index", "columns", "evaluation", "expr", "evaluate", "val", "flags", "expression", "col"], "result": ["column", "value", "error", "col", "context", "eval", "err", "msg", "convert", "result", "apply", "index", "evaluation", "evaluate", "flags", "expression", "get", "message", "val", "columns", "expr"]}}
{"code": "public String toString() {return getClass().getName() + \" [\" + _index + \" \" + _name + \"]\";}\n", "substitutes": {"toString": ["description", "get", "name", "str", "String"]}}
{"code": "public ListAssignmentsForHITResult listAssignmentsForHIT(ListAssignmentsForHITRequest request) {request = beforeClientExecution(request);return executeListAssignmentsForHIT(request);}\n", "substitutes": {"listAssignmentsForHIT": ["get", "execute", "list", "List", "lists"], "request": ["input", "get", "parent", "op", "execute", "list", "List", "lists", "request", "req", "instruction", "call", "query"]}}
{"code": "public DeleteAccessControlRuleResult deleteAccessControlRule(DeleteAccessControlRuleRequest request) {request = beforeClientExecution(request);return executeDeleteAccessControlRule(request);}\n", "substitutes": {"deleteAccessControlRule": ["update", "begin", "execute", "run", "delete"], "request": ["input", "update", "begin", "parent", "execute", "resource", "run", "request", "req", "call", "delete", "query", "argument", "p"]}}
{"code": "public Arc<Long> getFirstArc(FST.Arc<Long> arc) {return fst.getFirstArc(arc);}\n", "substitutes": {"getFirstArc": ["create", "intersect", "get", "arc", "add", "Arc", "transform", "arcs"], "arc": ["create", "intersect", "get", "ac", "arc", "add", "ra", "Arc", "a", "r", "c", "transform", "arcs"]}}
{"code": "public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long block = blocks[blocksOffset++];for (int shift = 48; shift >= 0; shift -= 16) {values[valuesOffset++] = (int) ((block >>> shift) & 65535);}}}\n", "substitutes": {"decode": ["process", "update", "initialize", "generate", "shuffle"], "blocks": ["process", "update", "data", "initialize", "bytes", "generate", "shuffle", "block", "blocks", "bits", "buf"], "blocksOffset": ["process", "update", "data", "initialize", "bytes", "index", "generate", "shuffle", "block", "blocks", "bits", "start", "buf", "pos", "offset", "flags", "i"], "values": ["process", "update", "data", "shuffle", "block", "blocks", "bits", "start", "value", "values", "generate", "offset", "result", "initialize", "index", "flags", "i", "bytes", "buf", "pos"], "valuesOffset": ["process", "update", "data", "shuffle", "block", "blocks", "bits", "start", "value", "values", "generate", "offset", "result", "initialize", "index", "flags", "i", "bytes", "count", "buf", "pos"], "iterations": ["process", "update", "data", "n", "shuffle", "block", "blocks", "bits", "start", "value", "values", "generate", "offset", "len", "result", "initialize", "index", "flags", "i", "length", "bytes", "count", "buf", "pos", "size"], "i": ["process", "update", "data", "n", "shuffle", "block", "blocks", "bits", "start", "value", "values", "iter", "generate", "t", "offset", "len", "result", "iterations", "initialize", "index", "iteration", "flags", "i", "length", "bytes", "count", "buf", "pos", "size"], "block": ["process", "update", "data", "n", "shuffle", "block", "blocks", "bits", "start", "value", "r", "values", "iter", "generate", "t", "offset", "len", "result", "iterations", "initialize", "index", "iteration", "flags", "b", "i", "length", "bytes", "count", "buf", "val", "pos", "size"], "shift": ["process", "update", "data", "n", "shuffle", "block", "blocks", "bits", "start", "value", "r", "shift", "values", "iter", "generate", "t", "offset", "len", "result", "iterations", "initialize", "index", "iteration", "flags", "b", "16", "i", "j", "length", "bytes", "c", "count", "buf", "32", "val", "pos", "size"]}}
{"code": "public long skip(long charCount) throws IOException {if (charCount < 0) {throw new IllegalArgumentException(\"charCount < 0: \" + charCount);}synchronized (lock) {checkNotClosed();if (charCount == 0) {return 0;}long inSkipped;int availableFromBuffer = buf.length - pos;if (availableFromBuffer > 0) {long requiredFromIn = charCount - availableFromBuffer;if (requiredFromIn <= 0) {pos += charCount;return charCount;}pos += availableFromBuffer;inSkipped = in.skip(requiredFromIn);} else {inSkipped = in.skip(charCount);}return inSkipped + availableFromBuffer;}}\n", "substitutes": {"skip": ["skip", "available", "count", "skipped", "seek", "fill", "read"], "charCount": ["n", "position", "fill", "0", "1", "offset", "len", "read", "limit", "seek", "skip", "in", "bytes", "available", "c", "count", "skipped", "buf", "pos"], "inSkipped": ["n", "start", "position", "fill", "0", "1", "offset", "len", "read", "ret", "limit", "seek", "skip", "in", "bytes", "available", "c", "count", "skipped", "buf", "pos"], "availableFromBuffer": ["n", "start", "position", "fill", "0", "1", "offset", "len", "read", "ret", "limit", "seek", "skip", "length", "in", "bytes", "available", "c", "count", "skipped", "buf", "remaining", "consumed", "pos"], "requiredFromIn": ["n", "start", "position", "fill", "0", "1", "offset", "len", "read", "ret", "limit", "seek", "skip", "length", "in", "bytes", "available", "c", "count", "skipped", "buf", "remaining", "consumed", "pos"], "pos": ["n", "start", "position", "fill", "buffer", "0", "1", "offset", "len", "read", "ret", "limit", "seek", "skip", "length", "in", "bytes", "available", "c", "count", "skipped", "buf", "remaining", "consumed", "pos"]}}
{"code": "public Map<String, Ref> getRefsMap() {return advertisedRefs;}\n", "substitutes": {"getRefsMap": ["references", "get", "all", "list", "reflections"]}}
{"code": "public UpdateApiKeyResult updateApiKey(UpdateApiKeyRequest request) {request = beforeClientExecution(request);return executeUpdateApiKey(request);}\n", "substitutes": {"updateApiKey": ["update", "apply", "execute", "call", "put"], "request": ["input", "update", "apply", "parent", "execute", "resource", "call", "request", "req", "query", "argument", "put"]}}
{"code": "public ObjectStream openStream() throws MissingObjectException, IOException {PackInputStream packIn;@SuppressWarnings(\"resource\")DfsReader ctx = db.newReader();try {try {packIn = new PackInputStream(pack, objectOffset + headerLength, ctx);ctx = null; } catch (IOException packGone) {ObjectId obj = pack.getReverseIdx(ctx).findObject(objectOffset);return ctx.open(obj, type).openStream();}} finally {if (ctx != null) {ctx.close();}}int bufsz = 8192;InputStream in = new BufferedInputStream(new InflaterInputStream(packIn, packIn.ctx.inflater(), bufsz),bufsz);return new ObjectStream.Filter(type, size, in);}\n", "substitutes": {"openStream": ["open", "next", "get", "close", "stream", "read"], "IOException": ["open", "next", "get", "E", "IO", "error", "Stream", "Exception", "Error", "Fault", "close", "stream", "read"], "packIn": ["file", "bis", "pm", "error", "Error", "Fault", "out", "db", "pack", "obj", "this", "close", "stream", "read", "open", "next", "src", "Stream", "Exception", "is", "IO", "get", "in", "E"], "ctx": ["codec", "config", "file", "bis", "r", "pm", "error", "Error", "Fault", "type", "out", "db", "Reader", "pack", "obj", "this", "0", "1", "rc", "close", "conf", "stream", "read", "open", "next", "index", "br", "src", "Stream", "Exception", "is", "IO", "reader", "get", "in", "E", "false"], "obj": ["codec", "config", "file", "object", "bis", "r", "pm", "error", "Error", "Fault", "type", "out", "db", "Reader", "pack", "obj", "pid", "id", "o", "this", "0", "1", "rc", "close", "conf", "null", "stream", "read", "open", "next", "index", "br", "src", "Stream", "Exception", "is", "IO", "reader", "get", "in", "E", "false"], "bufsz": ["codec", "config", "file", "object", "bis", "r", "pm", "error", "Error", "Fault", "type", "buffer", "out", "true", "db", "Reader", "pack", "obj", "pid", "id", "o", "this", "0", "1", "rc", "close", "conf", "null", "encoding", "stream", "read", "open", "next", "index", "br", "src", "Stream", "Exception", "limit", "is", "IO", "reader", "length", "get", "in", "bytes", "E", "size", "false"], "in": ["codec", "config", "file", "object", "bis", "r", "pm", "error", "Error", "Fault", "type", "buffer", "out", "true", "db", "Reader", "pack", "obj", "pid", "input", "id", "o", "this", "0", "1", "rc", "close", "conf", "null", "encoding", "stream", "read", "open", "next", "index", "br", "src", "Stream", "Exception", "limit", "is", "IO", "reader", "length", "get", "in", "bytes", "E", "size", "false"]}}
{"code": "public ArrayList() {array = EmptyArray.OBJECT;}\n", "substitutes": {"array": ["object", "list", "this", "class", "type"]}}
{"code": "public UpdateDetectorVersionResult updateDetectorVersion(UpdateDetectorVersionRequest request) {request = beforeClientExecution(request);return executeUpdateDetectorVersion(request);}\n", "substitutes": {"updateDetectorVersion": ["update", "apply", "execute", "call", "run"], "request": ["input", "update", "apply", "parent", "execute", "resource", "call", "run", "request", "req", "query", "argument", "p"]}}
{"code": "public void resize(){resize(Double.MAX_VALUE);}\n", "substitutes": {"resize": ["next", "update", "put", "max", "size", "close", "set", "free", "remove"]}}
{"code": "public RevFlagSet(Collection<RevFlag> s) {this();addAll(s);}\n", "substitutes": {"s": ["other", "coll", "list", "collection", "c", "collections", "values"]}}
{"code": "public int size() {return size;}\n", "substitutes": {"size": ["length", "get", "id", "index", "0", "rank", "count", "size", "i"]}}
{"code": "public final long getLong() {int newPosition = position + SizeOf.LONG;if (newPosition > limit) {throw new BufferUnderflowException();}long result = Memory.peekLong(backingArray, offset + position, order);position = newPosition;return result;}\n", "substitutes": {"getLong": ["next", "get", "peek", "pop", "read"], "newPosition": ["next", "skip", "get", "peek", "end", "0", "start", "pop", "offset", "position", "limit", "read"], "result": ["next", "skip", "result", "get", "peek", "end", "0", "start", "pop", "value", "offset", "position", "val", "limit", "l", "read"], "position": ["start", "value", "position", "l", "2", "0", "1", "pop", "offset", "read", "next", "result", "peek", "index", "limit", "skip", "get", "end", "4", "val", "pos"]}}
{"code": "public StringBuilder insert(int offset, long l) {insert0(offset, Long.toString(l));return this;}\n", "substitutes": {"insert": ["add", "append", "inserts", "insert", "put"], "offset": ["k", "index", "add", "append", "offset", "i", "inserts", "insert", "pos", "put"], "l": ["k", "length", "index", "n", "add", "append", "value", "offset", "val", "i", "inserts", "insert", "pos", "len", "put", "l"]}}
{"code": "public TurkishLowerCaseFilter(TokenStream in) {super(in);}\n", "substitutes": {"in": ["token", "s", "in", "t", "tokens", "stream"]}}
{"code": "public ParseTreeMatch match(ParseTree tree, ParseTreePattern pattern) {MultiMap<String, ParseTree> labels = new MultiMap<String, ParseTree>();ParseTree mismatchedNode = matchImpl(tree, pattern.getPatternTree(), labels);return new ParseTreeMatch(tree, pattern, labels, mismatchedNode);}\n", "substitutes": {"match": ["adapt", "parse", "find", "matches", "match"], "tree": ["adapt", "parse", "parent", "source", "text", "tree", "find", "pattern", "matches", "root", "node", "match"], "pattern": ["adapt", "parse", "parent", "source", "text", "tree", "patterns", "find", "pattern", "null", "matches", "root", "p", "node", "match"], "labels": ["params", "nodes", "adapt", "map", "patterns", "pattern", "null", "root", "result", "parse", "text", "tree", "matches", "node", "parent", "source", "find", "p", "match"], "mismatchedNode": ["params", "nodes", "adapt", "map", "patterns", "pattern", "null", "root", "result", "parse", "text", "tree", "ret", "matches", "node", "parent", "source", "find", "p", "match"]}}
{"code": "public void addIfNoOverlap( WeightedPhraseInfo wpi ){for( WeightedPhraseInfo existWpi : getPhraseList() ){if( existWpi.isOffsetOverlap( wpi ) ) {existWpi.getTermsInfos().addAll( wpi.getTermsInfos() );return;}}getPhraseList().add( wpi );}\n", "substitutes": {"addIfNoOverlap": ["add", "accept", "append", "insert", "put"], "wpi": ["info", "other", "reference", "add", "this", "accept", "append", "word", "term", "insert", "offset", "phrase", "ele", "put"], "existWpi": ["mi", "info", "other", "f", "reference", "add", "this", "accept", "append", "word", "pse", "term", "insert", "offset", "phrase", "ele", "p", "put"]}}
{"code": "public ThreeWayMerger newMerger(Repository db) {return new InCoreMerger(db);}\n", "substitutes": {"newMerger": ["merge", "create", "build", "of"], "db": ["create", "repository", "build", "merge", "r", "repo", "rep", "of", "root"]}}
{"code": "public float docScore(int docId, String field, int numPayloadsSeen, float payloadScore) {return numPayloadsSeen > 0 ? (payloadScore / numPayloadsSeen) : 1;}\n", "substitutes": {"docScore": ["scores", "score", "weight", "value", "similarity"], "docId": ["scores", "index", "score", "weight", "value", "request", "version", "doc", "document", "similarity"], "field": ["description", "scores", "index", "score", "path", "name", "weight", "value", "request", "url", "version", "doc", "document", "similarity", "payload"], "numPayloadsSeen": ["description", "n", "value", "url", "doc", "document", "similarity", "num", "name", "weight", "scores", "index", "score", "100", "total", "version", "path", "request", "count", "payload"], "payloadScore": ["description", "n", "value", "url", "doc", "sum", "document", "similarity", "num", "name", "1", "weight", "scores", "index", "score", "100", "total", "version", "path", "request", "count", "payload"]}}
{"code": "public Collection<ParseTree> evaluate(ParseTree t) {return Trees.findAllRuleNodes(t, ruleIndex);}\n", "substitutes": {"evaluate": ["parse", "children", "rules", "find", "nodes"], "t": ["parse", "parent", "children", "tree", "rules", "find", "parser", "nodes", "root", "rule", "node"]}}
{"code": "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[CFRULE]\\n\");buffer.append(\"    .condition_type   =\").append(getConditionType()).append(\"\\n\");buffer.append(\"    OPTION FLAGS=0x\").append(Integer.toHexString(getOptions())).append(\"\\n\");if (containsFontFormattingBlock()) {buffer.append(_fontFormatting).append(\"\\n\");}if (containsBorderFormattingBlock()) {buffer.append(_borderFormatting).append(\"\\n\");}if (containsPatternFormattingBlock()) {buffer.append(_patternFormatting).append(\"\\n\");}buffer.append(\"    Formula 1 =\").append(Arrays.toString(getFormula1().getTokens())).append(\"\\n\");buffer.append(\"    Formula 2 =\").append(Arrays.toString(getFormula2().getTokens())).append(\"\\n\");buffer.append(\"[/CFRULE]\\n\");return buffer.toString();}\n", "substitutes": {"toString": ["length", "build", "trim", "output", "generate", "join", "reverse", "sort", "string", "render", "stream", "format"], "buffer": ["result", "length", "build", "s", "trim", "output", "generate", "join", "builder", "reverse", "buf", "b", "sort", "buffer", "string", "render", "stream", "format"]}}
{"code": "public DescribeServiceUpdatesResult describeServiceUpdates(DescribeServiceUpdatesRequest request) {request = beforeClientExecution(request);return executeDescribeServiceUpdates(request);}\n", "substitutes": {"describeServiceUpdates": ["update", "execute", "list", "call", "describe"], "request": ["input", "update", "parent", "argument", "execute", "list", "call", "request", "req", "instruction", "query", "describe", "p"]}}
{"code": "public String getNameName(int index){return getNameAt(index).getNameName();}\n", "substitutes": {"getNameName": ["intern", "get", "Name", "name", "value", "string", "trim"], "index": ["intern", "get", "id", "Name", "index", "name", "value", "position", "pos", "offset", "string", "trim", "i"]}}
{"code": "public DescribeLocationsResult describeLocations() {return describeLocations(new DescribeLocationsRequest());}\n", "substitutes": {"describeLocations": ["create", "get", "execute", "list", "request", "send", "describe", "search"]}}
{"code": "public String toString() {return \"<phraseslop value='\" + getValueString() + \"'>\" + \"\\n\"+ getChild().toString() + \"\\n</phraseslop>\";}\n", "substitutes": {"toString": ["trim", "output", "text", "name", "value", "html", "xml", "render"]}}
{"code": "public DirCacheEntry getDirCacheEntry() {return currentSubtree == null ? currentEntry : null;}\n", "substitutes": {"getDirCacheEntry": ["next", "get", "peek", "current", "root"]}}
{"code": "public IntBuffer put(int[] src, int srcOffset, int intCount) {Arrays.checkOffsetAndCount(src.length, srcOffset, intCount);if (intCount > remaining()) {throw new BufferOverflowException();}for (int i = srcOffset; i < srcOffset + intCount; ++i) {put(src[i]);}return this;}\n", "substitutes": {"put": ["get", "add", "append", "set", "put"], "src": ["data", "get", "array", "add", "append", "src", "buf", "arr", "buffer", "set", "put"], "srcOffset": ["data", "get", "array", "index", "off", "n", "add", "0", "append", "start", "src", "buf", "pos", "offset", "arr", "buffer", "set", "put"], "intCount": ["data", "n", "capacity", "append", "start", "buffer", "put", "array", "0", "offset", "len", "set", "index", "off", "add", "src", "limit", "arr", "length", "get", "count", "buf", "pos", "size"], "i": ["data", "n", "capacity", "append", "start", "buffer", "put", "array", "0", "offset", "len", "set", "index", "off", "add", "src", "limit", "arr", "i", "j", "length", "get", "ii", "count", "buf", "pos", "size"]}}
{"code": "public void trimToSize() {int s = size;if (s == array.length) {return;}if (s == 0) {array = EmptyArray.OBJECT;} else {Object[] newArray = new Object[s];System.arraycopy(array, 0, newArray, 0, s);array = newArray;}modCount++;}\n", "substitutes": {"trimToSize": ["compact", "recycle", "reset", "free", "clear"], "s": ["tmp", "length", "index", "n", "compact", "recycle", "reset", "count", "size", "len", "free", "clear", "i"], "array": ["tmp", "data", "n", "a", "recycle", "array", "compact", "len", "clear", "result", "index", "arr", "free", "i", "length", "Array", "count", "reset", "size"], "newArray": ["tmp", "data", "n", "a", "recycle", "array", "compact", "temp", "null", "len", "clear", "result", "index", "b", "arr", "free", "i", "length", "Array", "count", "reset", "size"], "modCount": ["tmp", "data", "n", "a", "recycle", "array", "s", "compact", "temp", "null", "len", "clear", "result", "index", "b", "arr", "free", "i", "length", "Array", "count", "reset", "sizes", "size"]}}
{"code": "public DescribeLocalGatewayVirtualInterfacesResult describeLocalGatewayVirtualInterfaces(DescribeLocalGatewayVirtualInterfacesRequest request) {request = beforeClientExecution(request);return executeDescribeLocalGatewayVirtualInterfaces(request);}\n", "substitutes": {"describeLocalGatewayVirtualInterfaces": ["list", "call", "send", "summary", "describe"], "request": ["input", "op", "list", "call", "request", "req", "instruction", "query", "send", "summary", "describe"]}}
{"code": "public TokenStream create(TokenStream input) {return new RussianLightStemFilter(input);}\n", "substitutes": {"create": ["convert", "create", "apply", "build", "filter"], "input": ["convert", "create", "token", "apply", "build", "input", "s", "filter", "tokens", "stream"]}}
{"code": "public int [] toArray(final int [] a){int[] rval;if (a.length == _limit){System.arraycopy(_array, 0, a, 0, _limit);rval = a;}else{rval = toArray();}return rval;}\n", "substitutes": {"toArray": ["get", "array", "copy", "clone", "split", "append", "empty", "grow", "size"], "a": ["result", "get", "array", "copy", "clone", "split", "append", "a", "out", "empty", "args", "grow", "size", "arr", "values"], "rval": ["result", "tmp", "get", "array", "copy", "clone", "split", "append", "a", "ret", "b", "out", "empty", "args", "grow", "size", "arr", "values"]}}
{"code": "public BasicSessionCredentials(String accessKeyId, String accessKeySecret, String sessionToken,long roleSessionDurationSeconds) {if (accessKeyId == null) {throw new IllegalArgumentException(\"Access key ID cannot be null.\");}if (accessKeySecret == null) {throw new IllegalArgumentException(\"Access key secret cannot be null.\");}this.accessKeyId = accessKeyId;this.accessKeySecret = accessKeySecret;this.sessionToken = sessionToken;this.roleSessionDurationSeconds = roleSessionDurationSeconds;this.sessionStartedTimeInMilliSeconds = System.currentTimeMillis();}\n", "substitutes": {"accessKeyId": ["id", "identity", "identifier", "key", "name", "ID"], "accessKeySecret": ["id", "identity", "identifier", "key", "name", "ID", "secrets", "password", "username", "pass", "secret"], "sessionToken": ["role", "id", "identity", "identifier", "key", "name", "ID", "secrets", "password", "realm", "username", "pass", "secret"], "roleSessionDurationSeconds": ["role", "expires", "id", "identity", "identifier", "key", "name", "timeout", "duration", "ID", "secrets", "lifespan", "password", "realm", "username", "lifetime", "pass", "secret"], "sessionStartedTimeInMilliSeconds": ["identifier", "timeout", "ID", "password", "time", "lifetime", "id", "identity", "key", "name", "created", "lifespan", "realm", "role", "expires", "duration", "timestamp", "secrets", "username", "now", "pass", "secret"]}}
{"code": "public final ShortBuffer get(short[] dst, int dstOffset, int shortCount) {if (shortCount > remaining()) {throw new BufferUnderflowException();}System.arraycopy(backingArray, offset + position, dst, dstOffset, shortCount);position += shortCount;return this;}\n", "substitutes": {"get": ["copy", "add", "append", "set", "put"], "dst": ["data", "array", "copy", "add", "append", "buf", "b", "buffer", "set", "put"], "dstOffset": ["data", "array", "index", "copy", "add", "0", "append", "start", "position", "buf", "offset", "pos", "b", "buffer", "set", "put"], "shortCount": ["data", "n", "append", "start", "position", "buffer", "put", "array", "0", "offset", "len", "set", "index", "copy", "add", "limit", "b", "length", "remaining", "buf", "count", "pos", "size"], "position": ["data", "n", "append", "start", "position", "buffer", "put", "array", "0", "1", "offset", "len", "set", "index", "copy", "add", "limit", "b", "length", "remaining", "buf", "count", "pos", "size"]}}
{"code": "public ActivateEventSourceResult activateEventSource(ActivateEventSourceRequest request) {request = beforeClientExecution(request);return executeActivateEventSource(request);}\n", "substitutes": {"activateEventSource": ["activated", "create", "execute", "activation", "activate"], "request": ["input", "activated", "create", "execute", "resource", "request", "call", "req", "activation", "activate", "argument", "parameters"]}}
{"code": "public DescribeReceiptRuleSetResult describeReceiptRuleSet(DescribeReceiptRuleSetRequest request) {request = beforeClientExecution(request);return executeDescribeReceiptRuleSet(request);}\n", "substitutes": {"describeReceiptRuleSet": ["execute", "call", "send", "summary", "describe"], "request": ["input", "op", "argument", "execute", "call", "request", "req", "query", "send", "summary", "describe"]}}
{"code": "public Filter(String name) {setName(name);}\n", "substitutes": {"name": ["s", "Name", "n", "key", "name", "value", "null"]}}
{"code": "public DoubleBuffer put(double c) {throw new ReadOnlyBufferException();}\n", "substitutes": {"put": ["wrap", "add", "append", "buffer", "put"], "c": ["wrap", "v", "add", "append", "value", "val", "b", "buffer", "put"]}}
{"code": "public CreateTrafficPolicyInstanceResult createTrafficPolicyInstance(CreateTrafficPolicyInstanceRequest request) {request = beforeClientExecution(request);return executeCreateTrafficPolicyInstance(request);}\n", "substitutes": {"createTrafficPolicyInstance": ["create", "execute", "call", "invoke", "run"], "request": ["input", "create", "parent", "execute", "resource", "call", "invoke", "run", "request", "req", "query", "argument", "p"]}}
{"code": "public JapaneseIterationMarkCharFilter(Reader input, boolean normalizeKanji, boolean normalizeKana) {super(input);this.normalizeKanji = normalizeKanji;this.normalizeKana = normalizeKana;buffer.reset(input);}\n", "substitutes": {"input": ["input", "in", "0", "br", "r", "1", "reader", "false", "stream"], "normalizeKanji": ["input", "mark", "in", "replace", "negate", "0", "br", "r", "1", "escape", "accent", "reset", "mode", "reader", "false", "stream"], "normalizeKana": ["mark", "r", "reverse", "inverted", "input", "0", "1", "accent", "mode", "stream", "negate", "escape", "br", "reader", "skip", "in", "replace", "reset", "false"]}}
{"code": "public void writeLong(long v) {writeInt((int)(v >>  0));writeInt((int)(v >> 32));}\n", "substitutes": {"writeLong": ["written", "append", "encode", "write", "put"], "v": ["written", "n", "append", "value", "encode", "val", "b", "write", "put", "l"]}}
{"code": "public FileResolver() {exports = new ConcurrentHashMap<>();exportBase = new CopyOnWriteArrayList<>();}\n", "substitutes": {"exportBase": ["locks", "list", "lists", "files", "imports"]}}
{"code": "public ValueEval getRef3DEval(Ref3DPxg rptg) {SheetRangeEvaluator sre = createExternSheetRefEvaluator(rptg.getSheetName(), rptg.getLastSheetName(), rptg.getExternalWorkbookNumber());return new LazyRefEval(rptg.getRow(), rptg.getColumn(), sre);}\n", "substitutes": {"getRef3DEval": ["eval", "create", "get", "apply", "evaluate"], "rptg": ["eval", "create", "get", "apply", "f", "reference", "this", "r", "gp", "ref", "evaluate", "rg", "g", "sheet"], "sre": ["create", "fe", "e", "r", "gp", "ref", "rg", "sheet", "eval", "this", "rs", "g", "apply", "reference", "evaluate", "get", "f", "val", "ce", "eb"]}}
{"code": "public DeleteDatasetResult deleteDataset(DeleteDatasetRequest request) {request = beforeClientExecution(request);return executeDeleteDataset(request);}\n", "substitutes": {"deleteDataset": ["execute", "run", "delete", "complete", "remove"], "request": ["input", "parent", "argument", "execute", "resource", "run", "request", "call", "req", "delete", "query", "complete", "p", "remove"]}}
{"code": "public StartRelationalDatabaseResult startRelationalDatabase(StartRelationalDatabaseRequest request) {request = beforeClientExecution(request);return executeStartRelationalDatabase(request);}\n", "substitutes": {"startRelationalDatabase": ["create", "begin", "execute", "start", "run"], "request": ["input", "create", "begin", "parent", "execute", "start", "run", "request", "call", "req", "query", "argument", "p"]}}
{"code": "public DescribeReservedCacheNodesOfferingsResult describeReservedCacheNodesOfferings() {return describeReservedCacheNodesOfferings(new DescribeReservedCacheNodesOfferingsRequest());}\n", "substitutes": {"describeReservedCacheNodesOfferings": ["get", "list", "execute", "listing", "request", "describe", "search"]}}
{"code": "static public double pmt(double r, int nper, double pv, double fv, int type) {return -r * (pv * Math.pow(1 + r, nper) + fv) / ((1 + r*type) * (Math.pow(1 + r, nper) - 1));}\n", "substitutes": {"pmt": ["div", "dist", "r", "pow", "pdf"], "r": ["f", "m", "2", "n", "div", "dist", "r", "t", "1", "pow", "pdf", "type", "p"], "nper": ["f", "m", "2", "s", "n", "div", "dist", "r", "t", "1", "pow", "pdf", "type", "p"], "pv": ["n", "r", "pow", "type", "2", "s", "t", "1", "ff", "m", "fn", "pdf", "f", "v", "div", "dist", "c", "fs", "p"], "fv": ["n", "r", "pow", "type", "2", "s", "t", "1", "pp", "ff", "m", "q", "fn", "pdf", "f", "v", "div", "dist", "c", "fs", "pc", "p"], "type": ["n", "r", "pow", "type", "2", "s", "t", "1", "pp", "ff", "m", "q", "fn", "pdf", "f", "v", "div", "dist", "c", "fs", "pc", "p"]}}
{"code": "public DescribeDocumentVersionsResult describeDocumentVersions(DescribeDocumentVersionsRequest request) {request = beforeClientExecution(request);return executeDescribeDocumentVersions(request);}\n", "substitutes": {"describeDocumentVersions": ["execute", "version", "summarize", "summary", "describe"], "request": ["input", "parent", "argument", "execute", "request", "req", "call", "version", "query", "summarize", "summary", "describe"]}}
{"code": "public ListPublishingDestinationsResult listPublishingDestinations(ListPublishingDestinationsRequest request) {request = beforeClientExecution(request);return executeListPublishingDestinations(request);}\n", "substitutes": {"listPublishingDestinations": ["get", "execute", "list", "lists", "summary"], "request": ["input", "get", "parent", "op", "response", "execute", "list", "lists", "request", "req", "instruction", "call", "query", "summary"]}}
{"code": "public DeleteAccountAliasRequest(String accountAlias) {setAccountAlias(accountAlias);}\n", "substitutes": {"accountAlias": ["alias", "account", "name", "key", "value"]}}
{"code": "public static long[] grow(long[] array) {return grow(array, 1 + array.length);}\n", "substitutes": {"grow": ["copy", "split", "shift", "reverse", "tail", "slice", "sub"], "array": ["array", "copy", "split", "shift", "a", "reverse", "seq", "tail", "args", "b", "slice", "sub", "arr"]}}
{"code": "public String outputToString(Object output) {if (!(output instanceof List)) {return outputs.outputToString((T) output);} else {List<T> outputList = (List<T>) output;StringBuilder b = new StringBuilder();b.append('[');for(int i=0;i<outputList.size();i++) {if (i > 0) {b.append(\", \");}b.append(outputs.outputToString(outputList.get(i)));}b.append(']');return b.toString();}}\n", "substitutes": {"outputToString": ["get", "join", "add", "append", "dump", "transform", "format"], "output": ["obj", "input", "get", "join", "o", "add", "object", "output", "append", "dump", "transform", "format"], "outputList": ["obj", "input", "items", "get", "ls", "join", "o", "add", "object", "output", "append", "dump", "list", "lists", "l", "transform", "format"], "b": ["items", "object", "append", "buffer", "transform", "l", "obj", "input", "format", "s", "join", "o", "output", "result", "add", "builder", "b", "get", "ls", "list", "lists", "dump", "buf"], "i": ["items", "object", "n", "append", "buffer", "transform", "l", "obj", "input", "format", "s", "join", "o", "output", "result", "index", "add", "builder", "b", "i", "j", "k", "get", "ls", "list", "lists", "dump", "buf", "pos"]}}
{"code": "public void notifyDeleteCell(Cell cell) {_bookEvaluator.notifyDeleteCell(new HSSFEvaluationCell((HSSFCell)cell));}\n", "substitutes": {"notifyDeleteCell": ["visit", "add", "accept", "append", "push", "write", "put"], "cell": ["visit", "ce", "cell", "row", "add", "c", "accept", "append", "child", "cc", "push", "write", "el", "put"]}}
{"code": "public StringBuilder replace(int start, int end, String str) {replace0(start, end, str);return this;}\n", "substitutes": {"replace": ["subst", "replace", "replacement", "insert", "sub"], "start": ["subst", "begin", "replace", "index", "replacement", "start", "offset", "insert", "pos", "sub", "beg"], "end": ["subst", "begin", "end", "length", "replace", "index", "n", "replacement", "start", "offset", "count", "insert", "pos", "sub", "len", "beg"], "str": ["n", "start", "value", "sub", "begin", "offset", "len", "beg", "subst", "index", "text", "replacement", "str", "length", "end", "replace", "count", "insert", "pos"]}}
{"code": "public SetIdentityPoolConfigurationResult setIdentityPoolConfiguration(SetIdentityPoolConfigurationRequest request) {request = beforeClientExecution(request);return executeSetIdentityPoolConfiguration(request);}\n", "substitutes": {"setIdentityPoolConfiguration": ["update", "execute", "call", "run", "send"], "request": ["input", "update", "op", "execute", "call", "run", "request", "req", "query", "send", "p"]}}
{"code": "public static double kthSmallest(double[] v, int k) {double r = Double.NaN;int index = k-1; if (v!=null && v.length > index && index >= 0) {Arrays.sort(v);r = v[index];}return r;}\n", "substitutes": {"kthSmallest": ["max", "random", "sort", "min", "median"], "v": ["result", "data", "array", "v", "r", "a", "max", "random", "b", "sort", "arr", "min", "median", "values"], "k": ["data", "n", "r", "a", "values", "array", "sort", "min", "result", "index", "max", "random", "b", "arr", "median", "i", "k", "length", "v", "size"], "r": ["data", "best", "n", "r", "a", "values", "array", "sort", "smallest", "min", "result", "index", "max", "random", "b", "arr", "median", "i", "k", "length", "v", "val", "size"], "index": ["data", "best", "n", "r", "a", "values", "array", "0", "1", "sort", "smallest", "min", "result", "index", "max", "random", "b", "arr", "median", "i", "j", "k", "length", "v", "val", "size"]}}
{"code": "public void set(int index, long value) {final int o = index >>> 5;final int b = index & 31;final int shift = b << 1;blocks[o] = (blocks[o] & ~(3L << shift)) | (value << shift);}\n", "substitutes": {"set": ["add", "increment", "insert", "set", "put"], "index": ["id", "index", "add", "key", "increment", "block", "b", "value", "i", "insert", "offset", "set", "put"], "value": ["id", "index", "v", "add", "key", "increment", "block", "b", "value", "a", "1", "val", "i", "insert", "offset", "set", "put"], "o": ["n", "block", "value", "a", "put", "id", "key", "increment", "1", "offset", "set", "index", "add", "b", "i", "v", "c", "val", "insert"], "b": ["n", "block", "value", "a", "shift", "put", "id", "s", "key", "increment", "1", "offset", "set", "index", "add", "b", "i", "v", "c", "val", "insert"], "shift": ["n", "block", "value", "a", "shift", "put", "id", "s", "key", "increment", "1", "offset", "set", "index", "add", "b", "i", "v", "c", "val", "insert"], "blocks": ["data", "n", "block", "value", "a", "shift", "bits", "buffer", "put", "values", "id", "s", "array", "key", "increment", "1", "offset", "set", "index", "add", "b", "i", "bytes", "v", "c", "val", "insert"]}}
{"code": "public String toString() {if (getChildren() == null || getChildren().size() == 0)return \"<boolean operation='and'/>\";StringBuilder sb = new StringBuilder();sb.append(\"<boolean operation='and'>\");for (QueryNode child : getChildren()) {sb.append(\"\\n\");sb.append(child.toString());}sb.append(\"\\n</boolean>\");return sb.toString();}\n", "substitutes": {"toString": ["length", "get", "build", "op", "expand", "value", "and", "expression", "string", "trim", "operation"], "sb": ["result", "length", "get", "build", "op", "expand", "s", "value", "builder", "and", "buf", "b", "expression", "string", "trim", "operation"], "child": ["n", "value", "operation", "build", "op", "s", "trim", "result", "expand", "builder", "q", "b", "expression", "string", "node", "length", "get", "c", "and", "buf", "child"]}}
{"code": "public int sumTokenSizes(int fromIx, int toIx) {int result = 0;for (int i=fromIx; i<toIx; i++) {result += _ptgs[i].getSize();}return result;}\n", "substitutes": {"sumTokenSizes": ["get", "count", "sizes", "size", "sum"], "fromIx": ["get", "index", "off", "from", "start", "to", "count", "sizes", "pos", "size", "sum"], "toIx": ["length", "get", "end", "index", "off", "from", "start", "to", "count", "sizes", "pos", "size", "len", "sum"], "result": ["result", "length", "get", "end", "s", "index", "off", "from", "start", "to", "count", "total", "sizes", "pos", "size", "len", "sum"], "i": ["start", "to", "sum", "s", "t", "len", "result", "index", "off", "total", "i", "j", "length", "get", "end", "c", "from", "count", "sizes", "pos", "size", "p"]}}
{"code": "public void setReadonly(boolean readonly) {if ( this.readonly && !readonly ) throw new IllegalStateException(\"can't alter readonly IntervalSet\");this.readonly = readonly;}\n", "substitutes": {"setReadonly": ["readable", "reset", "set", "modify", "read"], "readonly": ["internal", "v", "ro", "closed", "r", "value", "readable", "reset", "overwrite", "locked", "allow", "b", "write", "set", "modify", "true", "false", "read"]}}
{"code": "public final void clearConsumingCell(FormulaCellCacheEntry cce) {if(!_consumingCells.remove(cce)) {throw new IllegalStateException(\"Specified formula cell is not consumed by this cell\");}}\n", "substitutes": {"clearConsumingCell": ["discard", "consume", "release", "removed", "remove"], "cce": ["entry", "discard", "consume", "release", "cell", "c", "e", "removed", "ce", "tc", "remove"]}}
{"code": "@Override public List<E> subList(int start, int end) {synchronized (mutex) {return new SynchronizedRandomAccessList<E>(list.subList(start, end), mutex);}}\n", "substitutes": {"subList": ["range", "get", "select", "list", "iterator", "limit", "slice", "remove"], "start": ["range", "get", "begin", "select", "list", "start", "offset", "iterator", "pos", "limit", "slice", "remove", "beg"], "end": ["range", "get", "begin", "end", "select", "list", "start", "offset", "count", "iterator", "size", "pos", "limit", "slice", "stop", "remove", "beg"]}}
{"code": "public FileHeader getFileHeader() {return file;}\n", "substitutes": {"getFileHeader": ["File", "current", "file", "get"]}}
{"code": "public AttachLoadBalancersResult attachLoadBalancers(AttachLoadBalancersRequest request) {request = beforeClientExecution(request);return executeAttachLoadBalancers(request);}\n", "substitutes": {"attachLoadBalancers": ["create", "execute", "attach", "call", "send"], "request": ["input", "create", "argument", "execute", "attach", "resource", "call", "request", "req", "instruction", "send", "p"]}}
{"code": "public InitiateJobRequest(String accountId, String vaultName, JobParameters jobParameters) {setAccountId(accountId);setVaultName(vaultName);setJobParameters(jobParameters);}\n", "substitutes": {"accountId": ["id", "identity", "account", "name", "username"], "vaultName": ["region", "id", "identity", "account", "name", "vault", "url", "username", "namespace"], "jobParameters": ["region", "properties", "id", "params", "identity", "account", "name", "vault", "url", "job", "body", "username", "namespace", "parameters", "p"]}}
{"code": "public String toString() {return \"SPL\";}\n", "substitutes": {"toString": ["SPL", "split", "s", "S"]}}
{"code": "public ReplaceableAttribute(String name, String value, Boolean replace) {setName(name);setValue(value);setReplace(replace);}\n", "substitutes": {"name": ["key", "name", "field", "property", "attribute"], "value": ["v", "text", "key", "name", "value", "field", "property", "val", "content", "attribute"], "replace": ["replace", "v", "text", "key", "name", "value", "replacement", "field", "property", "replaced", "repl", "val", "overwrite", "content", "true", "attribute", "Replace"]}}
{"code": "public final void add(IndexableField field) {fields.add(field);}\n", "substitutes": {"add": ["put", "offer", "index", "add", "field", "push", "remove"], "field": ["put", "offer", "f", "index", "s", "w", "add", "e", "field", "i", "push", "remove"]}}
{"code": "public DeleteStackSetResult deleteStackSet(DeleteStackSetRequest request) {request = beforeClientExecution(request);return executeDeleteStackSet(request);}\n", "substitutes": {"deleteStackSet": ["create", "execute", "run", "delete", "send"], "request": ["input", "create", "parent", "argument", "execute", "run", "request", "call", "req", "delete", "query", "send", "p"]}}
{"code": "public GetRepoBuildRuleListRequest() {super(\"cr\", \"2016-06-07\", \"GetRepoBuildRuleList\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/rules\");setMethod(MethodType.GET);}\n", "substitutes": {}}
{"code": "public SparseArray(int initialCapacity) {initialCapacity = ArrayUtils.idealIntArraySize(initialCapacity);mKeys = new int[initialCapacity];mValues = new Object[initialCapacity];mSize = 0;}\n", "substitutes": {"initialCapacity": ["length", "s", "n", "capacity", "N", "0", "count", "size", "len"], "mKeys": ["length", "s", "index", "elements", "n", "capacity", "N", "0", "count", "indexes", "size", "len", "indices"], "mValues": ["items", "length", "s", "index", "elements", "n", "capacity", "N", "0", "Values", "count", "indexes", "objects", "size", "len", "indices", "values"], "mSize": ["items", "n", "capacity", "position", "elements", "indices", "values", "s", "0", "Values", "indexes", "objects", "len", "index", "i", "length", "N", "count", "size"]}}
{"code": "public InvokeServiceRequest() {super(\"industry-brain\", \"2018-07-12\", \"InvokeService\");setMethod(MethodType.POST);}\n", "substitutes": {}}
{"code": "public ListAlbumPhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"ListAlbumPhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n", "substitutes": {}}
{"code": "public boolean hasPrevious() {return link != list.voidLink;}\n", "substitutes": {"hasPrevious": ["next", "flag", "link", "visible", "main"]}}
{"code": "public DeleteHsmConfigurationResult deleteHsmConfiguration(DeleteHsmConfigurationRequest request) {request = beforeClientExecution(request);return executeDeleteHsmConfiguration(request);}\n", "substitutes": {"deleteHsmConfiguration": ["begin", "execute", "run", "delete", "complete"], "request": ["input", "begin", "parent", "execute", "resource", "run", "request", "call", "req", "delete", "query", "p", "complete"]}}
{"code": "public CreateLoadBalancerRequest(String loadBalancerName) {setLoadBalancerName(loadBalancerName);}\n", "substitutes": {"loadBalancerName": ["v", "n", "key", "name", "resource", "value", "string"]}}
{"code": "public String getUserInfo() {return decode(userInfo);}\n", "substitutes": {"getUserInfo": ["info", "get", "user", "decode", "encode"]}}
{"code": "public TagAttendeeResult tagAttendee(TagAttendeeRequest request) {request = beforeClientExecution(request);return executeTagAttendee(request);}\n", "substitutes": {"tagAttendee": ["create", "update", "execute", "tags", "tag"], "request": ["input", "create", "update", "parent", "response", "execute", "resource", "tags", "tag", "request", "call", "req", "argument"]}}
{"code": "public String getRefName() {return name;}\n", "substitutes": {"getRefName": ["n", "name", "Name", "get"]}}
{"code": "public SpanNearQuery build() {return new SpanNearQuery(clauses.toArray(new SpanQuery[clauses.size()]), slop, ordered);}\n", "substitutes": {"build": ["create", "span", "near", "nearest", "query"]}}
{"code": "public boolean isSubTotal(int rowIndex, int columnIndex) {return false;}\n", "substitutes": {"isSubTotal": ["test", "exclude", "exists", "contains", "remove"], "rowIndex": ["line", "index", "test", "exclude", "row", "exists", "table", "rows", "contains", "remove"], "columnIndex": ["line", "column", "index", "test", "exclude", "row", "exists", "count", "table", "rows", "columns", "contains", "remove", "col"]}}
{"code": "public DescribeDBProxiesResult describeDBProxies(DescribeDBProxiesRequest request) {request = beforeClientExecution(request);return executeDescribeDBProxies(request);}\n", "substitutes": {"describeDBProxies": ["list", "execute", "call", "request", "describe"], "request": ["input", "argument", "list", "execute", "call", "request", "req", "instruction", "query", "describe"]}}
{"code": "public GetVoiceConnectorProxyResult getVoiceConnectorProxy(GetVoiceConnectorProxyRequest request) {request = beforeClientExecution(request);return executeGetVoiceConnectorProxy(request);}\n", "substitutes": {"getVoiceConnectorProxy": ["get", "execute", "list", "call", "proxy"], "request": ["input", "get", "parent", "execute", "list", "resource", "call", "request", "req", "query", "proxy", "p"]}}
{"code": "public WindowCacheConfig fromConfig(Config rc) {setPackedGitUseStrongRefs(rc.getBoolean(CONFIG_CORE_SECTION,CONFIG_KEY_PACKED_GIT_USE_STRONGREFS,isPackedGitUseStrongRefs()));setPackedGitOpenFiles(rc.getInt(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_OPENFILES, getPackedGitOpenFiles()));setPackedGitLimit(rc.getLong(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_LIMIT, getPackedGitLimit()));setPackedGitWindowSize(rc.getInt(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_WINDOWSIZE, getPackedGitWindowSize()));setPackedGitMMAP(rc.getBoolean(CONFIG_CORE_SECTION, null,CONFIG_KEY_PACKED_GIT_MMAP, isPackedGitMMAP()));setDeltaBaseCacheLimit(rc.getInt(CONFIG_CORE_SECTION, null,CONFIG_KEY_DELTA_BASE_CACHE_LIMIT, getDeltaBaseCacheLimit()));long maxMem = Runtime.getRuntime().maxMemory();long sft = rc.getLong(CONFIG_CORE_SECTION, null,CONFIG_KEY_STREAM_FILE_TRESHOLD, getStreamFileThreshold());sft = Math.min(sft, maxMem / 4); sft = Math.min(sft, Integer.MAX_VALUE); setStreamFileThreshold((int) sft);return this;}\n", "substitutes": {"fromConfig": ["build", "config", "merge", "init", "configure"], "rc": ["build", "config", "sc", "merge", "Config", "c", "configuration", "init", "conf", "configure"], "maxMem": ["build", "config", "sc", "m", "merge", "Config", "c", "configuration", "max", "mem", "memory", "init", "mm", "conf", "configure"], "sft": ["config", "tolerance", "threshold", "build", "t", "mem", "memory", "conf", "min", "Config", "sc", "m", "merge", "thr", "max", "window", "mm", "thresholds", "th", "c", "configuration", "init", "configure"]}}
{"code": "public static Date getJavaDate(double date) {return getJavaDate(date, false, null, false);}\n", "substitutes": {"getJavaDate": ["date", "create", "parse", "of", "floor", "format"], "date": ["date", "create", "parse", "number", "value", "precision", "of", "val", "d", "floor", "format"]}}
{"code": "public StartPersonTrackingResult startPersonTracking(StartPersonTrackingRequest request) {request = beforeClientExecution(request);return executeStartPersonTracking(request);}\n", "substitutes": {"startPersonTracking": ["track", "execute", "start", "run", "call"], "request": ["input", "track", "parent", "execute", "resource", "start", "run", "call", "request", "req", "query", "argument", "p"]}}
{"code": "@Override public int size() {return totalSize;}\n", "substitutes": {"size": ["get", "count", "remaining", "total", "size"]}}
{"code": "public GetRouteResult getRoute(GetRouteRequest request) {request = beforeClientExecution(request);return executeGetRoute(request);}\n", "substitutes": {"getRoute": ["get", "route", "execute", "call", "run"], "request": ["input", "get", "parent", "route", "execute", "call", "run", "request", "req", "query", "argument", "p"]}}
{"code": "public DeleteClusterResult deleteCluster(DeleteClusterRequest request) {request = beforeClientExecution(request);return executeDeleteCluster(request);}\n", "substitutes": {"deleteCluster": ["destroy", "execute", "run", "delete", "complete"], "request": ["input", "parent", "destroy", "execute", "resource", "run", "request", "call", "req", "delete", "query", "p", "complete"]}}
{"code": "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[MMS]\\n\");buffer.append(\"    .addMenu        = \").append(Integer.toHexString(getAddMenuCount())).append(\"\\n\");buffer.append(\"    .delMenu        = \").append(Integer.toHexString(getDelMenuCount())).append(\"\\n\");buffer.append(\"[/MMS]\\n\");return buffer.toString();}\n", "substitutes": {"toString": ["length", "build", "trim", "generate", "reverse", "summary", "html", "string", "render"], "buffer": ["result", "length", "build", "s", "trim", "generate", "builder", "reverse", "buf", "b", "summary", "html", "string", "render"]}}
{"code": "public FileBasedConfig(Config base, File cfgLocation, FS fs) {super(base);configFile = cfgLocation;this.fs = fs;this.snapshot = FileSnapshot.DIRTY;this.hash = ObjectId.zeroId();}\n", "substitutes": {"base": ["config", "configuration", "c", "conf", "Config"], "cfgLocation": ["dir", "config", "file", "f", "configuration", "c", "cf", "conf", "Config"], "fs": ["dir", "config", "file", "f", "configuration", "c", "cf", "filesystem", "fs", "conf", "FS", "root", "Config"], "configFile": ["dir", "config", "file", "f", "path", "base", "configuration", "c", "cf", "filesystem", "fs", "conf", "location", "FS", "root", "Config", "locations"], "snapshot": ["config", "file", "base", "directory", "type", "location", "FS", "dir", "cf", "conf", "root", "filesystem", "Config", "state", "snapshot", "f", "path", "configuration", "c", "fs", "locations"], "hash": ["config", "file", "object", "identifier", "base", "directory", "type", "location", "FS", "dir", "id", "identity", "key", "cf", "conf", "root", "filesystem", "Config", "state", "snapshot", "f", "path", "configuration", "c", "fs", "locations"]}}
{"code": "public int following(int pos) {if (pos < text.getBeginIndex() || pos > text.getEndIndex()) {throw new IllegalArgumentException(\"offset out of bounds\");} else if (0 == sentenceStarts.length) {text.setIndex(text.getBeginIndex());return DONE;} else if (pos >= sentenceStarts[sentenceStarts.length - 1]) {text.setIndex(text.getEndIndex());currentSentence = sentenceStarts.length - 1;return DONE;} else { currentSentence = (sentenceStarts.length - 1) / 2; moveToSentenceAt(pos, 0, sentenceStarts.length - 2);text.setIndex(sentenceStarts[++currentSentence]);return current();}}\n", "substitutes": {"following": ["next", "skip", "index", "current", "find"], "pos": ["next", "skip", "end", "index", "off", "text", "current", "0", "start", "find", "pos", "offset", "i"], "currentSentence": ["next", "skip", "end", "index", "off", "text", "current", "0", "start", "find", "position", "j", "pos", "offset", "i"]}}
{"code": "public UpdateParameterGroupResult updateParameterGroup(UpdateParameterGroupRequest request) {request = beforeClientExecution(request);return executeUpdateParameterGroup(request);}\n", "substitutes": {"updateParameterGroup": ["update", "execute", "run", "call", "put"], "request": ["input", "update", "parent", "execute", "run", "call", "request", "req", "query", "argument", "p", "put"]}}
{"code": "public SeriesChartGroupIndexRecord clone() {return copy();}\n", "substitutes": {"clone": ["get", "duplicate", "copy", "clone", "Copy"]}}
{"code": "public static double calcDistanceFromErrPct(Shape shape, double distErrPct, SpatialContext ctx) {if (distErrPct < 0 || distErrPct > 0.5) {throw new IllegalArgumentException(\"distErrPct \" + distErrPct + \" must be between [0 to 0.5]\");}if (distErrPct == 0 || shape instanceof Point) {return 0;}Rectangle bbox = shape.getBoundingBox();Point ctr = bbox.getCenter();double y = (ctr.getY() >= 0 ? bbox.getMaxY() : bbox.getMinY());double diagonalDist = ctx.getDistCalc().distance(ctr, bbox.getMaxX(), y);return diagonalDist * distErrPct;}\n", "substitutes": {"calcDistanceFromErrPct": ["distances", "dist", "radius", "density", "distance"], "shape": ["s", "distances", "shape", "dist", "rect", "r", "bounds", "p", "radius", "density", "b", "distance"], "distErrPct": ["tolerance", "r", "error", "density", "s", "2", "shape", "rect", "distance", "x", "radius", "percent", "b", "d", "percentage", "f", "distances", "dist", "bounds", "c", "p"], "ctx": ["config", "tolerance", "r", "error", "cx", "density", "context", "s", "2", "shape", "rect", "distance", "sc", "x", "radius", "percent", "b", "d", "percentage", "f", "distances", "dist", "bounds", "c", "pc", "p"], "bbox": ["config", "tolerance", "r", "error", "cx", "density", "context", "s", "2", "shape", "rect", "distance", "sc", "x", "box", "radius", "percent", "b", "bound", "d", "percentage", "f", "distances", "dist", "bounds", "c", "pc", "p"], "ctr": ["centre", "config", "tolerance", "r", "error", "cx", "density", "context", "s", "2", "shape", "rect", "origin", "distance", "xx", "sc", "x", "box", "point", "center", "pt", "radius", "percent", "b", "bound", "d", "percentage", "f", "distances", "X", "dist", "bounds", "c", "pc", "p"], "y": ["centre", "config", "tolerance", "r", "error", "cx", "density", "context", "s", "2", "Y", "shape", "rect", "origin", "min", "distance", "xx", "sc", "x", "box", "y", "point", "center", "max", "pt", "radius", "percent", "b", "bound", "top", "d", "percentage", "dy", "f", "distances", "X", "dist", "bounds", "c", "ay", "pc", "p"], "diagonalDist": ["centre", "config", "tolerance", "r", "error", "cx", "density", "dx", "context", "s", "2", "Y", "shape", "rect", "origin", "min", "distance", "xx", "sc", "x", "box", "y", "point", "center", "max", "pt", "radius", "percent", "b", "bound", "top", "d", "percentage", "dy", "f", "distances", "X", "dist", "bounds", "c", "ay", "pc", "p"]}}
{"code": "public int codePointAt(int index) {if (index < 0 || index >= count) {throw indexAndLength(index);}return Character.codePointAt(value, index, count);}\n", "substitutes": {"codePointAt": ["length", "get", "char", "index", "escape", "at", "count", "digit"], "index": ["length", "get", "char", "index", "off", "escape", "c", "value", "0", "at", "count", "1", "start", "pos", "offset", "digit", "i"]}}
{"code": "public void setPasswordVerifier(int passwordVerifier) {this.passwordVerifier = passwordVerifier;}\n", "substitutes": {"setPasswordVerifier": ["initialize", "verify", "reset", "init", "set"], "passwordVerifier": ["initialize", "v", "ver", "verify", "value", "reset", "password", "init", "val", "version", "set"]}}
{"code": "public ListVaultsRequest(String accountId) {setAccountId(accountId);}\n", "substitutes": {"accountId": ["id", "account", "name", "key", "value", "username"]}}
{"code": "public SquashMessageFormatter() {dateFormatter = new GitDateFormatter(Format.DEFAULT);}\n", "substitutes": {"dateFormatter": ["form", "f", "atter", "formatting", "format"]}}
{"code": "public GetVideoCoverRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"GetVideoCover\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n", "substitutes": {}}
{"code": "public int lastIndexOf(Object object) {int pos = size;Link<E> link = voidLink.previous;if (object != null) {while (link != voidLink) {pos--;if (object.equals(link.data)) {return pos;}link = link.previous;}} else {while (link != voidLink) {pos--;if (link.data == null) {return pos;}link = link.previous;}}return -1;}\n", "substitutes": {"lastIndexOf": ["index", "find", "position", "search", "contains"], "object": ["obj", "element", "data", "index", "link", "object", "o", "item", "e", "value", "find", "position", "search", "contains"], "pos": ["data", "link", "object", "n", "e", "value", "position", "contains", "obj", "o", "0", "element", "index", "size", "search", "i", "find", "count", "pos", "item"], "link": ["data", "link", "object", "n", "e", "value", "position", "previous", "contains", "prev", "l", "obj", "o", "linked", "0", "element", "next", "index", "links", "size", "search", "i", "find", "count", "pos", "item"]}}
{"code": "public DescribeSpotFleetRequestsResult describeSpotFleetRequests(DescribeSpotFleetRequestsRequest request) {request = beforeClientExecution(request);return executeDescribeSpotFleetRequests(request);}\n", "substitutes": {"describeSpotFleetRequests": ["execute", "list", "call", "request", "describe"], "request": ["input", "parent", "argument", "execute", "list", "call", "request", "req", "instruction", "query", "describe"]}}
{"code": "public IndexFacesResult indexFaces(IndexFacesRequest request) {request = beforeClientExecution(request);return executeIndexFaces(request);}\n", "substitutes": {"indexFaces": ["index", "execute", "list", "call", "search"], "request": ["input", "parent", "index", "execute", "list", "call", "request", "req", "query", "argument", "search", "p"]}}
{"code": "public RuleBasedBreakIterator getBreakIterator(int script) {switch(script) {case UScript.JAPANESE: return (RuleBasedBreakIterator)cjkBreakIterator.clone();case UScript.MYANMAR:if (myanmarAsWords) {return (RuleBasedBreakIterator)defaultBreakIterator.clone();} else {return (RuleBasedBreakIterator)myanmarSyllableIterator.clone();}default: return (RuleBasedBreakIterator)defaultBreakIterator.clone();}}\n", "substitutes": {"getBreakIterator": ["clone", "create", "get", "copy"], "script": ["kind", "create", "get", "copy", "clone", "tag", "t", "script", "type", "rule"]}}
{"code": "public String toString(){StringBuilder b = new StringBuilder();b.append(\"[DCONREF]\\n\");b.append(\"    .ref\\n\");b.append(\"        .firstrow   = \").append(firstRow).append(\"\\n\");b.append(\"        .lastrow    = \").append(lastRow).append(\"\\n\");b.append(\"        .firstcol   = \").append(firstCol).append(\"\\n\");b.append(\"        .lastcol    = \").append(lastCol).append(\"\\n\");b.append(\"    .cch            = \").append(charCount).append(\"\\n\");b.append(\"    .stFile\\n\");b.append(\"        .h          = \").append(charType).append(\"\\n\");b.append(\"        .rgb        = \").append(getReadablePath()).append(\"\\n\");b.append(\"[/DCONREF]\\n\");return b.toString();}\n", "substitutes": {"toString": ["href", "length", "build", "trim", "reference", "ref", "to", "string", "render"], "b": ["result", "href", "length", "build", "s", "trim", "reference", "builder", "ref", "to", "buf", "b", "buffer", "string", "render"]}}
{"code": "public int getPackedGitOpenFiles() {return packedGitOpenFiles;}\n", "substitutes": {"getPackedGitOpenFiles": ["size", "Files", "files", "f"]}}
{"code": "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[FEATURE HEADER]\\n\");buffer.append(\"[/FEATURE HEADER]\\n\");return buffer.toString();}\n", "substitutes": {"toString": ["length", "description", "get", "build", "name", "header", "reverse", "String", "string", "trim"], "buffer": ["result", "length", "description", "get", "build", "s", "name", "builder", "header", "reverse", "buf", "buffer", "b", "String", "string", "trim"]}}
{"code": "public static byte[] getToUnicodeLE(String string) {return string.getBytes(UTF16LE);}\n", "substitutes": {"getToUnicodeLE": ["encode", "decode", "bytes", "Bytes"], "string": ["input", "s", "bytes", "text", "decode", "value", "Bytes", "encode", "str", "string"]}}
{"code": "public final List<String> getFooterLines(String keyName) {return getFooterLines(new FooterKey(keyName));}\n", "substitutes": {"getFooterLines": ["get", "key", "list", "head", "header", "headers", "keys"], "keyName": ["get", "id", "key", "list", "head", "name", "prefix", "header", "title", "headers", "keys"]}}
{"code": "public void refresh() {super.refresh();clearReferences();}\n", "substitutes": {"refresh": ["destroy", "close", "stop", "free", "clear", "remove"]}}
{"code": "public float get(int index) {checkIndex(index);return byteBuffer.getFloat(index * SizeOf.FLOAT);}\n", "substitutes": {"get": ["Float", "get", "f"], "index": ["get", "f", "index", "Float", "position", "indexes", "pos", "offset", "i"]}}
{"code": "public DeleteDetectorResult deleteDetector(DeleteDetectorRequest request) {request = beforeClientExecution(request);return executeDeleteDetector(request);}\n", "substitutes": {"deleteDetector": ["update", "begin", "execute", "run", "delete"], "request": ["input", "update", "begin", "parent", "execute", "resource", "run", "request", "call", "req", "delete", "query", "parameters", "p"]}}
{"code": "public int[] grow() {assert bytesStart != null;return bytesStart = ArrayUtil.grow(bytesStart, bytesStart.length + 1);}\n", "substitutes": {"grow": ["next", "wrap", "get", "end", "resize", "copy", "grow", "remove", "read"], "bytesStart": ["next", "wrap", "result", "get", "end", "resize", "array", "copy", "Array", "list", "ret", "grow", "arr", "buffer", "remove", "read"]}}
{"code": "public ListExclusionsResult listExclusions(ListExclusionsRequest request) {request = beforeClientExecution(request);return executeListExclusions(request);}\n", "substitutes": {"listExclusions": ["get", "index", "execute", "list", "lists"], "request": ["input", "get", "parent", "index", "response", "execute", "list", "lists", "request", "req", "call", "query", "argument"]}}
{"code": "public static SpatialStrategy getSpatialStrategy(int roundNumber) {SpatialStrategy result = spatialStrategyCache.get(roundNumber);if (result == null) {throw new IllegalStateException(\"Strategy should have been init'ed by SpatialDocMaker by now\");}return result;}\n", "substitutes": {"getSpatialStrategy": ["create", "get", "build", "find", "init"], "roundNumber": ["create", "get", "build", "id", "index", "identifier", "key", "name", "find", "init", "type"], "result": ["result", "create", "get", "build", "id", "index", "s", "identifier", "key", "name", "strategy", "find", "cs", "init", "sp", "type"]}}
{"code": "public DBCluster restoreDBClusterToPointInTime(RestoreDBClusterToPointInTimeRequest request) {request = beforeClientExecution(request);return executeRestoreDBClusterToPointInTime(request);}\n", "substitutes": {"restoreDBClusterToPointInTime": ["create", "restore", "execute", "run", "restart"], "request": ["input", "create", "restore", "execute", "resource", "Request", "run", "request", "call", "req", "restart", "instruction", "query", "argument"]}}
{"code": "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_categoryDataType);out.writeShort(field_2_valuesDataType);out.writeShort(field_3_numCategories);out.writeShort(field_4_numValues);out.writeShort(field_5_bubbleSeriesType);out.writeShort(field_6_numBubbleValues);}\n", "substitutes": {"serialize": ["record", "store", "encode", "flush", "write"], "out": ["bos", "stream", "w", "record", "o", "output", "store", "encode", "flush", "out", "write", "os"]}}
{"code": "public PostAgentProfileResult postAgentProfile(PostAgentProfileRequest request) {request = beforeClientExecution(request);return executePostAgentProfile(request);}\n", "substitutes": {"postAgentProfile": ["execute", "call", "run", "send", "profile"], "request": ["input", "parent", "argument", "execute", "call", "run", "request", "req", "query", "send", "parameters", "profile"]}}
{"code": "public ParseTreePattern compileParseTreePattern(String pattern, int patternRuleIndex) {if ( getTokenStream()!=null ) {TokenSource tokenSource = getTokenStream().getTokenSource();if ( tokenSource instanceof Lexer ) {Lexer lexer = (Lexer)tokenSource;return compileParseTreePattern(pattern, patternRuleIndex, lexer);}}throw new UnsupportedOperationException(\"Parser can't discover a lexer to use\");}\n", "substitutes": {"compileParseTreePattern": ["create", "parse", "get", "parser", "pattern", "match"], "pattern": ["create", "parse", "get", "regex", "text", "name", "parser", "pattern", "expression", "string", "match"], "patternRuleIndex": ["create", "parse", "get", "regex", "text", "name", "depth", "parser", "indent", "level", "flags", "offset", "pattern", "expression", "string", "match"], "tokenSource": ["create", "regex", "s", "name", "tokens", "indent", "level", "offset", "pattern", "token", "parse", "text", "parser", "src", "flags", "expression", "string", "get", "source", "depth", "match"], "lexer": ["create", "regex", "l", "s", "name", "tokens", "indent", "level", "offset", "pattern", "token", "parse", "text", "parser", "src", "flags", "expression", "reader", "string", "lex", "get", "source", "depth", "match"]}}
{"code": "public BacktrackDBClusterResult backtrackDBCluster(BacktrackDBClusterRequest request) {request = beforeClientExecution(request);return executeBacktrackDBCluster(request);}\n", "substitutes": {"backtrackDBCluster": ["cluster", "create", "execute", "run", "call"], "request": ["input", "cluster", "create", "execute", "run", "call", "request", "instruction", "req", "query", "argument", "p"]}}
{"code": "public String getName() {return strategyName;}\n", "substitutes": {"getName": ["name", "strategy", "named", "get"]}}
{"code": "public void copyTo(byte[] b, int o) {formatHexByte(b, o + 0, w1);formatHexByte(b, o + 8, w2);formatHexByte(b, o + 16, w3);formatHexByte(b, o + 24, w4);formatHexByte(b, o + 32, w5);}\n", "substitutes": {"copyTo": ["append", "encode", "print", "write", "format"], "b": ["data", "s", "w", "append", "a", "encode", "buf", "b", "print", "buffer", "write", "format"], "o": ["data", "s", "w", "index", "n", "append", "a", "offset", "encode", "buf", "pos", "b", "print", "buffer", "write", "i", "format"]}}
{"code": "public static final IntList lineMap(byte[] buf, int ptr, int end) {IntList map = new IntList((end - ptr) / 36);map.fillTo(1, Integer.MIN_VALUE);for (; ptr < end; ptr = nextLF(buf, ptr)) {map.add(ptr);}map.add(end);return map;}\n", "substitutes": {"lineMap": ["next", "range", "list", "split", "tail"], "buf": ["next", "line", "range", "data", "input", "bytes", "list", "split", "buf", "tail", "b", "buffer"], "ptr": ["data", "split", "start", "tail", "buffer", "l", "input", "line", "begin", "1", "offset", "beg", "next", "range", "index", "b", "i", "end", "bytes", "list", "buf", "pos"], "end": ["data", "n", "split", "start", "tail", "buffer", "l", "input", "line", "begin", "1", "offset", "len", "beg", "next", "range", "index", "max", "b", "36", "i", "width", "length", "end", "bytes", "list", "buf", "pos"], "map": ["data", "n", "split", "start", "tail", "buffer", "l", "input", "line", "begin", "1", "offset", "len", "beg", "next", "result", "range", "res", "index", "ret", "max", "b", "36", "i", "width", "length", "end", "bytes", "list", "buf", "pos"]}}
{"code": "public Set<ObjectId> getAdditionalHaves() {return Collections.emptySet();}\n", "substitutes": {"getAdditionalHaves": ["absent", "nil", "none", "empty", "null"]}}
{"code": "public synchronized long ramBytesUsed() {long sizeInBytes = BASE_RAM_BYTES_USED + fields.size() * 2 * RamUsageEstimator.NUM_BYTES_OBJECT_REF;for(SimpleTextTerms simpleTextTerms : termsCache.values()) {sizeInBytes += (simpleTextTerms!=null) ? simpleTextTerms.ramBytesUsed() : 0;}return sizeInBytes;}\n", "substitutes": {"ramBytesUsed": ["length", "get", "bytes", "capacity", "count", "size"], "sizeInBytes": ["result", "usage", "length", "get", "res", "bytes", "capacity", "ret", "used", "count", "total", "size"], "simpleTextTerms": ["result", "usage", "length", "get", "res", "s", "bytes", "m", "capacity", "ret", "used", "t", "count", "term", "total", "terms", "size"]}}
{"code": "public String toXml(String tab) {StringBuilder builder = new StringBuilder();builder.append(tab).append(\"<\").append(getRecordName()).append(\">\\n\");for (EscherRecord escherRecord : getEscherRecords()) {builder.append(escherRecord.toXml(tab + \"\\t\"));}builder.append(tab).append(\"</\").append(getRecordName()).append(\">\\n\");return builder.toString();}\n", "substitutes": {"toXml": ["get", "join", "escape", "append", "indent", "print", "format"], "tab": ["get", "join", "name", "escape", "append", "prefix", "tag", "indent", "namespace", "print", "encoding", "xml", "format"], "builder": ["result", "get", "s", "join", "name", "escape", "append", "prefix", "tag", "builder", "buf", "indent", "namespace", "b", "print", "encoding", "xml", "format"], "escherRecord": ["append", "r", "namespace", "xml", "format", "s", "join", "record", "name", "indent", "encoding", "result", "rec", "escape", "prefix", "tag", "builder", "re", "b", "get", "c", "buf", "print"]}}
{"code": "public TokenStream create(TokenStream input) {return new GalicianMinimalStemFilter(input);}\n", "substitutes": {"create": ["convert", "create", "apply", "build", "filter"], "input": ["convert", "create", "input", "apply", "build", "token", "s", "filter", "tokens", "stream"]}}
{"code": "public String toString() {StringBuilder r = new StringBuilder();r.append(\"Commit\");r.append(\"={\\n\");r.append(\"tree \");r.append(treeId != null ? treeId.name() : \"NOT_SET\");r.append(\"\\n\");for (ObjectId p : parentIds) {r.append(\"parent \");r.append(p.name());r.append(\"\\n\");}r.append(\"author \");r.append(author != null ? author.toString() : \"NOT_SET\");r.append(\"\\n\");r.append(\"committer \");r.append(committer != null ? committer.toString() : \"NOT_SET\");r.append(\"\\n\");r.append(\"gpgSignature \");r.append(gpgSignature != null ? gpgSignature.toString() : \"NOT_SET\");r.append(\"\\n\");if (encoding != null && !References.isSameObject(encoding, UTF_8)) {r.append(\"encoding \");r.append(encoding.name());r.append(\"\\n\");}r.append(\"\\n\");r.append(message != null ? message : \"\");r.append(\"}\");return r.toString();}\n", "substitutes": {"toString": ["length", "Commit", "build", "text", "name", "value", "reverse", "commit", "named", "describe", "type", "string", "trim"], "r": ["value", "reverse", "named", "type", "Commit", "build", "s", "name", "msg", "trim", "result", "text", "builder", "b", "string", "length", "buf", "commit", "describe"], "p": ["value", "reverse", "named", "type", "pid", "Commit", "build", "s", "id", "name", "msg", "trim", "result", "text", "builder", "b", "string", "i", "length", "parent", "c", "buf", "commit", "describe", "p"]}}
{"code": "public IndicNormalizationFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n", "substitutes": {}}
{"code": "public OptionGroup createOptionGroup(CreateOptionGroupRequest request) {request = beforeClientExecution(request);return executeCreateOptionGroup(request);}\n", "substitutes": {"createOptionGroup": ["create", "apply", "execute", "Create", "call"], "request": ["input", "create", "apply", "parent", "execute", "Create", "resource", "call", "request", "req", "argument", "p"]}}
{"code": "public AssociateMemberAccountResult associateMemberAccount(AssociateMemberAccountRequest request) {request = beforeClientExecution(request);return executeAssociateMemberAccount(request);}\n", "substitutes": {"associateMemberAccount": ["create", "update", "association", "execute", "associate"], "request": ["input", "create", "update", "parent", "association", "execute", "request", "req", "call", "query", "associate", "argument"]}}
{"code": "public void run() {doRefreshProgress(mId, mProgress, mFromUser, true);mRefreshProgressRunnable = this;}\n", "substitutes": {"run": ["refresh", "run", "reset", "init", "dispose"]}}
{"code": "public SetTerminationProtectionResult setTerminationProtection(SetTerminationProtectionRequest request) {request = beforeClientExecution(request);return executeSetTerminationProtection(request);}\n", "substitutes": {"setTerminationProtection": ["update", "apply", "execute", "call", "run"], "request": ["input", "update", "apply", "parent", "execute", "call", "run", "request", "req", "query", "instruction", "argument"]}}
{"code": "public String getErrorHeader(RecognitionException e) {int line = e.getOffendingToken().getLine();int charPositionInLine = e.getOffendingToken().getCharPositionInLine();return \"line \"+line+\":\"+charPositionInLine;}\n", "substitutes": {"getErrorHeader": ["justification", "error", "exception", "recover", "format"], "e": ["token", "justification", "e", "t", "error", "re", "exception", "te", "ex", "recover", "format"], "line": ["token", "line", "lines", "justification", "e", "t", "error", "re", "lin", "exception", "te", "ex", "l", "recover", "i", "format"], "charPositionInLine": ["column", "e", "position", "error", "lin", "l", "format", "line", "col", "justification", "t", "offset", "recover", "token", "re", "te", "i", "lines", "ch", "pos", "exception", "ex"]}}
{"code": "public CharBuffer asReadOnlyBuffer() {CharToByteBufferAdapter buf = new CharToByteBufferAdapter(byteBuffer.asReadOnlyBuffer());buf.limit = limit;buf.position = position;buf.mark = mark;buf.byteBuffer.order = byteBuffer.order;return buf;}\n", "substitutes": {"asReadOnlyBuffer": ["create", "get", "array", "capacity", "allocate", "limit", "alloc", "buffer"], "buf": ["result", "create", "adapt", "get", "array", "capacity", "this", "a", "allocate", "buf", "limit", "alloc", "buffer", "adapter", "av"], "limit": ["create", "capacity", "a", "position", "alloc", "buffer", "type", "av", "adapt", "array", "name", "this", "allocate", "encoding", "result", "flags", "limit", "adapter", "length", "get", "buf"], "position": ["create", "capacity", "a", "start", "position", "alloc", "buffer", "type", "av", "adapt", "array", "name", "this", "allocate", "offset", "encoding", "result", "flags", "limit", "adapter", "skip", "length", "get", "buf"], "mark": ["create", "capacity", "a", "start", "position", "alloc", "buffer", "type", "av", "adapt", "array", "name", "this", "allocate", "offset", "encoding", "result", "flags", "limit", "adapter", "skip", "length", "get", "buf"], "byteBuffer": ["create", "config", "capacity", "a", "start", "position", "alloc", "buffer", "type", "delegate", "av", "adapt", "array", "s", "name", "this", "allocate", "offset", "encoding", "result", "chars", "flags", "limit", "adapter", "skip", "length", "get", "source", "buf", "options"], "order": ["create", "config", "capacity", "a", "start", "position", "alloc", "buffer", "type", "delegate", "av", "adapt", "array", "s", "name", "this", "allocate", "offset", "encoding", "result", "chars", "flags", "limit", "adapter", "skip", "length", "get", "source", "remaining", "buf", "options"]}}
{"code": "public StopSentimentDetectionJobResult stopSentimentDetectionJob(StopSentimentDetectionJobRequest request) {request = beforeClientExecution(request);return executeStopSentimentDetectionJob(request);}\n", "substitutes": {"stopSentimentDetectionJob": ["execute", "run", "call", "pause", "stop"], "request": ["input", "parent", "execute", "run", "call", "request", "req", "instruction", "query", "pause", "argument", "stop", "p"]}}
{"code": "public ObjectIdSubclassMap<ObjectId> getNewObjectIds() {if (newObjectIds != null)return newObjectIds;return new ObjectIdSubclassMap<>();}\n", "substitutes": {"getNewObjectIds": ["create", "get", "build", "copy", "clone"]}}
{"code": "public void clear() {hash = hash(new byte[0]);super.clear();}\n", "substitutes": {"clear": ["initialize", "start", "reset", "init", "close", "clear"], "hash": ["initialize", "array", "bytes", "Array", "make", "add", "start", "reset", "buf", "init", "hash", "close", "buffer", "clear", "buffers"]}}
{"code": "public void reset() throws IOException {synchronized (lock) {checkNotClosed();if (mark == -1) {throw new IOException(\"Invalid mark\");}pos = mark;}}\n", "substitutes": {"reset": ["open", "reopen", "flush", "close", "read"], "pos": ["open", "mark", "index", "reopen", "current", "last", "start", "flush", "close", "read"]}}
{"code": "public RefErrorPtg(LittleEndianInput in)  {field_1_reserved = in.readInt();}\n", "substitutes": {"in": ["input", "bi", "ins", "in", "bis", "is"], "field_1_reserved": ["input", "bi", "ins", "in", "code", "index", "err", "bis", "ref", "error", "is"]}}
{"code": "public SuspendGameServerGroupResult suspendGameServerGroup(SuspendGameServerGroupRequest request) {request = beforeClientExecution(request);return executeSuspendGameServerGroup(request);}\n", "substitutes": {"suspendGameServerGroup": ["suspend", "resume", "execute", "pause", "send"], "request": ["input", "parent", "suspend", "resume", "argument", "execute", "request", "call", "req", "instruction", "query", "pause", "send", "p"]}}
{"code": "public final ValueEval evaluate(ValueEval[] args, int srcRowIndex, int srcColumnIndex) {if (args.length != 3) {return ErrorEval.VALUE_INVALID;}return evaluate(srcRowIndex, srcColumnIndex, args[0], args[1], args[2]);}\n", "substitutes": {"evaluate": ["eval", "f", "validate", "execute", "evaluate", "val"], "srcRowIndex": ["context", "eval", "column", "f", "index", "validate", "execute", "row", "evaluate", "val", "target", "columns", "col"], "srcColumnIndex": ["context", "eval", "column", "f", "index", "validate", "execute", "row", "evaluate", "val", "target", "offset", "columns", "col"]}}
{"code": "public GetRepoRequest() {super(\"cr\", \"2016-06-07\", \"GetRepo\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]\");setMethod(MethodType.GET);}\n", "substitutes": {}}
{"code": "public void setDate(Date date) {if (date != null) {setDate(DateTools.dateToString(date, DateTools.Resolution.SECOND));} else {this.date = null;}}\n", "substitutes": {"setDate": ["date", "update", "add", "append", "log", "print", "set", "write"], "date": ["date", "update", "obj", "add", "append", "value", "Date", "val", "log", "time", "print", "d", "set", "write", "day"]}}
{"code": "public TokenStream create(TokenStream input) {return new GermanMinimalStemFilter(input);}\n", "substitutes": {"create": ["convert", "create", "wrap", "apply", "filter"], "input": ["convert", "create", "wrap", "apply", "token", "input", "s", "filter", "tokens", "stream"]}}
{"code": "public Object[] toArray() {return a.clone();}\n", "substitutes": {"toArray": ["get", "dup", "copy", "clone", "clones"]}}
{"code": "public void write(char[] buffer, int offset, int len) {Arrays.checkOffsetAndCount(buffer.length, offset, len);synchronized (lock) {expand(len);System.arraycopy(buffer, offset, this.buf, this.count, len);this.count += len;}}\n", "substitutes": {"write": ["add", "append", "insert", "write", "put"], "buffer": ["data", "array", "add", "this", "append", "buf", "chars", "insert", "b", "buffer", "write", "put"], "offset": ["data", "array", "index", "off", "add", "this", "append", "start", "0", "offset", "buf", "chars", "insert", "b", "pos", "buffer", "write", "put"], "len": ["data", "n", "append", "start", "buffer", "write", "put", "array", "this", "0", "offset", "len", "index", "off", "add", "chars", "b", "limit", "length", "count", "buf", "insert", "pos", "size"], "count": ["data", "n", "append", "start", "position", "buffer", "write", "put", "array", "this", "0", "offset", "len", "index", "off", "add", "chars", "b", "limit", "length", "count", "buf", "insert", "pos", "size"]}}
{"code": "public static final RevFilter after(Date ts) {return after(ts.getTime());}\n", "substitutes": {"after": ["date", "create", "filter", "from", "ts", "rev"], "ts": ["date", "create", "obj", "filter", "e", "from", "a", "time", "ts", "d", "rev"]}}
{"code": "public DeleteGroupPolicyRequest(String groupName, String policyName) {setGroupName(groupName);setPolicyName(policyName);}\n", "substitutes": {"groupName": ["key", "name", "group", "Group", "groups"], "policyName": ["policy", "id", "Name", "key", "name", "group", "Group", "groups", "prefix"]}}
{"code": "public DeregisterTransitGatewayMulticastGroupMembersResult deregisterTransitGatewayMulticastGroupMembers(DeregisterTransitGatewayMulticastGroupMembersRequest request) {request = beforeClientExecution(request);return executeDeregisterTransitGatewayMulticastGroupMembers(request);}\n", "substitutes": {"deregisterTransitGatewayMulticastGroupMembers": ["apply", "execute", "call", "delete", "regenerate"], "request": ["input", "apply", "parent", "op", "execute", "call", "request", "req", "instruction", "delete", "query", "regenerate"]}}
{"code": "public BatchDeleteScheduledActionResult batchDeleteScheduledAction(BatchDeleteScheduledActionRequest request) {request = beforeClientExecution(request);return executeBatchDeleteScheduledAction(request);}\n", "substitutes": {"batchDeleteScheduledAction": ["execute", "call", "run", "delete", "send"], "request": ["input", "parent", "op", "execute", "resource", "call", "run", "request", "req", "delete", "send", "p"]}}
{"code": "public CreateAlgorithmResult createAlgorithm(CreateAlgorithmRequest request) {request = beforeClientExecution(request);return executeCreateAlgorithm(request);}\n", "substitutes": {"createAlgorithm": ["result", "create", "generate", "execute", "call"], "request": ["result", "create", "input", "parent", "generate", "execute", "call", "request", "req", "query", "argument", "parameters"]}}
{"code": "public int readUByte() {return readByte() & 0x00FF;}\n", "substitutes": {"readUByte": ["skip", "next", "get", "peek", "read"]}}
{"code": "public void setLength(int sz) {NB.encodeInt32(info, infoOffset + P_SIZE, sz);}\n", "substitutes": {"setLength": ["end", "encode", "init", "write", "enc"], "sz": ["length", "end", "n", "value", "encode", "init", "l", "len", "write", "enc"]}}
{"code": "public DescribeScalingProcessTypesResult describeScalingProcessTypes() {return describeScalingProcessTypes(new DescribeScalingProcessTypesRequest());}\n", "substitutes": {"describeScalingProcessTypes": ["get", "execute", "list", "request", "run", "send", "describe"]}}
{"code": "public ListResourceRecordSetsResult listResourceRecordSets(ListResourceRecordSetsRequest request) {request = beforeClientExecution(request);return executeListResourceRecordSets(request);}\n", "substitutes": {"listResourceRecordSets": ["get", "index", "execute", "list", "lists"], "request": ["input", "get", "parent", "op", "index", "execute", "list", "lists", "request", "req", "call", "instruction", "query", "p"]}}
{"code": "public Token recoverInline(Parser recognizer)throws RecognitionException{InputMismatchException e = new InputMismatchException(recognizer);for (ParserRuleContext context = recognizer.getContext(); context != null; context = context.getParent()) {context.exception = e;}throw new ParseCancellationException(e);}\n", "substitutes": {"recoverInline": ["parse", "apply", "cancel", "error", "recover"], "recognizer": ["token", "input", "parse", "apply", "s", "null", "r", "parser", "p", "cancel", "error", "sp", "rule", "recover"], "e": ["e", "r", "error", "ex", "rule", "input", "exc", "s", "cancel", "null", "sp", "recover", "token", "parse", "apply", "parser", "re", "exception", "cause", "p"], "context": ["e", "r", "error", "ex", "rule", "input", "context", "exc", "s", "pc", "cancel", "cc", "null", "sp", "recover", "token", "parse", "apply", "sc", "parser", "re", "tc", "c", "exception", "cause", "p"], "exception": ["e", "r", "error", "ex", "rule", "input", "context", "exc", "s", "err", "pc", "cancel", "cc", "null", "sp", "recover", "token", "parse", "apply", "sc", "parser", "re", "tc", "c", "exception", "cause", "p"]}}
{"code": "public SetTagsForResourceResult setTagsForResource(SetTagsForResourceRequest request) {request = beforeClientExecution(request);return executeSetTagsForResource(request);}\n", "substitutes": {"setTagsForResource": ["update", "execute", "run", "call", "set"], "request": ["input", "update", "response", "execute", "resource", "run", "call", "request", "req", "query", "argument", "set"]}}
{"code": "public ModifyStrategyRequest() {super(\"CloudCallCenter\", \"2017-07-05\", \"ModifyStrategy\", \"CloudCallCenter\", \"innerAPI\");}\n", "substitutes": {}}
{"code": "public DescribeVpcEndpointServicesResult describeVpcEndpointServices(DescribeVpcEndpointServicesRequest request) {request = beforeClientExecution(request);return executeDescribeVpcEndpointServices(request);}\n", "substitutes": {"describeVpcEndpointServices": ["execute", "call", "request", "describe", "summary"], "request": ["input", "op", "execute", "call", "request", "req", "instruction", "query", "describe", "summary"]}}
{"code": "public EnableLoggingResult enableLogging(EnableLoggingRequest request) {request = beforeClientExecution(request);return executeEnableLogging(request);}\n", "substitutes": {"enableLogging": ["create", "execute", "run", "call", "enable"], "request": ["input", "create", "parent", "execute", "run", "call", "request", "req", "query", "argument", "p", "enable"]}}
{"code": "public boolean contains(Object o) {return ConcurrentHashMap.this.containsValue(o);}\n", "substitutes": {"contains": ["contain", "add", "includes", "has", "contains"], "o": ["contain", "object", "o", "add", "key", "v", "includes", "value", "has", "contains"]}}
{"code": "public SheetRangeIdentifier(String bookName, NameIdentifier firstSheetIdentifier, NameIdentifier lastSheetIdentifier) {super(bookName, firstSheetIdentifier);_lastSheetIdentifier = lastSheetIdentifier;}\n", "substitutes": {"bookName": ["range", "id", "key", "name", "prefix", "attribute", "sheet"], "firstSheetIdentifier": ["range", "parent", "id", "identifier", "key", "name", "prefix", "attribute", "sheet"], "lastSheetIdentifier": ["next", "range", "parent", "end", "id", "prev", "identifier", "key", "name", "prefix", "last", "first", "null", "attribute", "sheet"], "_lastSheetIdentifier": ["next", "range", "parent", "end", "id", "prev", "identifier", "key", "name", "prefix", "last", "first", "previous", "null", "attribute", "sheet"]}}
{"code": "public DomainMetadataRequest(String domainName) {setDomainName(domainName);}\n", "substitutes": {"domainName": ["host", "n", "name", "value", "string", "domain"]}}
{"code": "public ParseException(Token currentTokenVal,int[][] expectedTokenSequencesVal, String[] tokenImageVal) {super(new MessageImpl(QueryParserMessages.INVALID_SYNTAX, initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal)));this.currentToken = currentTokenVal;this.expectedTokenSequences = expectedTokenSequencesVal;this.tokenImage = tokenImageVal;}\n", "substitutes": {"currentTokenVal": ["token", "current", "t", "start", "tokens", "Token", "null"], "expectedTokenSequencesVal": ["token", "sequences", "length", "expected", "current", "t", "start", "tokens", "Token", "sequence", "seq", "0", "1", "null", "offsets", "segments"], "tokenImageVal": ["current", "start", "seq", "errors", "0", "t", "1", "tokens", "\"\"", "null", "segments", "img", "token", "text", "sequence", "Token", "image", "images", "offsets", "sequences", "length", "expected", "message"], "currentToken": ["current", "start", "seq", "errors", "0", "t", "1", "tokens", "\"\"", "null", "segments", "img", "token", "text", "sequence", "Token", "parser", "image", "images", "offsets", "sequences", "length", "expected", "original", "message"], "expectedTokenSequences": ["current", "start", "seq", "errors", "0", "t", "1", "tokens", "\"\"", "null", "segments", "img", "token", "text", "sequence", "Token", "parser", "image", "images", "offsets", "sequences", "length", "expected", "original", "message", "expect"], "tokenImage": ["current", "start", "seq", "errors", "content", "0", "t", "1", "tokens", "\"\"", "null", "segments", "img", "token", "text", "sequence", "Token", "parser", "image", "images", "offsets", "sequences", "length", "expected", "original", "message", "expect"]}}
{"code": "public FetchPhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"FetchPhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n", "substitutes": {}}
{"code": "public PrintWriter writer() {return writer;}\n", "substitutes": {"writer": ["create", "get", "w", "Writer", "this", "null", "writer", "out"]}}
{"code": "public NGramTokenizerFactory(Map<String, String> args) {super(args);minGramSize = getInt(args, \"minGramSize\", NGramTokenizer.DEFAULT_MIN_NGRAM_SIZE);maxGramSize = getInt(args, \"maxGramSize\", NGramTokenizer.DEFAULT_MAX_NGRAM_SIZE);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n", "substitutes": {"minGramSize": ["width", "length", "limit", "size", "min", "minimum"], "maxGramSize": ["width", "length", "maximum", "max", "limit", "size", "min", "minimum"]}}
{"code": "public boolean isDirectoryFileConflict() {return dfConflict != null;}\n", "substitutes": {"isDirectoryFileConflict": ["check", "exists", "conflicts", "conflict", "has"]}}
{"code": "public IndonesianStemFilter(TokenStream input, boolean stemDerivational) {super(input);this.stemDerivational = stemDerivational;}\n", "substitutes": {"input": ["input", "token", "in", "s", "tokens", "stream"], "stemDerivational": ["input", "token", "in", "s", "stem", "suffix", "strong", "tokens", "accent", "stemmed", "true", "false", "stream"]}}
{"code": "public CreateTrafficPolicyResult createTrafficPolicy(CreateTrafficPolicyRequest request) {request = beforeClientExecution(request);return executeCreateTrafficPolicy(request);}\n", "substitutes": {"createTrafficPolicy": ["create", "execute", "call", "send", "describe"], "request": ["input", "create", "parent", "argument", "execute", "resource", "call", "request", "req", "send", "query", "describe", "p"]}}
{"code": "public void serialize(LittleEndianOutput out) {out.writeInt(fSD);out.writeInt(passwordVerifier);StringUtil.writeUnicodeString(out, title);out.write(securityDescriptor);}\n", "substitutes": {"serialize": ["output", "store", "encode", "flush", "write"], "out": ["bos", "w", "bytes", "output", "o", "store", "encode", "flush", "writer", "out", "encoding", "write", "os"]}}
{"code": "public static double floor(double n, double s) {if (s==0 && n!=0) {return Double.NaN;} else {return (n==0 || s==0) ? 0 : Math.floor(n/s) * s;}}\n", "substitutes": {"floor": ["sin", "cos", "div", "round", "pow", "log", "divide", "floor"], "n": ["sin", "x", "cos", "v", "n", "div", "c", "t", "round", "a", "pow", "r", "log", "divide", "d", "floor"], "s": ["n", "e", "r", "round", "a", "pow", "log", "divide", "floor", "s", "o", "t", "sin", "m", "x", "d", "f", "cos", "v", "div", "c", "factor", "p"]}}
{"code": "public ByteArrayDataOutput(byte[] bytes, int offset, int len) {reset(bytes, offset, len);}\n", "substitutes": {"bytes": ["data", "bytes", "buf", "b", "buffer"], "offset": ["data", "bytes", "index", "off", "start", "offset", "buf", "pos", "b", "buffer"], "len": ["data", "length", "bytes", "index", "off", "limit", "start", "offset", "buf", "count", "pos", "b", "size", "buffer", "len"]}}
{"code": "public static List<Tree> getChildren(Tree t) {List<Tree> kids = new ArrayList<Tree>();for (int i=0; i<t.getChildCount(); i++) {kids.add(t.getChild(i));}return kids;}\n", "substitutes": {"getChildren": ["Children", "children", "leaves", "kids", "siblings"], "t": ["parent", "Children", "node", "children", "tree", "t", "leaves", "root", "kids", "siblings"], "kids": ["result", "parent", "Children", "node", "children", "tree", "list", "t", "ret", "child", "leaves", "root", "kids", "siblings"], "i": ["Children", "n", "t", "leaves", "root", "result", "index", "tree", "ret", "node", "i", "j", "siblings", "k", "parent", "children", "list", "c", "ii", "child", "kids"]}}
{"code": "public void clear() {Hashtable.this.clear();}\n", "substitutes": {"clear": ["destroy", "close", "free", "clear", "remove"]}}
{"code": "public RefreshAllRecord(boolean refreshAll) {this(0);setRefreshAll(refreshAll);}\n", "substitutes": {"refreshAll": ["refresh", "all", "rec", "a", "b", "true", "false"]}}
{"code": "public DeleteNamedQueryResult deleteNamedQuery(DeleteNamedQueryRequest request) {request = beforeClientExecution(request);return executeDeleteNamedQuery(request);}\n", "substitutes": {"deleteNamedQuery": ["update", "begin", "execute", "run", "delete"], "request": ["input", "update", "begin", "parent", "execute", "resource", "run", "request", "req", "call", "delete", "query", "p"]}}
{"code": "public GraphvizFormatter(ConnectionCosts costs) {this.costs = costs;this.bestPathMap = new HashMap<>();sb.append(formatHeader());sb.append(\"  init [style=invis]\\n\");sb.append(\"  init -> 0.0 [label=\\\"\" + BOS_LABEL + \"\\\"]\\n\");}\n", "substitutes": {"costs": ["costs", "c", "cs", "cc", "cost", "contracts"], "bestPathMap": ["costs", "info", "lines", "c", "header", "cs", "headers", "cc", "options", "cost", "contracts"]}}
{"code": "public CheckMultiagentRequest() {super(\"visionai-poc\", \"2020-04-08\", \"CheckMultiagent\");setMethod(MethodType.POST);}\n", "substitutes": {}}
{"code": "public ListUserProfilesResult listUserProfiles(ListUserProfilesRequest request) {request = beforeClientExecution(request);return executeListUserProfiles(request);}\n", "substitutes": {"listUserProfiles": ["get", "execute", "list", "List", "lists"], "request": ["input", "get", "parent", "execute", "list", "List", "lists", "request", "call", "req", "instruction", "query", "argument", "p"]}}
{"code": "public CreateRelationalDatabaseFromSnapshotResult createRelationalDatabaseFromSnapshot(CreateRelationalDatabaseFromSnapshotRequest request) {request = beforeClientExecution(request);return executeCreateRelationalDatabaseFromSnapshot(request);}\n", "substitutes": {"createRelationalDatabaseFromSnapshot": ["create", "begin", "execute", "call", "snapshot"], "request": ["input", "create", "begin", "parent", "execute", "call", "request", "req", "snapshot", "instruction", "query", "argument", "parameters", "p"]}}
{"code": "public StartTaskResult startTask(StartTaskRequest request) {request = beforeClientExecution(request);return executeStartTask(request);}\n", "substitutes": {"startTask": ["create", "execute", "start", "run", "call"], "request": ["input", "create", "parent", "execute", "start", "run", "call", "request", "req", "query", "argument", "p"]}}
{"code": "public Set<String> getIgnoredPaths() {return ignoredPaths;}\n", "substitutes": {"getIgnoredPaths": ["ignore", "get", "ignores", "all", "ignored"]}}
{"code": "public FeatSmartTag(RecordInputStream in) {data = in.readRemainder();}\n", "substitutes": {"in": ["input", "ins", "in", "is", "out", "stream"], "data": ["input", "ins", "in", "record", "text", "tag", "is", "content", "out", "stream"]}}
{"code": "public Change(ChangeAction action, ResourceRecordSet resourceRecordSet) {setAction(action.toString());setResourceRecordSet(resourceRecordSet);}\n", "substitutes": {"action": ["act", "Action", "a", "actions", "action", "change"], "resourceRecordSet": ["act", "Action", "res", "record", "resource", "a", "actions", "rs", "rc", "action", "change"]}}
{"code": "public DeleteImageResult deleteImage(DeleteImageRequest request) {request = beforeClientExecution(request);return executeDeleteImage(request);}\n", "substitutes": {"deleteImage": ["update", "begin", "execute", "run", "delete"], "request": ["input", "update", "begin", "parent", "execute", "resource", "run", "request", "call", "req", "delete", "query", "argument", "p"]}}
{"code": "public CreateConfigurationSetResult createConfigurationSet(CreateConfigurationSetRequest request) {request = beforeClientExecution(request);return executeCreateConfigurationSet(request);}\n", "substitutes": {"createConfigurationSet": ["create", "update", "execute", "call", "run"], "request": ["input", "create", "update", "parent", "execute", "resource", "call", "run", "request", "req", "argument"]}}
{"code": "public Iterator<E> iterator() {Object[] snapshot = elements;return new CowIterator<E>(snapshot, 0, snapshot.length);}\n", "substitutes": {"iterator": ["iter", "get", "iterator", "elements", "stream"], "snapshot": ["iter", "items", "result", "get", "data", "array", "values", "iterator", "elements", "stream"]}}
{"code": "public void visitContainedRecords(RecordVisitor rv) {if (_recs.isEmpty()) {return;}rv.visitRecord(_bofRec);for (int i = 0; i < _recs.size(); i++) {RecordBase rb = _recs.get(i);if (rb instanceof RecordAggregate) {((RecordAggregate) rb).visitContainedRecords(rv);} else {rv.visitRecord((org.apache.poi.hssf.record.Record) rb);}}rv.visitRecord(EOFRecord.instance);}\n", "substitutes": {"visitContainedRecords": ["process", "walk", "visit", "traverse", "record", "accept", "write"], "rv": ["process", "vi", "walk", "visit", "bi", "traverse", "record", "v", "rec", "this", "accept", "write", "visitor"], "i": ["process", "write", "bi", "traverse", "record", "this", "visitor", "walk", "visit", "index", "rec", "i", "j", "k", "vi", "v", "c", "accept", "ii"], "rb": ["process", "r", "write", "bi", "traverse", "record", "this", "rc", "visitor", "walk", "visit", "index", "rec", "i", "j", "k", "vi", "v", "c", "accept", "ii"]}}
{"code": "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[FtCbls ]\").append(\"\\n\");buffer.append(\"  size     = \").append(getDataSize()).append(\"\\n\");buffer.append(\"  reserved = \").append(HexDump.toHex(reserved)).append(\"\\n\");buffer.append(\"[/FtCbls ]\").append(\"\\n\");return buffer.toString();}\n", "substitutes": {"toString": ["length", "build", "dump", "hex", "reverse", "buffer", "String", "string", "trim"], "buffer": ["result", "length", "build", "s", "dump", "hex", "reverse", "builder", "buf", "buffer", "b", "String", "string", "trim"]}}
{"code": "public static BATBlock createEmptyBATBlock(final POIFSBigBlockSize bigBlockSize, boolean isXBAT) {BATBlock block = new BATBlock(bigBlockSize);if(isXBAT) {final int _entries_per_xbat_block = bigBlockSize.getXBATEntriesPerBlock();block._values[ _entries_per_xbat_block ] = POIFSConstants.END_OF_CHAIN;}return block;}\n", "substitutes": {"createEmptyBATBlock": ["create", "build", "make", "allocate", "of"], "bigBlockSize": ["create", "build", "config", "bytes", "make", "n", "block", "blocks", "allocate", "bits", "sizes", "of", "size"], "isXBAT": ["create", "build", "config", "bytes", "make", "n", "block", "blocks", "allocate", "bits", "append", "full", "sizes", "of", "empty", "size", "complete"], "block": ["create", "config", "make", "n", "block", "blocks", "bits", "append", "bc", "complete", "build", "allocate", "of", "result", "ret", "br", "full", "empty", "b", "bytes", "sizes", "size"], "_entries_per_xbat_block": ["create", "config", "make", "n", "block", "blocks", "bits", "append", "bc", "complete", "build", "allocate", "of", "result", "index", "ret", "br", "full", "empty", "b", "i", "length", "bytes", "count", "sizes", "size"], "_values": ["create", "data", "config", "make", "n", "block", "blocks", "bits", "append", "bc", "complete", "entries", "build", "allocate", "of", "result", "index", "ret", "br", "full", "empty", "b", "i", "length", "bytes", "count", "sizes", "size"]}}
{"code": "public TagResourceResult tagResource(TagResourceRequest request) {request = beforeClientExecution(request);return executeTagResource(request);}\n", "substitutes": {"tagResource": ["update", "create", "execute", "tag", "run"], "request": ["input", "update", "create", "execute", "resource", "tag", "run", "request", "call", "req", "query", "argument", "parameters"]}}
{"code": "public DeleteMailboxPermissionsResult deleteMailboxPermissions(DeleteMailboxPermissionsRequest request) {request = beforeClientExecution(request);return executeDeleteMailboxPermissions(request);}\n", "substitutes": {"deleteMailboxPermissions": ["update", "execute", "permissions", "call", "delete"], "request": ["input", "update", "parent", "execute", "permissions", "call", "request", "req", "delete", "query", "instruction", "argument", "p"]}}
{"code": "public ListDatasetGroupsResult listDatasetGroups(ListDatasetGroupsRequest request) {request = beforeClientExecution(request);return executeListDatasetGroups(request);}\n", "substitutes": {"listDatasetGroups": ["get", "execute", "list", "List", "lists"], "request": ["input", "get", "parent", "op", "response", "execute", "list", "List", "lists", "request", "req", "call", "instruction", "query"]}}
{"code": "public ResumeProcessesResult resumeProcesses(ResumeProcessesRequest request) {request = beforeClientExecution(request);return executeResumeProcesses(request);}\n", "substitutes": {"resumeProcesses": ["suspend", "resume", "execute", "start", "pause"], "request": ["input", "parent", "suspend", "resume", "execute", "resource", "start", "request", "call", "req", "pause", "argument"]}}
{"code": "public GetPersonTrackingResult getPersonTracking(GetPersonTrackingRequest request) {request = beforeClientExecution(request);return executeGetPersonTracking(request);}\n", "substitutes": {"getPersonTracking": ["get", "execute", "list", "first", "call"], "request": ["input", "get", "parent", "response", "execute", "list", "resource", "first", "call", "request", "req", "query", "argument"]}}
{"code": "public String toFormulaString(String[] operands) {if(space.isSet(_options)) {return operands[ 0 ];} else if (optiIf.isSet(_options)) {return toFormulaString() + \"(\" + operands[0] + \")\";} else if (optiSkip.isSet(_options)) {return toFormulaString() + operands[0];   } else {return toFormulaString() + \"(\" + operands[0] + \")\";}}\n", "substitutes": {"toFormulaString": ["print", "skip", "blank", "apply", "join", "prefix", "indent", "space", "help", "spaces", "format"], "operands": ["print", "skip", "blank", "apply", "option", "params", "join", "prefix", "formula", "expression", "indent", "space", "args", "help", "options", "spaces", "format"]}}
{"code": "public T merge(T first, T second) {throw new UnsupportedOperationException();}\n", "substitutes": {"merge": ["intersect", "union", "subtract", "add", "compare"], "first": ["input", "intersect", "one", "union", "primary", "subtract", "add", "compare", "first", "second"], "second": ["input", "intersect", "one", "other", "union", "primary", "subtract", "add", "compare", "first", "last", "third", "second"]}}
{"code": "public String toString() {return this.message.getKey() + \": \" + getLocalizedMessage();}\n", "substitutes": {"toString": ["message", "String", "key", "get"]}}
{"code": "public XPath(Parser parser, String path) {this.parser = parser;this.path = path;elements = split(path);}\n", "substitutes": {"parser": ["parse", "parent", "parser", "xp", "root", "p"], "path": ["element", "parse", "parent", "s", "path", "name", "parser", "selector", "xp", "null", "pattern", "expression", "elements", "root", "p"], "elements": ["split", "elements", "splits", "s", "name", "null", "pattern", "root", "element", "parse", "parser", "selector", "expression", "parts", "parent", "paths", "path", "xp", "p"]}}
{"code": "public CreateAccountAliasRequest(String accountAlias) {setAccountAlias(accountAlias);}\n", "substitutes": {"accountAlias": ["alias", "v", "account", "name", "value", "email"]}}
{"code": "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 7) & 1;values[valuesOffset++] = (block >>> 6) & 1;values[valuesOffset++] = (block >>> 5) & 1;values[valuesOffset++] = (block >>> 4) & 1;values[valuesOffset++] = (block >>> 3) & 1;values[valuesOffset++] = (block >>> 2) & 1;values[valuesOffset++] = (block >>> 1) & 1;values[valuesOffset++] = block & 1;}}\n", "substitutes": {"decode": ["process", "update", "build", "generate", "shuffle"], "blocks": ["process", "update", "data", "build", "bytes", "generate", "shuffle", "block", "blocks", "buf", "values"], "blocksOffset": ["process", "update", "data", "build", "bytes", "index", "generate", "shuffle", "block", "blocks", "start", "position", "buf", "j", "pos", "offset", "i", "values"], "values": ["process", "update", "data", "shuffle", "block", "blocks", "start", "bits", "position", "value", "values", "build", "generate", "offset", "lengths", "result", "index", "j", "i", "bytes", "buf", "pos"], "valuesOffset": ["process", "update", "data", "shuffle", "block", "blocks", "start", "bits", "position", "value", "values", "build", "generate", "0", "offset", "lengths", "result", "index", "j", "i", "length", "end", "bytes", "height", "buf", "pos", "size"], "iterations": ["process", "update", "data", "n", "shuffle", "block", "blocks", "start", "bits", "position", "value", "values", "build", "generate", "0", "offset", "len", "lengths", "result", "index", "j", "i", "length", "end", "bytes", "height", "count", "buf", "pos", "size"], "j": ["process", "update", "data", "n", "shuffle", "block", "blocks", "start", "bits", "position", "value", "e", "r", "values", "iter", "build", "generate", "0", "t", "offset", "len", "lengths", "result", "index", "iteration", "x", "j", "i", "length", "end", "bytes", "height", "count", "buf", "pos", "size"], "block": ["process", "update", "data", "n", "shuffle", "block", "blocks", "start", "bits", "position", "value", "e", "r", "values", "iter", "build", "generate", "0", "t", "offset", "len", "lengths", "result", "index", "iteration", "x", "b", "j", "i", "length", "end", "bytes", "height", "c", "count", "buf", "val", "pos", "size"]}}
{"code": "public PushConnection openPush() throws TransportException {return new TcpPushConnection();}\n", "substitutes": {"openPush": ["create", "get", "build", "connection"]}}
{"code": "public static void strcpy(char[] dst, int di, char[] src, int si) {while (src[si] != 0) {dst[di++] = src[si++];}dst[di] = 0;}\n", "substitutes": {"strcpy": ["copy", "swap", "shift", "fill", "set"], "dst": ["dst", "copy", "swap", "shift", "dest", "src", "str", "fill", "b", "arr", "set", "out"], "di": ["n", "shift", "fill", "out", "0", "cc", "len", "set", "index", "copy", "fi", "dest", "src", "str", "b", "arr", "dst", "i", "si", "swap", "ii"], "src": ["n", "shift", "fill", "out", "s", "0", "cc", "len", "set", "index", "copy", "fi", "dest", "src", "str", "b", "arr", "dst", "i", "source", "si", "swap", "ii", "c"], "si": ["n", "shift", "fill", "out", "bi", "s", "0", "cc", "len", "set", "index", "copy", "fi", "dest", "src", "str", "b", "arr", "dst", "i", "source", "si", "swap", "ii", "c", "di", "pos"]}}
{"code": "@Override public K getKey() {return mapEntry.getKey();}\n", "substitutes": {"getKey": ["next", "get", "key", "value", "remove"]}}
{"code": "public static int numNonnull(Object[] data) {int n = 0;if ( data == null ) return n;for (Object o : data) {if ( o!=null ) n++;}return n;}\n", "substitutes": {"numNonnull": ["length", "n", "count", "size", "len"], "data": ["length", "array", "n", "o", "list", "count", "objects", "args", "size", "len", "arr"], "n": ["result", "num", "length", "array", "n", "o", "list", "ret", "count", "objects", "args", "size", "len", "arr"], "o": ["n", "e", "obj", "num", "array", "o", "objects", "len", "result", "x", "ret", "args", "arr", "item", "length", "v", "list", "count", "size"]}}
{"code": "public void add(int location, E object) {if (location >= 0 && location <= size) {Link<E> link = voidLink;if (location < (size / 2)) {for (int i = 0; i <= location; i++) {link = link.next;}} else {for (int i = size; i > location; i--) {link = link.previous;}}Link<E> previous = link.previous;Link<E> newLink = new Link<E>(object, previous, link);previous.next = newLink;link.previous = newLink;size++;modCount++;} else {throw new IndexOutOfBoundsException();}}\n", "substitutes": {"add": ["link", "add", "insert", "move", "set"], "location": ["element", "id", "link", "index", "n", "add", "0", "1", "position", "count", "size", "insert", "offset", "pos", "move", "set", "i"], "object": ["link", "n", "e", "current", "position", "location", "id", "0", "1", "this", "offset", "null", "move", "set", "element", "index", "add", "item", "i", "entry", "count", "insert", "pos", "size"], "link": ["link", "n", "e", "current", "position", "previous", "location", "l", "id", "linked", "0", "1", "this", "last", "offset", "null", "move", "set", "element", "next", "index", "add", "item", "i", "entry", "count", "insert", "pos", "size"], "i": ["link", "n", "e", "current", "position", "previous", "location", "l", "id", "linked", "0", "1", "this", "last", "old", "offset", "null", "move", "set", "element", "next", "index", "x", "add", "item", "i", "j", "entry", "ii", "c", "count", "insert", "pos", "size"], "previous": ["link", "object", "n", "e", "current", "position", "previous", "location", "prev", "l", "id", "linked", "0", "1", "this", "last", "loc", "old", "offset", "null", "move", "set", "element", "next", "index", "x", "links", "add", "first", "item", "i", "j", "entry", "parent", "ii", "c", "count", "insert", "pos", "size"], "newLink": ["link", "object", "n", "e", "current", "position", "previous", "location", "prev", "l", "id", "linked", "0", "1", "this", "last", "loc", "old", "offset", "null", "move", "set", "element", "next", "result", "index", "x", "links", "add", "first", "item", "i", "j", "entry", "parent", "ii", "c", "count", "insert", "pos", "size"], "next": ["link", "object", "n", "e", "current", "position", "previous", "location", "prev", "l", "id", "linked", "0", "1", "this", "last", "loc", "old", "offset", "null", "move", "set", "element", "next", "result", "index", "x", "links", "add", "first", "item", "i", "j", "entry", "parent", "ii", "c", "count", "insert", "pos", "size"], "size": ["link", "object", "n", "e", "current", "position", "previous", "location", "prev", "l", "id", "2", "linked", "0", "1", "this", "last", "loc", "old", "counter", "offset", "null", "move", "set", "element", "next", "result", "index", "x", "links", "add", "first", "max", "limit", "item", "i", "j", "entry", "length", "parent", "ii", "c", "count", "insert", "pos", "size"], "modCount": ["link", "object", "n", "e", "current", "position", "previous", "location", "prev", "l", "id", "2", "linked", "0", "1", "this", "last", "loc", "old", "counter", "offset", "null", "move", "set", "element", "next", "result", "index", "x", "links", "add", "first", "max", "limit", "item", "i", "j", "entry", "length", "parent", "ii", "c", "count", "insert", "pos", "size"]}}
{"code": "public DescribeDomainResult describeDomain(DescribeDomainRequest request) {request = beforeClientExecution(request);return executeDescribeDomain(request);}\n", "substitutes": {"describeDomain": ["get", "execute", "request", "describe", "domain"], "request": ["input", "get", "parent", "argument", "execute", "request", "req", "call", "query", "describe", "domain"]}}
{"code": "public void flush() throws IOException {super.flush();}\n", "substitutes": {"flush": ["shutdown", "destroy", "exit", "close", "free"]}}
{"code": "public PersianCharFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n", "substitutes": {}}
{"code": "public boolean incrementToken() {if (used) {return false;}clearAttributes();termAttribute.append(value);offsetAttribute.setOffset(0, length);used = true;return true;}\n", "substitutes": {"incrementToken": ["apply", "append", "reset", "flush", "close"]}}
{"code": "public static FloatBuffer allocate(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}return new ReadWriteFloatArrayBuffer(capacity);}\n", "substitutes": {"allocate": ["wrap", "create", "allocate", "alloc", "buffer"], "capacity": ["wrap", "create", "length", "capacity", "n", "amount", "allocate", "size", "allocated", "limit", "alloc", "buffer"]}}
{"code": "public final Edit after(Edit cut) {return new Edit(cut.endA, endA, cut.endB, endB);}\n", "substitutes": {"after": ["intersect", "merge", "split", "cut", "intersection"], "cut": ["intersect", "config", "merge", "o", "e", "split", "a", "this", "cut", "edits", "b", "options", "edit", "intersection"]}}
{"code": "public UpdateRuleVersionResult updateRuleVersion(UpdateRuleVersionRequest request) {request = beforeClientExecution(request);return executeUpdateRuleVersion(request);}\n", "substitutes": {"updateRuleVersion": ["update", "apply", "execute", "call", "run"], "request": ["input", "update", "apply", "parent", "execute", "resource", "call", "run", "request", "req", "argument"]}}
{"code": "public ListVoiceConnectorTerminationCredentialsResult listVoiceConnectorTerminationCredentials(ListVoiceConnectorTerminationCredentialsRequest request) {request = beforeClientExecution(request);return executeListVoiceConnectorTerminationCredentials(request);}\n", "substitutes": {"listVoiceConnectorTerminationCredentials": ["get", "execute", "list", "call", "delete"], "request": ["input", "get", "op", "execute", "list", "call", "request", "req", "instruction", "delete", "query"]}}
{"code": "public GetDeploymentTargetResult getDeploymentTarget(GetDeploymentTargetRequest request) {request = beforeClientExecution(request);return executeGetDeploymentTarget(request);}\n", "substitutes": {"getDeploymentTarget": ["get", "execute", "list", "run", "describe"], "request": ["input", "get", "parent", "argument", "execute", "list", "resource", "run", "request", "call", "req", "query", "describe"]}}
{"code": "public void setNoChildReport() {letChildReport  = false;for (final PerfTask task : tasks) {if (task instanceof TaskSequence) {((TaskSequence)task).setNoChildReport();}}}\n", "substitutes": {"setNoChildReport": ["shutdown", "finish", "execute", "run", "complete", "close", "report"], "task": ["obj", "shutdown", "finish", "execute", "task", "t", "tr", "run", "child", "tasks", "complete", "close", "ti", "report"]}}
{"code": "public E get(int location) {try {return a[location];} catch (ArrayIndexOutOfBoundsException e) {throw java.util.ArrayList.throwIndexOutOfBoundsException(location, a.length);}}\n", "substitutes": {"get": ["element", "get", "lookup", "find", "remove"], "location": ["element", "get", "index", "lookup", "e", "0", "find", "position", "i", "pos", "offset", "remove"]}}
{"code": "public DescribeDataSetResult describeDataSet(DescribeDataSetRequest request) {request = beforeClientExecution(request);return executeDescribeDataSet(request);}\n", "substitutes": {"describeDataSet": ["execute", "call", "request", "describe", "summary"], "request": ["input", "parent", "argument", "execute", "call", "request", "req", "query", "describe", "summary"]}}
{"code": "public SkipWorkTreeFilter(int treeIdx) {this.treeIdx = treeIdx;}\n", "substitutes": {"treeIdx": ["skip", "index", "filter", "depth", "level", "flags", "i"]}}
{"code": "public DescribeNetworkInterfacesResult describeNetworkInterfaces() {return describeNetworkInterfaces(new DescribeNetworkInterfacesRequest());}\n", "substitutes": {"describeNetworkInterfaces": ["get", "execute", "call", "request", "send", "describe"]}}
{"code": "public final boolean contains(int row, int col) {return _firstRow <= row && _lastRow >= row&& _firstColumn <= col && _lastColumn >= col;}\n", "substitutes": {"contains": ["intersect", "includes", "include", "overlap", "contains"], "row": ["hr", "line", "intersect", "row", "includes", "r", "include", "rows", "overlap", "contains", "col"], "col": ["hr", "line", "intersect", "column", "cell", "row", "c", "includes", "r", "include", "rows", "columns", "overlap", "contains", "col"]}}
{"code": "public String toString() {return new String(this.chars);}\n", "substitutes": {"toString": ["get", "str", "chars", "String", "string"]}}
{"code": "public PatchType getPatchType() {return patchType;}\n", "substitutes": {"getPatchType": ["create", "get", "copy", "this", "type"]}}
{"code": "public Iterator<K> iterator() {return new KeyIterator();}\n", "substitutes": {"iterator": ["iter", "create", "get", "iterator", "keys"]}}
{"code": "public CreateScriptResult createScript(CreateScriptRequest request) {request = beforeClientExecution(request);return executeCreateScript(request);}\n", "substitutes": {"createScript": ["create", "copy", "execute", "call", "run"], "request": ["input", "create", "parent", "copy", "execute", "resource", "script", "call", "run", "request", "req", "argument", "p"]}}
{"code": "public BytesRef next() {termUpto++;if (termUpto >= info.terms.size()) {return null;} else {info.terms.get(info.sortedTerms[termUpto], br);return br;}}\n", "substitutes": {"next": ["next", "get", "ref", "term", "grow"], "termUpto": ["next", "get", "index", "n", "counter", "ref", "term", "offset", "j", "pos", "grow", "i"]}}
{"code": "public String outputToString(CharsRef output) {return output.toString();}\n", "substitutes": {"outputToString": ["output", "escape", "str", "string", "format"], "output": ["output", "reference", "ch", "escape", "c", "ref", "cs", "str", "string", "format"]}}
{"code": "public AssociateWebsiteAuthorizationProviderResult associateWebsiteAuthorizationProvider(AssociateWebsiteAuthorizationProviderRequest request) {request = beforeClientExecution(request);return executeAssociateWebsiteAuthorizationProvider(request);}\n", "substitutes": {"associateWebsiteAuthorizationProvider": ["create", "update", "execute", "call", "associate"], "request": ["input", "create", "update", "parent", "execute", "call", "request", "req", "instruction", "query", "associate", "argument", "p"]}}
{"code": "public void unpop(RevCommit c) {Block b = head;if (b == null) {b = free.newBlock();b.resetToMiddle();b.add(c);head = b;tail = b;return;} else if (b.canUnpop()) {b.unpop(c);return;}b = free.newBlock();b.resetToEnd();b.unpop(c);b.next = head;head = b;}\n", "substitutes": {"unpop": ["add", "append", "pop", "delete", "push", "remove"], "c": ["dep", "comm", "add", "head", "append", "pop", "delete", "commit", "msg", "push", "rev", "remove", "commits"], "b": ["append", "block", "delete", "tail", "prev", "t", "pop", "null", "msg", "commits", "dep", "add", "head", "b", "rev", "remove", "comm", "commit", "push"], "head": ["current", "append", "block", "a", "delete", "tail", "prev", "this", "t", "pop", "null", "root", "msg", "commits", "next", "dep", "add", "head", "first", "b", "rev", "remove", "comm", "c", "commit", "push"], "tail": ["current", "append", "block", "a", "delete", "tail", "prev", "this", "t", "last", "pop", "null", "root", "msg", "commits", "next", "dep", "add", "head", "first", "b", "rev", "remove", "comm", "c", "commit", "push"], "next": ["current", "append", "block", "a", "delete", "tail", "prev", "this", "t", "last", "pop", "null", "root", "msg", "commits", "next", "dep", "add", "head", "first", "b", "rev", "remove", "parent", "comm", "c", "commit", "push"]}}
{"code": "public EdgeNGramTokenizerFactory(Map<String, String> args) {super(args);minGramSize = getInt(args, \"minGramSize\", EdgeNGramTokenizer.DEFAULT_MIN_GRAM_SIZE);maxGramSize = getInt(args, \"maxGramSize\", EdgeNGramTokenizer.DEFAULT_MAX_GRAM_SIZE);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n", "substitutes": {"minGramSize": ["width", "max", "size", "min", "minimum"], "maxGramSize": ["width", "length", "maximum", "max", "limit", "size", "min", "minimum"]}}
{"code": "public ModifyDBParameterGroupRequest(String dBParameterGroupName, java.util.List<Parameter> parameters) {setDBParameterGroupName(dBParameterGroupName);setParameters(parameters);}\n", "substitutes": {"dBParameterGroupName": ["Name", "key", "name", "group", "resource", "string"], "parameters": ["Name", "params", "parameter", "key", "name", "group", "resource", "list", "parameters", "elements", "string", "values"]}}
{"code": "public GetHostedZoneLimitResult getHostedZoneLimit(GetHostedZoneLimitRequest request) {request = beforeClientExecution(request);return executeGetHostedZoneLimit(request);}\n", "substitutes": {"getHostedZoneLimit": ["get", "list", "execute", "call", "limit"], "request": ["input", "get", "parent", "op", "list", "execute", "call", "request", "req", "instruction", "query", "limit", "p"]}}
{"code": "public void set(int index, long value) {final int o = index >>> 6;final int b = index & 63;final int shift = b << 0;blocks[o] = (blocks[o] & ~(1L << shift)) | (value << shift);}\n", "substitutes": {"set": ["add", "increment", "insert", "set", "put"], "index": ["id", "index", "add", "key", "increment", "name", "b", "value", "i", "insert", "offset", "set", "put"], "value": ["id", "index", "v", "add", "key", "increment", "name", "b", "value", "block", "a", "1", "val", "i", "insert", "offset", "set", "put"], "o": ["n", "block", "value", "a", "put", "id", "key", "name", "increment", "1", "offset", "set", "index", "add", "b", "i", "v", "c", "val", "insert"], "b": ["n", "block", "value", "a", "shift", "put", "id", "s", "key", "name", "increment", "1", "offset", "set", "index", "add", "b", "i", "v", "c", "val", "insert"], "shift": ["n", "block", "value", "a", "shift", "put", "id", "s", "key", "name", "increment", "1", "offset", "set", "index", "add", "b", "i", "v", "c", "val", "insert"], "blocks": ["data", "n", "block", "value", "a", "shift", "bits", "buffer", "put", "values", "id", "s", "array", "key", "name", "increment", "1", "offset", "set", "index", "add", "b", "i", "bytes", "v", "c", "val", "insert"]}}
{"code": "public RevFilter clone() {return new PatternSearch(pattern());}\n", "substitutes": {"clone": ["search", "filter", "build", "pattern"]}}
{"code": "public String toString() {return \"spans(\" + term.toString() + \")@\" +(doc == -1 ? \"START\" : (doc == NO_MORE_DOCS) ? \"ENDDOC\": doc + \" - \" + (position == NO_MORE_POSITIONS ? \"ENDPOS\" : position));}\n", "substitutes": {"toString": ["length", "description", "span", "id", "name", "doc", "comment", "size", "type", "explain"]}}
{"code": "public boolean canAppendMatch() {for (Head head : heads) {if (head != LastHead.INSTANCE) {return true;}}return false;}\n", "substitutes": {"canAppendMatch": ["exists", "first", "empty", "contains", "remove"], "head": ["th", "he", "h", "head", "exists", "first", "t", "c", "empty", "contains", "remove"]}}
{"code": "public synchronized int lastIndexOf(String subString, int start) {return super.lastIndexOf(subString, start);}\n", "substitutes": {"lastIndexOf": ["index", "find", "count", "position", "pos", "search"], "subString": ["s", "index", "text", "value", "find", "count", "position", "str", "pos", "search", "string"], "start": ["s", "index", "text", "value", "start", "find", "count", "position", "str", "pos", "offset", "search", "string", "i"]}}
{"code": "public DeleteNetworkAclEntryResult deleteNetworkAclEntry(DeleteNetworkAclEntryRequest request) {request = beforeClientExecution(request);return executeDeleteNetworkAclEntry(request);}\n", "substitutes": {"deleteNetworkAclEntry": ["begin", "execute", "run", "delete", "complete"], "request": ["input", "begin", "parent", "execute", "run", "request", "req", "call", "delete", "query", "instruction", "argument", "p", "complete"]}}
{"code": "public AssociateMemberToGroupResult associateMemberToGroup(AssociateMemberToGroupRequest request) {request = beforeClientExecution(request);return executeAssociateMemberToGroup(request);}\n", "substitutes": {"associateMemberToGroup": ["create", "update", "call", "activate", "associate"], "request": ["input", "create", "update", "parent", "argument", "resource", "call", "request", "req", "activate", "associate"]}}
{"code": "public static final int committer(byte[] b, int ptr) {final int sz = b.length;if (ptr == 0)ptr += 46; while (ptr < sz && b[ptr] == 'p')ptr += 48; if (ptr < sz && b[ptr] == 'a')ptr = nextLF(b, ptr);return match(b, ptr, committer);}\n", "substitutes": {"committer": ["next", "0", "1", "find", "search", "ptr", "matches", "true", "false", "match"], "b": ["next", "input", "data", "s", "0", "1", "find", "buf", "buffer", "b", "search", "ptr", "matches", "true", "false", "match"], "ptr": ["data", "n", "start", "buffer", "true", "input", "s", "0", "1", "offset", "ptr", "next", "index", "b", "search", "matches", "i", "j", "c", "find", "buf", "pos", "false", "match"], "sz": ["data", "n", "start", "buffer", "true", "l", "input", "s", "0", "1", "offset", "len", "ptr", "next", "index", "b", "search", "matches", "i", "j", "length", "end", "c", "find", "buf", "pos", "false", "match"]}}
{"code": "public int getLineNumber() { return row; }\n", "substitutes": {"getLineNumber": ["next", "get", "index", "row", "rows"]}}
{"code": "public SubmoduleUpdateCommand addPath(String path) {paths.add(path);return this;}\n", "substitutes": {"addPath": ["paths", "path", "add", "append", "Path"], "path": ["paths", "s", "path", "add", "name", "append", "ele", "Path", "p"]}}
{"code": "public GetPushTemplateResult getPushTemplate(GetPushTemplateRequest request) {request = beforeClientExecution(request);return executeGetPushTemplate(request);}\n", "substitutes": {"getPushTemplate": ["get", "execute", "list", "call", "send"], "request": ["input", "get", "parent", "argument", "execute", "list", "call", "request", "req", "query", "send"]}}
{"code": "public DescribeVaultResult describeVault(DescribeVaultRequest request) {request = beforeClientExecution(request);return executeDescribeVault(request);}\n", "substitutes": {"describeVault": ["execute", "request", "send", "summary", "describe"], "request": ["input", "parent", "argument", "execute", "request", "req", "call", "query", "send", "summary", "describe"]}}
{"code": "public DescribeVpcPeeringConnectionsResult describeVpcPeeringConnections() {return describeVpcPeeringConnections(new DescribeVpcPeeringConnectionsRequest());}\n", "substitutes": {"describeVpcPeeringConnections": ["get", "execute", "list", "call", "run", "request", "send", "describe"]}}
{"code": "public ByteBuffer putLong(int index, long value) {throw new ReadOnlyBufferException();}\n", "substitutes": {"putLong": ["get", "append", "buffer", "set", "put"], "index": ["get", "index", "key", "address", "append", "position", "offset", "buffer", "set", "put"], "value": ["length", "get", "index", "v", "key", "address", "append", "value", "b", "position", "val", "offset", "buffer", "set", "put"]}}
{"code": "public RegisterDeviceResult registerDevice(RegisterDeviceRequest request) {request = beforeClientExecution(request);return executeRegisterDevice(request);}\n", "substitutes": {"registerDevice": ["create", "execute", "call", "register", "send"], "request": ["input", "create", "parent", "argument", "execute", "call", "request", "req", "query", "register", "send", "p"]}}
{"code": "public static Format byId(int id) {for (Format format : Format.values()) {if (format.getId() == id) {return format;}}throw new IllegalArgumentException(\"Unknown format id: \" + id);}\n", "substitutes": {"byId": ["create", "get", "id", "find", "of"], "id": ["create", "get", "id", "s", "f", "ID", "value", "find", "of", "i"], "format": ["ft", "create", "get", "id", "s", "f", "v", "t", "ID", "value", "find", "of", "i", "format"]}}
{"code": "public DeleteAppResult deleteApp(DeleteAppRequest request) {request = beforeClientExecution(request);return executeDeleteApp(request);}\n", "substitutes": {"deleteApp": ["apply", "execute", "run", "delete", "remove"], "request": ["input", "apply", "parent", "execute", "resource", "run", "request", "call", "req", "delete", "argument", "p", "remove"]}}
{"code": "public GetBaiduChannelResult getBaiduChannel(GetBaiduChannelRequest request) {request = beforeClientExecution(request);return executeGetBaiduChannel(request);}\n", "substitutes": {"getBaiduChannel": ["get", "execute", "list", "call", "fetch"], "request": ["input", "get", "execute", "list", "call", "request", "req", "instruction", "query", "fetch", "p"]}}
{"code": "public FST.BytesReader getBytesReader() {return fst.getBytesReader();}\n", "substitutes": {"getBytesReader": ["next", "get", "current", "buffer", "reader", "read"]}}
{"code": "public static boolean isValidSchemeChar(int index, char c) {if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {return true;}if (index > 0 && ((c >= '0' && c <= '9') || c == '+' || c == '-' || c == '.')) {return true;}return false;}\n", "substitutes": {"isValidSchemeChar": ["is", "accept", "matches", "contains", "match"], "index": ["is", "index", "n", "c", "accept", "scheme", "matches", "contains", "p", "i", "match"], "c": ["is", "char", "s", "index", "n", "ch", "c", "accept", "scheme", "character", "matches", "contains", "p", "i", "match"]}}
{"code": "public ListAppliedSchemaArnsResult listAppliedSchemaArns(ListAppliedSchemaArnsRequest request) {request = beforeClientExecution(request);return executeListAppliedSchemaArns(request);}\n", "substitutes": {"listAppliedSchemaArns": ["get", "execute", "list", "call", "run"], "request": ["input", "get", "parent", "op", "execute", "list", "call", "run", "request", "req", "query", "instruction", "p"]}}
{"code": "public String name() {return this.name;}\n", "substitutes": {"name": ["get", "id", "text", "name", "title", "value", "string"]}}
{"code": "public ValueEval evaluate(ValueEval[] args, OperationEvaluationContext ec) {if (args.length < 1) {return ErrorEval.VALUE_INVALID;}boolean isA1style;String text;try {ValueEval ve = OperandResolver.getSingleValue(args[0], ec.getRowIndex(), ec.getColumnIndex());text = OperandResolver.coerceValueToString(ve);switch (args.length) {case 1:isA1style = true;break;case 2:isA1style = evaluateBooleanArg(args[1], ec);break;default:return ErrorEval.VALUE_INVALID;}} catch (EvaluationException e) {return e.getErrorEval();}return evaluateIndirect(ec, text, isA1style);}\n", "substitutes": {"evaluate": ["eval", "apply", "execute", "evaluate", "interpret"], "ec": ["context", "eval", "apply", "sc", "op", "execute", "c", "evaluate", "pc", "interpret", "true", "false"], "isA1style": ["true", "context", "eval", "flag", "op", "implicit", "indirect", "result", "apply", "sc", "bool", "execute", "ret", "evaluate", "interpret", "c", "direct", "pc", "false"], "text": ["value", "true", "context", "eval", "flag", "op", "s", "implicit", "indirect", "result", "apply", "sc", "bool", "execute", "ret", "evaluate", "str", "interpret", "string", "c", "val", "direct", "pc", "false"], "ve": ["value", "true", "context", "eval", "flag", "op", "s", "implicit", "indirect", "result", "apply", "sc", "bool", "execute", "ret", "evaluate", "str", "interpret", "string", "v", "c", "val", "direct", "pc", "false"]}}
{"code": "public final int compareTo(int[] bs, int p) {int cmp;cmp = NB.compareUInt32(w1, bs[p]);if (cmp != 0)return cmp;cmp = NB.compareUInt32(w2, bs[p + 1]);if (cmp != 0)return cmp;cmp = NB.compareUInt32(w3, bs[p + 2]);if (cmp != 0)return cmp;cmp = NB.compareUInt32(w4, bs[p + 3]);if (cmp != 0)return cmp;return NB.compareUInt32(w5, bs[p + 4]);}\n", "substitutes": {"compareTo": ["get", "comp", "compare", "find", "sort"], "bs": ["get", "s", "w", "bytes", "comp", "compare", "a", "dest", "find", "b", "sort", "arr"], "p": ["a", "start", "s", "comp", "compare", "0", "1", "offset", "sort", "w", "index", "dest", "b", "arr", "i", "get", "bytes", "find", "pos"], "cmp": ["n", "r", "a", "start", "l", "s", "comp", "compare", "0", "1", "offset", "sort", "result", "w", "index", "dest", "b", "arr", "d", "i", "get", "bytes", "v", "c", "find", "pos"]}}
{"code": "public void removeName(int index){names.remove(index);workbook.removeName(index);}\n", "substitutes": {"removeName": ["add", "reset", "delete", "removed", "clear", "remove"], "index": ["id", "index", "n", "add", "name", "c", "reset", "delete", "removed", "i", "clear", "remove"]}}
{"code": "public GetQueueAttributesRequest(String queueUrl, java.util.List<String> attributeNames) {setQueueUrl(queueUrl);setAttributeNames(attributeNames);}\n", "substitutes": {"queueUrl": ["name", "url", "q", "job", "queue", "null"], "attributeNames": ["list", "name", "tags", "url", "q", "job", "names", "queue", "args", "null", "attributes"]}}
{"code": "public static boolean[] copyOf(boolean[] original, int newLength) {if (newLength < 0) {throw new NegativeArraySizeException();}return copyOfRange(original, 0, newLength);}\n", "substitutes": {"copyOf": ["resize", "expand", "copy", "shift", "split"], "original": ["input", "resize", "array", "expand", "copy", "shift", "split", "a", "b", "arr"], "newLength": ["input", "range", "length", "resize", "array", "expand", "copy", "index", "n", "shift", "split", "a", "count", "size", "b", "arr", "len"]}}
{"code": "public static void setEnabled(boolean enabled) {ENABLED = enabled;}\n", "substitutes": {"setEnabled": ["enabled", "isEnabled", "set", "Enabled", "enable"], "enabled": ["enabled", "v", "value", "val", "b", "isEnabled", "set", "Enabled", "enable"], "ENABLED": ["disabled", "enabled", "v", "value", "val", "b", "isEnabled", "set", "Enabled", "enable"]}}
{"code": "public DeleteLogPatternResult deleteLogPattern(DeleteLogPatternRequest request) {request = beforeClientExecution(request);return executeDeleteLogPattern(request);}\n", "substitutes": {"deleteLogPattern": ["update", "begin", "execute", "run", "delete"], "request": ["input", "update", "begin", "parent", "execute", "run", "request", "call", "req", "delete", "query", "argument", "p"]}}
{"code": "public boolean contains(char[] text, int off, int len) {return map.containsKey(text, off, len);}\n", "substitutes": {"contains": ["contain", "exists", "includes", "has", "contains"], "text": ["contain", "s", "array", "key", "exists", "includes", "buf", "chars", "keys", "b", "has", "contains"], "off": ["contain", "s", "array", "index", "off", "key", "exists", "includes", "start", "offset", "buf", "chars", "keys", "pos", "b", "has", "contains"], "len": ["n", "start", "keys", "contains", "s", "array", "key", "exists", "offset", "len", "has", "contain", "index", "off", "chars", "b", "length", "includes", "count", "buf", "pos", "size"]}}
{"code": "public int getFirstSheetIndexFromExternSheetIndex(int externSheetNumber){return linkTable.getFirstInternalSheetIndexForExtIndex(externSheetNumber);}\n", "substitutes": {"getFirstSheetIndexFromExternSheetIndex": ["get", "index", "first", "find", "search"], "externSheetNumber": ["get", "index", "name", "first", "find", "offset", "search", "ext", "i"]}}
{"code": "public boolean handles(String commandLine) {return command.length() + 1 < commandLine.length()&& commandLine.charAt(command.length()) == ' '&& commandLine.startsWith(command);}\n", "substitutes": {"handles": ["accept", "accepts", "matches", "contains", "match"], "commandLine": ["input", "line", "command", "text", "path", "name", "accept", "target", "accepts", "string", "matches", "pattern", "contains", "match"]}}
{"code": "public static void register(MergeStrategy imp) {register(imp.getName(), imp);}\n", "substitutes": {"register": ["merge", "add", "init", "register", "set", "put"], "imp": ["merger", "s", "m", "merge", "add", "strategy", "init", "register", "spec", "set", "rule", "put"]}}
{"code": "public long ramBytesUsed() {return BASE_RAM_BYTES_USED + ((index!=null)? index.ramBytesUsed() : 0);}\n", "substitutes": {"ramBytesUsed": ["usage", "length", "get", "capacity", "used", "remaining", "total", "size"]}}
{"code": "public HostedZone(String id, String name, String callerReference) {setId(id);setName(name);setCallerReference(callerReference);}\n", "substitutes": {"id": ["pid", "ip", "id", "identifier", "name", "ID", "Id"], "name": ["pid", "ip", "id", "Name", "host", "identifier", "nickname", "name", "n", "ID", "null", "Id", "string"], "callerReference": ["pid", "ip", "id", "Name", "host", "caller", "identifier", "nickname", "name", "n", "reference", "ID", "ref", "callback", "null", "Id", "string"]}}
{"code": "public GetFindingsResult getFindings(GetFindingsRequest request) {request = beforeClientExecution(request);return executeGetFindings(request);}\n", "substitutes": {"getFindings": ["get", "list", "run", "find", "search"], "request": ["input", "get", "parent", "statement", "response", "list", "run", "find", "request", "call", "query", "req", "search"]}}
{"code": "public DescribeTopicsDetectionJobResult describeTopicsDetectionJob(DescribeTopicsDetectionJobRequest request) {request = beforeClientExecution(request);return executeDescribeTopicsDetectionJob(request);}\n", "substitutes": {"describeTopicsDetectionJob": ["execute", "call", "run", "describe", "summary"], "request": ["input", "parent", "op", "argument", "execute", "call", "run", "request", "req", "query", "describe", "summary", "p"]}}
{"code": "public boolean processMatch(ValueEval eval) {if(eval instanceof NumericValueEval) {if(minimumValue == null) { minimumValue = eval;} else { double currentValue = ((NumericValueEval)eval).getNumberValue();double oldValue = ((NumericValueEval)minimumValue).getNumberValue();if(currentValue < oldValue) {minimumValue = eval;}}}return true;}\n", "substitutes": {"processMatch": ["equals", "validate", "compare", "accept", "contains"], "eval": ["equals", "v", "validate", "expr", "compare", "accept", "value", "e", "0", "current", "1", "val", "target", "null", "contains", "match"], "minimumValue": ["best", "validate", "e", "current", "value", "contains", "compare", "0", "1", "this", "old", "target", "null", "result", "evaluation", "ret", "match", "matches", "equals", "v", "accept", "val", "expr"], "currentValue": ["best", "validate", "e", "current", "value", "contains", "num", "compare", "0", "1", "this", "old", "target", "null", "result", "number", "evaluation", "ret", "match", "matches", "equals", "v", "accept", "val", "expr"], "oldValue": ["best", "validate", "e", "current", "value", "contains", "num", "compare", "0", "1", "this", "old", "target", "null", "min", "result", "number", "evaluation", "ret", "max", "match", "matches", "lowest", "equals", "v", "expected", "accept", "val", "minimum", "expr"]}}
{"code": "public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeShort(field_1_len_ref_subexpression);}\n", "substitutes": {"write": ["serial", "store", "encode", "flush", "write"], "out": ["bos", "w", "output", "o", "this", "serial", "store", "encode", "flush", "out", "write", "os"]}}
{"code": "public static void main(String[] args) throws IOException {boolean printTree = false;String path = null;for(int i=0;i<args.length;i++) {if (args[i].equals(\"-printTree\")) {printTree = true;} else {path = args[i];}}if (args.length != (printTree ? 2 : 1)) {System.out.println(\"\\nUsage: java -classpath ... org.apache.lucene.facet.util.PrintTaxonomyStats [-printTree] /path/to/taxononmy/index\\n\");System.exit(1);}Directory dir = FSDirectory.open(Paths.get(path));TaxonomyReader r = new DirectoryTaxonomyReader(dir);printStats(r, System.out, printTree);r.close();dir.close();}\n", "substitutes": {"path": ["dir", "file", "filename", "path", "name", "0", "\"\"", "root"], "i": ["k", "dir", "file", "index", "filename", "path", "n", "name", "0", "c", "j", "\"\"", "pos", "root", "i"], "printTree": ["file", "n", "split", "printed", "true", "flag", "dir", "name", "0", "stats", "\"\"", "found", "root", "result", "index", "first", "j", "i", "k", "filename", "path", "c", "pos", "print", "false"], "dir": ["file", "n", "split", "r", "printed", "directory", "sd", "true", "flag", "dir", "name", "0", "stats", "\"\"", "found", "root", "result", "index", "first", "d", "j", "i", "k", "f", "filename", "path", "c", "pos", "print", "false"], "r": ["file", "n", "split", "r", "printed", "directory", "sd", "true", "flag", "dir", "name", "0", "tr", "stats", "\"\"", "found", "root", "result", "index", "first", "br", "d", "reader", "fr", "j", "i", "k", "f", "filename", "path", "c", "pos", "print", "false"]}}
{"code": "public void setByteValue(byte value) {if (!(fieldsData instanceof Byte)) {throw new IllegalArgumentException(\"cannot change value type from \" + fieldsData.getClass().getSimpleName() + \" to Byte\");}fieldsData = Byte.valueOf(value);}\n", "substitutes": {"setByteValue": ["update", "value", "set", "write", "put"], "value": ["update", "s", "v", "value", "val", "b", "set", "write", "put"], "fieldsData": ["update", "s", "v", "object", "this", "value", "val", "b", "type", "set", "write", "put"]}}
{"code": "public static int initialize() {return initialize(DEFAULT_SEED);}\n", "substitutes": {"initialize": ["next", "sent", "get", "sequence", "seed", "received", "read"]}}
{"code": "public CachingDoubleValueSource(DoubleValuesSource source) {this.source = source;cache = new HashMap<>();}\n", "substitutes": {"source": ["source", "s", "v", "value", "src", "val", "sources", "cache"], "cache": ["result", "source", "s", "v", "value", "values", "src", "val", "sources", "map", "mapping", "cache"]}}
{"code": "public AttributeDefinition(String attributeName, ScalarAttributeType attributeType) {setAttributeName(attributeName);setAttributeType(attributeType.toString());}\n", "substitutes": {"attributeName": ["Name", "key", "name", "value", "null", "attribute"], "attributeType": ["Name", "key", "name", "t", "value", "a", "null", "type", "attributes", "attribute"]}}
{"code": "public static String join(Collection<String> parts, String separator) {return StringUtils.join(parts, separator, separator);}\n", "substitutes": {"join": ["get", "replace", "join", "split", "joining", "trim", "format"], "parts": ["get", "replace", "join", "coll", "list", "collection", "split", "joining", "c", "collections", "trim", "format"], "separator": ["collection", "split", "true", "format", "join", "0", "joining", "\"\"", "null", "trim", "suffix", "prefix", "collections", "sep", "get", "replace", "coll", "list", "c", "false", "glue"]}}
{"code": "public ListTaskDefinitionFamiliesResult listTaskDefinitionFamilies(ListTaskDefinitionFamiliesRequest request) {request = beforeClientExecution(request);return executeListTaskDefinitionFamilies(request);}\n", "substitutes": {"listTaskDefinitionFamilies": ["get", "index", "execute", "list", "lists"], "request": ["input", "get", "parent", "op", "index", "execute", "list", "lists", "request", "req", "call", "instruction", "query"]}}
{"code": "public ListComponentsResult listComponents(ListComponentsRequest request) {request = beforeClientExecution(request);return executeListComponents(request);}\n", "substitutes": {"listComponents": ["get", "execute", "list", "List", "lists"], "request": ["input", "get", "parent", "execute", "list", "List", "lists", "request", "call", "req", "query", "argument", "p"]}}
{"code": "public ActivatePhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"ActivatePhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n", "substitutes": {}}
{"code": "public CreateMatchmakingRuleSetResult createMatchmakingRuleSet(CreateMatchmakingRuleSetRequest request) {request = beforeClientExecution(request);return executeCreateMatchmakingRuleSet(request);}\n", "substitutes": {"createMatchmakingRuleSet": ["result", "create", "execute", "call", "run"], "request": ["result", "create", "input", "parent", "op", "response", "execute", "call", "run", "request", "req", "query", "argument"]}}
{"code": "public ListAvailableManagementCidrRangesResult listAvailableManagementCidrRanges(ListAvailableManagementCidrRangesRequest request) {request = beforeClientExecution(request);return executeListAvailableManagementCidrRanges(request);}\n", "substitutes": {"listAvailableManagementCidrRanges": ["get", "execute", "list", "lists", "call"], "request": ["input", "get", "parent", "op", "execute", "list", "lists", "call", "request", "req", "instruction", "query", "p"]}}
{"code": "public ObjectIdSubclassMap<ObjectId> getBaseObjectIds() {if (baseObjectIds != null)return baseObjectIds;return new ObjectIdSubclassMap<>();}\n", "substitutes": {"getBaseObjectIds": ["create", "base", "get", "build"]}}
{"code": "public DeletePushTemplateResult deletePushTemplate(DeletePushTemplateRequest request) {request = beforeClientExecution(request);return executeDeletePushTemplate(request);}\n", "substitutes": {"deletePushTemplate": ["update", "execute", "run", "delete", "send"], "request": ["input", "update", "parent", "argument", "execute", "run", "request", "req", "call", "delete", "query", "send"]}}
{"code": "public CreateDomainEntryResult createDomainEntry(CreateDomainEntryRequest request) {request = beforeClientExecution(request);return executeCreateDomainEntry(request);}\n", "substitutes": {"createDomainEntry": ["result", "create", "execute", "call", "run"], "request": ["result", "create", "input", "parent", "execute", "call", "run", "request", "req", "query", "argument"]}}
{"code": "public static int getEncodedSize(Object[] values) {int result = values.length * 1;for (Object value : values) {result += getEncodedSize(value);}return result;}\n", "substitutes": {"getEncodedSize": ["length", "count", "size", "len", "sum"], "values": ["length", "array", "list", "value", "count", "objects", "args", "size", "len", "sum", "arr", "values"], "result": ["result", "length", "array", "n", "list", "value", "count", "objects", "args", "size", "len", "sum", "arr", "values"], "value": ["result", "obj", "length", "array", "v", "n", "list", "o", "value", "count", "objects", "val", "args", "size", "len", "sum", "arr", "values"]}}
{"code": "public OpenNLPTokenizerFactory(Map<String,String> args) {super(args);sentenceModelFile = require(args, SENTENCE_MODEL);tokenizerModelFile = require(args, TOKENIZER_MODEL);if ( ! args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n", "substitutes": {"sentenceModelFile": ["simulator", "sender", "sentence", "silence", "sensor"], "tokenizerModelFile": ["simulator", "model", "tokens", "sender", "sentence", "transformer", "silence", "trainer", "sensor", "translator"]}}
{"code": "public final int getInt(int index) {checkIndex(index, SizeOf.INT);return Memory.peekInt(backingArray, offset + index, order);}\n", "substitutes": {"getInt": ["get", "peek", "index", "read"], "index": ["length", "get", "peek", "index", "limit", "1", "position", "count", "order", "offset", "size", "i", "read"]}}
{"code": "public List<Head> getNextHeads(char c) {if (matches(c)) {return newHeads;}return FileNameMatcher.EMPTY_HEAD_LIST;}\n", "substitutes": {"getNextHeads": ["heads", "head", "find", "matches", "match"], "c": ["heads", "char", "regex", "head", "c", "ch", "find", "pattern", "matches", "match"]}}
{"code": "public ByteBuffer putShort(short value) {throw new ReadOnlyBufferException();}\n", "substitutes": {"putShort": ["wrap", "append", "allocate", "buffer", "put"], "value": ["wrap", "s", "append", "value", "allocate", "i", "b", "buffer", "put"]}}
{"code": "public void writeUnshared(Object object) throws IOException {writeObject(object, true);}\n", "substitutes": {"writeUnshared": ["emit", "add", "append", "write", "put"], "object": ["obj", "other", "object", "emit", "add", "o", "append", "value", "out", "write", "put"]}}
{"code": "public int offsetByCodePoints(int index, int codePointOffset) {return Character.offsetByCodePoints(value, 0, count, index,codePointOffset);}\n", "substitutes": {"offsetByCodePoints": ["get", "char", "escape", "decode", "value", "count", "digit"], "index": ["get", "char", "index", "escape", "decode", "value", "c", "0", "count", "1", "offset", "digit", "false"], "codePointOffset": ["get", "char", "index", "escape", "decode", "value", "c", "0", "count", "1", "offset", "type", "digit", "false"]}}
{"code": "public static int getUniqueAlt(Collection<BitSet> altsets) {BitSet all = getAlts(altsets);if ( all.cardinality()==1 ) return all.nextSetBit(0);return ATN.INVALID_ALT_NUMBER;}\n", "substitutes": {"getUniqueAlt": ["number", "length", "id", "index", "count"], "altsets": ["number", "candidates", "length", "id", "index", "coll", "all", "collection", "c", "count", "set"], "all": ["number", "candidates", "length", "ab", "alt", "id", "index", "s", "coll", "all", "collection", "c", "bits", "a", "count", "b", "set"]}}
{"code": "public Date getWhen() {return new Date(when);}\n", "substitutes": {"getWhen": ["create", "today", "get", "when", "now"]}}
{"code": "public RuleTagToken(String ruleName, int bypassTokenType, String label) {if (ruleName == null || ruleName.isEmpty()) {throw new IllegalArgumentException(\"ruleName cannot be null or empty.\");}this.ruleName = ruleName;this.bypassTokenType = bypassTokenType;this.label = label;}\n", "substitutes": {"ruleName": ["name", "prefix", "tag", "pattern", "rule"], "bypassTokenType": ["length", "index", "name", "prefix", "tag", "position", "pos", "offset", "pattern", "flags", "type", "rule"], "label": ["length", "description", "content", "index", "text", "name", "prefix", "tag", "value", "position", "pos", "offset", "pattern", "flags", "type", "comment", "rule"]}}
{"code": "public DisableOrganizationAdminAccountResult disableOrganizationAdminAccount(DisableOrganizationAdminAccountRequest request) {request = beforeClientExecution(request);return executeDisableOrganizationAdminAccount(request);}\n", "substitutes": {"disableOrganizationAdminAccount": ["disable", "execute", "delete", "pause", "enable"], "request": ["input", "parent", "disable", "execute", "request", "req", "call", "instruction", "delete", "query", "pause", "p", "enable"]}}
{"code": "public CreateRoomResult createRoom(CreateRoomRequest request) {request = beforeClientExecution(request);return executeCreateRoom(request);}\n", "substitutes": {"createRoom": ["result", "create", "begin", "execute", "call"], "request": ["result", "create", "begin", "input", "parent", "execute", "call", "request", "req", "query", "p"]}}
{"code": "public ReplicationGroup deleteReplicationGroup(DeleteReplicationGroupRequest request) {request = beforeClientExecution(request);return executeDeleteReplicationGroup(request);}\n", "substitutes": {"deleteReplicationGroup": ["execute", "run", "delete", "Delete", "remove"], "request": ["input", "parent", "response", "execute", "resource", "run", "request", "req", "call", "delete", "query", "Delete", "remove"]}}
{"code": "public final CharBuffer decode(ByteBuffer buffer) {try {return newDecoder().onMalformedInput(CodingErrorAction.REPLACE).onUnmappableCharacter(CodingErrorAction.REPLACE).decode(buffer);} catch (CharacterCodingException ex) {throw new Error(ex.getMessage(), ex);}}\n", "substitutes": {"decode": ["convert", "parse", "decode", "dec", "encode", "decoding", "read"], "buffer": ["convert", "input", "parse", "data", "decode", "dec", "encode", "buf", "b", "decoding", "buffer", "read"]}}
{"code": "public Distribution(String id, String status, String domainName) {setId(id);setStatus(status);setDomainName(domainName);}\n", "substitutes": {"id": ["id", "identifier", "name", "ID", "Id"], "status": ["id", "identifier", "name", "status", "0", "ID", "Status", "Id", "stat"], "domainName": ["description", "id", "domains", "host", "dom", "identifier", "name", "status", "0", "ID", "Status", "Id", "domain", "stat"]}}
{"code": "public final double[] array() {return protectedArray();}\n", "substitutes": {"array": ["protect", "get", "array", "copy"]}}
{"code": "public DateWindow1904Record(RecordInputStream in) {field_1_window = in.readShort();}\n", "substitutes": {"in": ["ins", "in", "is", "out", "stream"], "field_1_window": ["ins", "in", "index", "window", "year", "offset", "is", "out", "day", "stream"]}}
{"code": "public DeleteDBSnapshotRequest(String dBSnapshotIdentifier) {setDBSnapshotIdentifier(dBSnapshotIdentifier);}\n", "substitutes": {"dBSnapshotIdentifier": ["ident", "id", "identifier", "name", "qualifier", "value"]}}
{"code": "public final ParserExtension getExtension(String key) {return this.extensions.get(key);}\n", "substitutes": {"getExtension": ["find", "extract", "get", "extension"], "key": ["get", "id", "path", "key", "name", "extension", "find", "extract"]}}
{"code": "public void inform(ResourceLoader loader) {try {if (chunkerModelFile != null) {OpenNLPOpsFactory.getChunkerModel(chunkerModelFile, loader);}} catch (IOException e) {throw new IllegalArgumentException(e);}}\n", "substitutes": {"inform": ["initialize", "start", "init", "load", "configure"], "loader": ["initialize", "cl", "resource", "this", "null", "start", "loader", "init", "rc", "load", "configure"]}}
{"code": "public CompleteVaultLockResult completeVaultLock(CompleteVaultLockRequest request) {request = beforeClientExecution(request);return executeCompleteVaultLock(request);}\n", "substitutes": {"completeVaultLock": ["update", "lock", "execute", "call", "complete"], "request": ["input", "update", "parent", "lock", "response", "execute", "call", "request", "req", "query", "argument", "complete"]}}
{"code": "public final int[] getCharIntervals() {return points.clone();}\n", "substitutes": {"getCharIntervals": ["points", "dup", "copy", "clone", "clones"]}}
{"code": "public long ramBytesUsed() {return values.ramBytesUsed()+ super.ramBytesUsed()+ Long.BYTES+ RamUsageEstimator.NUM_BYTES_OBJECT_REF;}\n", "substitutes": {"ramBytesUsed": ["next", "length", "get", "peek", "value", "count", "position", "size"]}}
{"code": "public RegisterInstancesWithLoadBalancerResult registerInstancesWithLoadBalancer(RegisterInstancesWithLoadBalancerRequest request) {request = beforeClientExecution(request);return executeRegisterInstancesWithLoadBalancer(request);}\n", "substitutes": {"registerInstancesWithLoadBalancer": ["create", "update", "execute", "call", "register"], "request": ["input", "create", "update", "response", "execute", "resource", "call", "request", "req", "instruction", "query", "register"]}}
{"code": "public DescribeClusterUserKubeconfigRequest() {super(\"CS\", \"2015-12-15\", \"DescribeClusterUserKubeconfig\", \"csk\");setUriPattern(\"/k8s/[ClusterId]/user_config\");setMethod(MethodType.GET);}\n", "substitutes": {}}
{"code": "public PrecisionRecord(RecordInputStream in) {field_1_precision = in.readShort();}\n", "substitutes": {"in": ["ins", "in", "bis", "is", "out", "stream"], "field_1_precision": ["ins", "in", "record", "bis", "position", "precision", "Precision", "offset", "is", "out", "stream"]}}
{"code": "public void serialize(LittleEndianOutput out) {out.writeShort(getLeftRowGutter());out.writeShort(getTopColGutter());out.writeShort(getRowLevelMax());out.writeShort(getColLevelMax());}\n", "substitutes": {"serialize": ["store", "encode", "flush", "print", "write"], "out": ["w", "output", "o", "this", "store", "encode", "out", "flush", "print", "write", "os"]}}
{"code": "public DeleteVirtualInterfaceResult deleteVirtualInterface(DeleteVirtualInterfaceRequest request) {request = beforeClientExecution(request);return executeDeleteVirtualInterface(request);}\n", "substitutes": {"deleteVirtualInterface": ["destroy", "execute", "run", "delete", "send"], "request": ["input", "parent", "destroy", "argument", "execute", "run", "request", "req", "call", "delete", "query", "send", "p"]}}
{"code": "public Entry getEntry(String name) throws FileNotFoundException {if (excludes.contains(name)) {throw new FileNotFoundException(name);}Entry entry = directory.getEntry(name);return wrapEntry(entry);}\n", "substitutes": {"getEntry": ["entry", "get", "add", "lookup", "find", "read"], "name": ["entry", "excludes", "get", "filename", "path", "add", "name", "lookup", "exclude", "key", "find", "pattern", "read"], "entry": ["result", "entry", "excludes", "get", "file", "filename", "path", "add", "name", "lookup", "exclude", "key", "e", "r", "find", "child", "pattern", "read"]}}
{"code": "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[BACKUP]\\n\");buffer.append(\"    .backup          = \").append(Integer.toHexString(getBackup())).append(\"\\n\");buffer.append(\"[/BACKUP]\\n\");return buffer.toString();}\n", "substitutes": {"toString": ["length", "intern", "build", "dump", "reverse", "version", "String", "summary", "string", "trim"], "buffer": ["result", "length", "intern", "build", "s", "dump", "builder", "reverse", "buf", "version", "buffer", "b", "String", "summary", "string", "trim"]}}
{"code": "public DeleteVoiceConnectorOriginationResult deleteVoiceConnectorOrigination(DeleteVoiceConnectorOriginationRequest request) {request = beforeClientExecution(request);return executeDeleteVoiceConnectorOrigination(request);}\n", "substitutes": {"deleteVoiceConnectorOrigination": ["execute", "run", "call", "delete", "send"], "request": ["input", "parent", "execute", "run", "call", "request", "req", "delete", "query", "instruction", "send", "p"]}}
{"code": "public Appendable append(char c) {write(c);return this;}\n", "substitutes": {"append": ["char", "add", "escape", "append", "write"], "c": ["char", "s", "add", "ch", "escape", "append", "c", "b", "write", "character"]}}
{"code": "public static long generationFromSegmentsFileName(String fileName) {if (fileName.equals(OLD_SEGMENTS_GEN)) {throw new IllegalArgumentException(\"\\\"\" + OLD_SEGMENTS_GEN + \"\\\" is not a valid segment file name since 4.0\");} else if (fileName.equals(IndexFileNames.SEGMENTS)) {return 0;} else if (fileName.startsWith(IndexFileNames.SEGMENTS)) {return Long.parseLong(fileName.substring(1+IndexFileNames.SEGMENTS.length()),Character.MAX_RADIX);} else {throw new IllegalArgumentException(\"fileName \\\"\" + fileName + \"\\\" is not a segments file\");}}\n", "substitutes": {"generationFromSegmentsFileName": ["parse", "get", "length", "count", "size"], "fileName": ["parse", "get", "length", "s", "file", "filename", "path", "key", "name", "count", "size"]}}
{"code": "public static TagOpt fromOption(String o) {if (o == null || o.length() == 0)return AUTO_FOLLOW;for (TagOpt tagopt : values()) {if (tagopt.option().equals(o))return tagopt;}throw new IllegalArgumentException(MessageFormat.format(JGitText.get().invalidTagOption, o));}\n", "substitutes": {"fromOption": ["find", "of", "opt", "follow", "option"], "o": ["o", "name", "value", "find", "of", "opt", "follow", "option"], "tagopt": ["v", "o", "name", "tag", "t", "value", "find", "val", "of", "opt", "follow", "option"]}}
{"code": "public StartContentModerationResult startContentModeration(StartContentModerationRequest request) {request = beforeClientExecution(request);return executeStartContentModeration(request);}\n", "substitutes": {"startContentModeration": ["create", "begin", "execute", "start", "call"], "request": ["input", "create", "begin", "execute", "start", "call", "request", "req", "query", "argument", "parameters", "p"]}}
{"code": "public static String quoteReplacement(String s) {StringBuilder result = new StringBuilder(s.length());for (int i = 0; i < s.length(); i++) {char c = s.charAt(i);if (c == '\\\\' || c == '$') {result.append('\\\\');}result.append(c);}return result.toString();}\n", "substitutes": {"quoteReplacement": ["escapes", "escaped", "escape", "quote", "escaping"], "s": ["escapes", "s", "escaped", "escape", "replacement", "value", "str", "pattern", "quote", "escaping", "string"], "result": ["result", "escapes", "s", "escaped", "escape", "replacement", "value", "builder", "buf", "str", "pattern", "b", "quote", "buffer", "escaping", "string"], "i": ["n", "value", "buffer", "s", "pattern", "quote", "escaping", "result", "index", "escape", "replacement", "builder", "str", "b", "string", "j", "i", "k", "escapes", "escaped", "c", "buf", "pos"], "c": ["n", "r", "value", "character", "buffer", "char", "s", "pattern", "quote", "escaping", "result", "index", "escape", "replacement", "builder", "str", "b", "string", "j", "i", "k", "escapes", "escaped", "ch", "c", "buf", "pos"]}}
{"code": "public final void set(V newValue) {value = newValue;}\n", "substitutes": {"set": ["update", "add", "value", "set", "put"], "newValue": ["update", "v", "o", "add", "value", "val", "null", "set", "put"], "value": ["update", "v", "o", "add", "current", "this", "value", "val", "null", "set", "put"]}}
{"code": "public QueryParserTokenManager(CharStream stream){input_stream = stream;}\n", "substitutes": {"stream": ["input", "in", "s", "null", "is", "stream"], "input_stream": ["input", "token", "source", "in", "s", "tokens", "null", "is", "buffer", "stream"]}}
{"code": "public long valueFor(double elapsed) {double val;if (modBy == 0)val = elapsed / factor;elseval = elapsed / factor % modBy;if (type == '0')return Math.round(val);else return (long) val;}\n", "substitutes": {"valueFor": ["mod", "adjust", "round", "abs", "floor"], "elapsed": ["mod", "number", "x", "adjust", "v", "0", "1", "round", "value", "abs", "val", "type", "factor", "floor"], "val": ["mod", "number", "eval", "x", "adjust", "v", "0", "1", "round", "value", "abs", "ret", "interval", "val", "elapsed", "type", "factor", "floor"], "elseval": ["round", "value", "elapsed", "type", "mod", "floor", "eval", "0", "1", "delta", "interval", "number", "x", "adjust", "ret", "abs", "v", "val", "factor", "el"]}}
{"code": "public LongBuffer get(long[] dst, int dstOffset, int longCount) {byteBuffer.limit(limit * SizeOf.LONG);byteBuffer.position(position * SizeOf.LONG);if (byteBuffer instanceof DirectByteBuffer) {((DirectByteBuffer) byteBuffer).get(dst, dstOffset, longCount);} else {((HeapByteBuffer) byteBuffer).get(dst, dstOffset, longCount);}this.position += longCount;return this;}\n", "substitutes": {"get": ["get", "copy", "add", "append", "set", "put"], "dst": ["data", "get", "array", "bytes", "copy", "add", "append", "src", "buf", "buffer", "set", "put"], "dstOffset": ["data", "append", "start", "position", "buffer", "put", "array", "0", "this", "offset", "set", "index", "copy", "add", "src", "limit", "get", "bytes", "buf", "pos"], "longCount": ["data", "append", "start", "position", "buffer", "put", "array", "0", "this", "offset", "set", "index", "copy", "add", "src", "limit", "length", "get", "bytes", "remaining", "buf", "count", "pos", "size"], "position": ["data", "capacity", "append", "start", "position", "buffer", "put", "array", "0", "this", "offset", "set", "index", "copy", "add", "src", "limit", "skip", "length", "get", "bytes", "remaining", "buf", "count", "pos", "size"]}}
{"code": "public void removeErrorListeners() {_listeners.clear();}\n", "substitutes": {"removeErrorListeners": ["destroy", "close", "free", "clear", "remove"]}}
{"code": "public CommonTokenStream(TokenSource tokenSource, int channel) {this(tokenSource);this.channel = channel;}\n", "substitutes": {"tokenSource": ["token", "source", "s", "in", "src"], "channel": ["token", "length", "source", "s", "in", "index", "depth", "src", "offset", "level", "flags", "limit"]}}
{"code": "public ListObjectPoliciesResult listObjectPolicies(ListObjectPoliciesRequest request) {request = beforeClientExecution(request);return executeListObjectPolicies(request);}\n", "substitutes": {"listObjectPolicies": ["get", "execute", "list", "List", "lists"], "request": ["input", "get", "parent", "op", "response", "execute", "list", "List", "lists", "request", "req", "call", "instruction", "query"]}}
{"code": "public ObjectToPack(AnyObjectId src, int type) {super(src);flags = type << TYPE_SHIFT;}\n", "substitutes": {"src": ["obj", "id", "object", "o", "i"], "type": ["obj", "flag", "id", "object", "o", "bits", "flags", "type", "mask", "i"], "flags": ["obj", "flag", "id", "object", "o", "bits", "t", "TYPE", "_", "src", "flags", "type", "mask", "i"]}}
{"code": "public int stem(char s[], int len) {int numVowels = numVowels(s, len);for (int i = 0; i < affixes.length; i++) {Affix affix = affixes[i];if (numVowels > affix.vc && len >= affix.affix.length + 3 && endsWith(s, len, affix.affix)) {len -= affix.affix.length;return affix.palatalizes ? unpalatalize(s, len) : len;}}return len;}\n", "substitutes": {"stem": ["length", "index", "count", "find", "len"], "s": ["length", "s", "index", "text", "ch", "c", "count", "find", "str", "chars", "b", "len"], "len": ["n", "start", "num", "s", "stem", "0", "1", "len", "index", "text", "str", "chars", "b", "i", "length", "ch", "c", "count", "find", "pos"], "numVowels": ["n", "r", "start", "tail", "bc", "num", "s", "stem", "0", "1", "cc", "rc", "len", "trim", "index", "text", "str", "chars", "b", "longest", "i", "length", "ch", "c", "count", "find", "pos"], "i": ["n", "r", "start", "tail", "bc", "num", "s", "stem", "0", "1", "cc", "rc", "len", "trim", "index", "text", "str", "chars", "b", "longest", "i", "j", "length", "ch", "c", "ii", "count", "find", "pos"], "affix": ["n", "r", "start", "a", "tail", "aff", "bc", "num", "s", "stem", "0", "1", "cf", "af", "cc", "rc", "len", "trim", "index", "text", "suffix", "prefix", "str", "chars", "b", "longest", "i", "j", "length", "end", "f", "ch", "c", "ii", "count", "find", "pos"]}}
{"code": "public void recover(Parser recognizer, RecognitionException e) {if ( lastErrorIndex==recognizer.getInputStream().index() &&lastErrorStates != null &&lastErrorStates.contains(recognizer.getState()) ) {recognizer.consume();}lastErrorIndex = recognizer.getInputStream().index();if ( lastErrorStates==null ) lastErrorStates = new IntervalSet();lastErrorStates.add(recognizer.getState());IntervalSet followSet = getErrorRecoverySet(recognizer);consumeUntil(recognizer, followSet);}\n", "substitutes": {"recover": ["skip", "consume", "accept", "consumed", "recover"], "recognizer": ["skip", "input", "parse", "token", "s", "consume", "e", "accept", "r", "parser", "consumed", "p", "reader", "recover"], "e": ["skip", "input", "parse", "token", "s", "consume", "e", "accept", "r", "parser", "consumed", "p", "re", "ignored", "exception", "reader", "ex", "recover"], "lastErrorIndex": ["e", "r", "start", "position", "input", "s", "recover", "token", "parse", "index", "parser", "re", "reader", "i", "skip", "consume", "accept", "consumed", "ignored", "pos", "exception", "ex", "p"], "lastErrorStates": ["items", "ignore", "e", "r", "start", "position", "errors", "input", "s", "states", "set", "recover", "token", "result", "parse", "index", "state", "parser", "re", "reader", "i", "skip", "consume", "accept", "seen", "consumed", "ignored", "pos", "exception", "ex", "p"], "followSet": ["items", "ignore", "e", "r", "start", "position", "errors", "input", "s", "states", "rs", "set", "recover", "token", "result", "parse", "index", "state", "parser", "re", "reader", "i", "skip", "consume", "c", "accept", "seen", "consumed", "cs", "ignored", "pos", "exception", "ex", "p"]}}
{"code": "public String toFormulaString() {String value = field_3_string;int len = value.length();StringBuilder sb = new StringBuilder(len + 4);sb.append(FORMULA_DELIMITER);for (int i = 0; i < len; i++) {char c = value.charAt(i);if (c == FORMULA_DELIMITER) {sb.append(FORMULA_DELIMITER);}sb.append(c);}sb.append(FORMULA_DELIMITER);return sb.toString();}\n", "substitutes": {"toFormulaString": ["get", "field", "str", "String", "string"], "value": ["get", "s", "f", "value", "field", "str", "String", "string"], "len": ["length", "get", "s", "f", "n", "value", "field", "str", "limit", "size", "String", "len", "string", "l"], "sb": ["n", "value", "buffer", "String", "l", "s", "len", "result", "builder", "field", "str", "b", "limit", "string", "length", "get", "f", "buf", "size"], "i": ["n", "value", "buffer", "String", "l", "s", "len", "result", "index", "builder", "field", "str", "b", "limit", "string", "i", "j", "k", "length", "get", "f", "c", "buf", "pos", "size"], "c": ["n", "value", "character", "buffer", "String", "l", "char", "s", "len", "result", "index", "builder", "field", "str", "b", "limit", "string", "i", "j", "k", "length", "get", "f", "ch", "c", "cs", "buf", "pos", "size"]}}
{"code": "public UnlinkFaceRequest() {super(\"LinkFace\", \"2018-07-20\", \"UnlinkFace\");setProtocol(ProtocolType.HTTPS);setMethod(MethodType.POST);}\n", "substitutes": {}}
{"code": "public ConfigurationOptionSetting(String namespace, String optionName, String value) {setNamespace(namespace);setOptionName(optionName);setValue(value);}\n", "substitutes": {"namespace": ["key", "name", "prefix", "namespace", "ns"], "optionName": ["key", "name", "prefix", "field", "namespace", "opt", "option", "ns"], "value": ["v", "key", "name", "prefix", "value", "default", "field", "val", "namespace", "opt", "option", "ns"]}}
{"code": "public CharSequence getFully(CharSequence key) {StringBuilder result = new StringBuilder(tries.size() * 2);for (int i = 0; i < tries.size(); i++) {CharSequence r = tries.get(i).getFully(key);if (r == null || (r.length() == 1 && r.charAt(0) == EOM)) {return result;}result.append(r);}return result;}\n", "substitutes": {"getFully": ["get", "remove", "lookup", "split", "find", "resolve"], "key": ["get", "remove", "name", "lookup", "split", "c", "prefix", "find", "cs", "target", "pattern", "resolve"], "result": ["split", "r", "s", "name", "target", "\"\"", "null", "pattern", "result", "prefix", "ret", "builder", "str", "b", "remove", "get", "lookup", "c", "find", "cs", "buf", "resolve"], "i": ["n", "split", "r", "s", "name", "t", "target", "\"\"", "null", "pattern", "result", "index", "prefix", "ret", "builder", "str", "b", "remove", "i", "j", "k", "get", "lookup", "c", "ii", "find", "cs", "buf", "resolve"], "r": ["n", "split", "r", "value", "line", "char", "s", "key", "name", "t", "target", "\"\"", "null", "pattern", "result", "res", "index", "prefix", "ret", "builder", "str", "b", "remove", "i", "j", "k", "entry", "get", "lookup", "c", "ii", "find", "cs", "buf", "val", "resolve"]}}
{"code": "public DescribeMountTargetSecurityGroupsResult describeMountTargetSecurityGroups(DescribeMountTargetSecurityGroupsRequest request) {request = beforeClientExecution(request);return executeDescribeMountTargetSecurityGroups(request);}\n", "substitutes": {"describeMountTargetSecurityGroups": ["execute", "list", "call", "describe", "summary"], "request": ["input", "parent", "op", "execute", "list", "call", "request", "req", "instruction", "query", "describe", "summary"]}}
{"code": "public GetApiMappingResult getApiMapping(GetApiMappingRequest request) {request = beforeClientExecution(request);return executeGetApiMapping(request);}\n", "substitutes": {"getApiMapping": ["get", "execute", "list", "call", "invoke"], "request": ["input", "get", "parent", "op", "execute", "list", "call", "invoke", "request", "req", "instruction", "query", "p"]}}
{"code": "public HttpRequest(String strUrl) {super(strUrl);}\n", "substitutes": {"strUrl": ["method", "path", "name", "url", "request"]}}
{"code": "public MemFuncPtg(int subExprLen) {field_1_len_ref_subexpression = subExprLen;}\n", "substitutes": {"subExprLen": ["index", "n", "0", "1", "offset", "i", "arg"], "field_1_len_ref_subexpression": ["length", "index", "n", "limit", "0", "1", "offset", "size", "len", "i", "arg"]}}
{"code": "public static TermStats[] getHighFreqTerms(IndexReader reader, int numTerms, String field, Comparator<TermStats> comparator) throws Exception {TermStatsQueue tiq = null;if (field != null) {Terms terms = MultiTerms.getTerms(reader, field);if (terms == null) {throw new RuntimeException(\"field \" + field + \" not found\");}TermsEnum termsEnum = terms.iterator();tiq = new TermStatsQueue(numTerms, comparator);tiq.fill(field, termsEnum);} else {Collection<String> fields = FieldInfos.getIndexedFields(reader);if (fields.size() == 0) {throw new RuntimeException(\"no fields found for this index\");}tiq = new TermStatsQueue(numTerms, comparator);for (String fieldName : fields) {Terms terms = MultiTerms.getTerms(reader, fieldName);if (terms != null) {tiq.fill(fieldName, terms.iterator());}}}TermStats[] result = new TermStats[tiq.size()];int count = tiq.size() - 1;while (tiq.size() != 0) {result[count] = tiq.pop();count--;}return result;}\n", "substitutes": {"getHighFreqTerms": ["find", "get", "split", "read"], "reader": ["get", "in", "index", "file", "f", "ir", "split", "r", "find", "reader", "read"], "numTerms": ["get", "in", "index", "file", "f", "ir", "split", "r", "start", "find", "count", "term", "limit", "size", "reader", "read"], "field": ["file", "split", "r", "start", "term", "key", "name", "read", "index", "ir", "prefix", "field", "limit", "reader", "get", "in", "f", "fields", "find", "count", "size"], "comparator": ["desc", "file", "split", "r", "start", "term", "comp", "key", "name", "0", "null", "sort", "read", "index", "ir", "prefix", "field", "limit", "reader", "get", "in", "f", "coll", "fields", "c", "find", "count", "order", "size", "compar"], "tiq": ["desc", "file", "split", "r", "start", "term", "comp", "key", "name", "0", "stats", "null", "sort", "queues", "read", "result", "results", "res", "index", "ir", "prefix", "ret", "field", "q", "queue", "stack", "limit", "reader", "get", "in", "f", "coll", "fields", "c", "find", "count", "order", "size", "compar"], "terms": ["desc", "file", "split", "r", "start", "term", "comp", "key", "name", "0", "es", "tokens", "stats", "Terms", "null", "sort", "queues", "read", "result", "results", "res", "m", "index", "ir", "prefix", "ret", "field", "q", "queue", "stack", "limit", "terms", "reader", "docs", "get", "in", "f", "coll", "fields", "c", "find", "count", "order", "size", "compar"], "termsEnum": ["desc", "file", "e", "split", "r", "start", "term", "iter", "comp", "key", "name", "0", "es", "tokens", "stats", "Terms", "null", "sort", "queues", "read", "result", "results", "res", "m", "index", "ir", "prefix", "ret", "field", "q", "iterator", "queue", "stack", "limit", "terms", "it", "reader", "docs", "i", "get", "in", "f", "coll", "fields", "c", "find", "count", "order", "size", "compar"], "fields": ["desc", "file", "e", "split", "r", "start", "term", "keys", "files", "iter", "comp", "key", "name", "0", "es", "tokens", "names", "stats", "Terms", "null", "sort", "queues", "read", "result", "results", "res", "m", "index", "ir", "prefix", "ret", "field", "q", "iterator", "queue", "stack", "limit", "terms", "it", "reader", "docs", "i", "get", "in", "f", "coll", "fields", "list", "c", "find", "count", "order", "size", "compar"], "fieldName": ["desc", "file", "e", "split", "r", "start", "term", "keys", "files", "iter", "comp", "key", "name", "0", "es", "tokens", "names", "stats", "Terms", "null", "sort", "queues", "read", "result", "results", "res", "m", "index", "ir", "prefix", "ret", "field", "q", "iterator", "queue", "stack", "limit", "terms", "it", "reader", "docs", "i", "get", "in", "f", "coll", "fields", "list", "c", "find", "count", "order", "size", "compar"], "result": ["desc", "file", "e", "split", "r", "start", "term", "keys", "files", "iter", "comp", "key", "name", "0", "es", "tokens", "names", "stats", "Terms", "null", "sort", "queues", "read", "result", "results", "res", "m", "index", "ir", "prefix", "ret", "field", "q", "iterator", "queue", "stack", "limit", "terms", "it", "reader", "docs", "i", "get", "in", "f", "coll", "fields", "list", "c", "find", "count", "order", "size", "compar"], "count": ["desc", "file", "n", "e", "split", "r", "start", "term", "keys", "files", "iter", "comp", "key", "name", "0", "es", "tokens", "names", "stats", "Terms", "null", "sort", "queues", "read", "result", "results", "res", "m", "index", "ir", "prefix", "ret", "field", "q", "iterator", "queue", "stack", "limit", "terms", "it", "reader", "docs", "i", "j", "get", "end", "in", "f", "coll", "fields", "list", "c", "find", "count", "order", "pos", "size", "compar"]}}
{"code": "public DeleteApnsVoipChannelResult deleteApnsVoipChannel(DeleteApnsVoipChannelRequest request) {request = beforeClientExecution(request);return executeDeleteApnsVoipChannel(request);}\n", "substitutes": {"deleteApnsVoipChannel": ["destroy", "execute", "run", "delete", "send"], "request": ["input", "parent", "destroy", "execute", "run", "request", "req", "call", "delete", "query", "instruction", "send", "p"]}}
{"code": "public ListFacesResult listFaces(ListFacesRequest request) {request = beforeClientExecution(request);return executeListFaces(request);}\n", "substitutes": {"listFaces": ["get", "index", "execute", "list", "lists"], "request": ["input", "get", "parent", "index", "execute", "list", "lists", "request", "call", "req", "instruction", "query", "argument", "p"]}}
{"code": "public ShapeFieldCacheDistanceValueSource(SpatialContext ctx,ShapeFieldCacheProvider<Point> provider, Point from, double multiplier) {this.ctx = ctx;this.from = from;this.provider = provider;this.multiplier = multiplier;}\n", "substitutes": {"ctx": ["context", "parent", "sc", "in", "from", "to", "cx", "cc", "pc"], "provider": ["context", "providers", "parent", "sc", "in", "cp", "from", "gp", "to", "cx", "cc", "pc", "provider", "distance", "cache"], "from": ["providers", "gp", "value", "to", "cx", "context", "target", "cc", "provider", "distance", "sc", "point", "center", "cache", "parent", "cp", "in", "dist", "from", "pc"], "multiplier": ["providers", "gp", "value", "to", "cx", "context", "target", "cc", "provider", "distance", "sc", "score", "point", "center", "cache", "parent", "cp", "in", "until", "dist", "from", "pc"]}}
{"code": "public char get(int index) {checkIndex(index);return sequence.charAt(index);}\n", "substitutes": {"get": ["get", "char", "value", "at", "At"], "index": ["get", "char", "index", "value", "at", "position", "At", "pos", "offset", "i"]}}
{"code": "public UpdateConfigurationProfileResult updateConfigurationProfile(UpdateConfigurationProfileRequest request) {request = beforeClientExecution(request);return executeUpdateConfigurationProfile(request);}\n", "substitutes": {"updateConfigurationProfile": ["update", "apply", "execute", "call", "run"], "request": ["input", "update", "apply", "parent", "execute", "call", "run", "request", "req", "query", "argument", "p"]}}
{"code": "public DescribeLifecycleHooksResult describeLifecycleHooks(DescribeLifecycleHooksRequest request) {request = beforeClientExecution(request);return executeDescribeLifecycleHooks(request);}\n", "substitutes": {"describeLifecycleHooks": ["list", "execute", "call", "send", "describe"], "request": ["input", "parent", "op", "list", "execute", "call", "request", "req", "instruction", "query", "send", "p", "describe"]}}
{"code": "public DescribeHostReservationsResult describeHostReservations(DescribeHostReservationsRequest request) {request = beforeClientExecution(request);return executeDescribeHostReservations(request);}\n", "substitutes": {"describeHostReservations": ["begin", "execute", "send", "summary", "describe"], "request": ["input", "begin", "parent", "argument", "execute", "request", "req", "call", "instruction", "query", "send", "summary", "describe"]}}
{"code": "public static PredictionContext fromRuleContext(ATN atn, RuleContext outerContext) {if ( outerContext==null ) outerContext = RuleContext.EMPTY;if ( outerContext.parent==null || outerContext==RuleContext.EMPTY ) {return PredictionContext.EMPTY;}PredictionContext parent = EMPTY;parent = PredictionContext.fromRuleContext(atn, outerContext.parent);ATNState state = atn.states.get(outerContext.invokingState);RuleTransition transition = (RuleTransition)state.transition(0);return SingletonPredictionContext.create(parent, transition.followState.stateNumber);}\n", "substitutes": {"fromRuleContext": ["create", "parent", "build", "get", "merge", "make", "from", "of"], "atn": ["create", "an", "parent", "build", "get", "merge", "make", "analysis", "n", "from", "a", "self", "target", "of", "rule"], "outerContext": ["create", "make", "analysis", "n", "a", "self", "rule", "context", "build", "target", "of", "ic", "conf", "sc", "merge", "an", "parent", "get", "c", "from"], "parent": ["create", "make", "analysis", "n", "a", "self", "rule", "context", "build", "states", "target", "of", "ic", "conf", "result", "sc", "merge", "state", "an", "parent", "get", "c", "from", "rules", "cs", "pc"], "state": ["create", "make", "analysis", "n", "a", "self", "rule", "st", "context", "build", "s", "states", "target", "of", "ic", "conf", "result", "sc", "merge", "state", "an", "parent", "get", "c", "from", "rules", "cs", "pc"], "transition": ["create", "make", "analysis", "n", "a", "self", "rule", "st", "context", "build", "s", "t", "tr", "at", "states", "target", "of", "ic", "conf", "trans", "result", "next", "sc", "merge", "state", "remove", "an", "parent", "get", "transition", "c", "from", "rules", "cs", "pc"]}}
{"code": "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[SXVDEX]\\n\");buffer.append(\"    .grbit1 =\").append(HexDump.intToHex(_grbit1)).append(\"\\n\");buffer.append(\"    .grbit2 =\").append(HexDump.byteToHex(_grbit2)).append(\"\\n\");buffer.append(\"    .citmShow =\").append(HexDump.byteToHex(_citmShow)).append(\"\\n\");buffer.append(\"    .isxdiSort =\").append(HexDump.shortToHex(_isxdiSort)).append(\"\\n\");buffer.append(\"    .isxdiShow =\").append(HexDump.shortToHex(_isxdiShow)).append(\"\\n\");buffer.append(\"    .subtotalName =\").append(_subtotalName).append(\"\\n\");buffer.append(\"[/SXVDEX]\\n\");return buffer.toString();}\n", "substitutes": {"toString": ["length", "build", "output", "dump", "hex", "reverse", "String", "string", "trim"], "buffer": ["result", "length", "build", "s", "output", "dump", "hex", "reverse", "builder", "buf", "buffer", "b", "String", "string", "trim"]}}
{"code": "public String toString() {StringBuilder r = new StringBuilder();r.append(\"BlameResult: \"); r.append(getResultPath());return r.toString();}\n", "substitutes": {"toString": ["result", "length", "description", "name", "reverse", "String", "summary", "string", "trim", "format"], "r": ["result", "length", "description", "s", "name", "builder", "reverse", "buf", "b", "String", "summary", "string", "trim", "format"]}}
{"code": "public ListChangeSetsResult listChangeSets(ListChangeSetsRequest request) {request = beforeClientExecution(request);return executeListChangeSets(request);}\n", "substitutes": {"listChangeSets": ["update", "get", "execute", "list", "lists"], "request": ["input", "update", "get", "parent", "op", "response", "execute", "list", "resource", "lists", "request", "call", "req", "query"]}}
{"code": "public boolean isAllowNonFastForwards() {return allowNonFastForwards;}\n", "substitutes": {"isAllowNonFastForwards": ["get", "accept", "readable", "allowed", "allow"]}}
{"code": "public FeatRecord() {futureHeader = new FtrHeader();futureHeader.setRecordType(sid);}\n", "substitutes": {"futureHeader": ["f", "h", "record", "rec", "this", "header"]}}
{"code": "public ShortBuffer put(short c) {throw new ReadOnlyBufferException();}\n", "substitutes": {"put": ["wrap", "add", "append", "buffer", "put"], "c": ["wrap", "s", "v", "add", "append", "value", "b", "buffer", "put"]}}
{"code": "public void setQuery(CharSequence query) {this.query = query;this.message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, \"\");}\n", "substitutes": {"setQuery": ["parse", "add", "init", "query", "set"], "query": ["parse", "queries", "sql", "text", "add", "q", "init", "query", "\"\"", "null", "set", "string"], "message": ["parse", "queries", "messages", "sql", "text", "add", "message", "q", "error", "init", "query", "\"\"", "null", "errors", "set", "string", "msg"]}}
{"code": "public StashApplyCommand stashApply() {return new StashApplyCommand(repo);}\n", "substitutes": {"stashApply": ["clone", "create", "build", "builder"]}}
{"code": "public Set<String> nameSet() {return Collections.unmodifiableSet(dictionary.values());}\n", "substitutes": {"nameSet": ["all", "names", "keys", "set", "values"]}}
{"code": "public static int getEffectivePort(String scheme, int specifiedPort) {if (specifiedPort != -1) {return specifiedPort;}if (\"http\".equalsIgnoreCase(scheme)) {return 80;} else if (\"https\".equalsIgnoreCase(scheme)) {return 443;} else {return -1;}}\n", "substitutes": {"getEffectivePort": ["port", "Port", "get"], "scheme": ["port", "get", "host", "name", "url", "protocol", "scheme", "Port"], "specifiedPort": ["443", "port", "get", "ip", "host", "index", "n", "name", "default", "url", "protocol", "scheme", "Port", "i"]}}
{"code": "public ListAssessmentTemplatesResult listAssessmentTemplates(ListAssessmentTemplatesRequest request) {request = beforeClientExecution(request);return executeListAssessmentTemplates(request);}\n", "substitutes": {"listAssessmentTemplates": ["get", "execute", "list", "List", "lists"], "request": ["input", "get", "parent", "op", "response", "execute", "list", "List", "lists", "request", "req", "call", "instruction", "query", "p"]}}
{"code": "public Cluster restoreFromClusterSnapshot(RestoreFromClusterSnapshotRequest request) {request = beforeClientExecution(request);return executeRestoreFromClusterSnapshot(request);}\n", "substitutes": {"restoreFromClusterSnapshot": ["restore", "execute", "Result", "snapshot", "Store"], "request": ["input", "restore", "execute", "Result", "resource", "request", "call", "req", "snapshot", "query", "argument", "parameters", "Store"]}}
{"code": "public void addShape(HSSFShape shape) {shape.setPatriarch(this.getPatriarch());shape.setParent(this);shapes.add(shape);}\n", "substitutes": {"addShape": ["visit", "add", "append", "insert", "push"], "shape": ["visit", "s", "h", "shape", "add", "append", "child", "insert", "sh", "push", "shapes"]}}
{"code": "public boolean equals(Object o) {if (this == o) return true;if (o == null || getClass() != o.getClass()) return false;FacetEntry that = (FacetEntry) o;if (count != that.count) return false;if (!value.equals(that.value)) return false;return true;}\n", "substitutes": {"equals": ["equals", "compare", "equal", "eq", "matches", "contains"], "o": ["obj", "other", "equals", "object", "o", "compare", "this", "equal", "value", "target", "eq", "that", "null", "matches", "contains"], "that": ["object", "e", "value", "ele", "that", "contains", "obj", "other", "o", "compare", "this", "equal", "target", "eq", "null", "matches", "entry", "f", "equals", "c", "ce"]}}
{"code": "public static final int prev(byte[] b, int ptr, char chrA) {if (ptr == b.length)--ptr;while (ptr >= 0) {if (b[ptr--] == chrA)return ptr;}return ptr;}\n", "substitutes": {"prev": ["skip", "index", "find", "pos", "search"], "b": ["skip", "data", "index", "bytes", "find", "buf", "pos", "b", "search", "buffer", "arr"], "ptr": ["skip", "data", "index", "bytes", "n", "0", "start", "find", "buf", "j", "pos", "b", "search", "buffer", "arr", "i", "l"], "chrA": ["data", "n", "r", "start", "buffer", "prev", "l", "0", "index", "b", "search", "arr", "j", "i", "skip", "bytes", "v", "ch", "c", "find", "buf", "pos"]}}
{"code": "public final boolean isDeltaRepresentation() {return deltaBase != null;}\n", "substitutes": {"isDeltaRepresentation": ["base", "exists", "delta", "isEnabled", "has"]}}
{"code": "public Token emitEOF() {int cpos = getCharPositionInLine();int line = getLine();Token eof = _factory.create(_tokenFactorySourcePair, Token.EOF, null, Token.DEFAULT_CHANNEL, _input.index(), _input.index()-1,line, cpos);emit(eof);return eof;}\n", "substitutes": {"emitEOF": ["next", "end", "peek", "close", "read"], "cpos": ["next", "end", "peek", "column", "ch", "position", "pos", "offset", "close", "read"], "line": ["next", "line", "end", "peek", "column", "n", "ch", "lines", "position", "lin", "pos", "offset", "close", "l", "read"], "eof": ["column", "n", "position", "lin", "l", "input", "line", "t", "offset", "close", "read", "next", "token", "result", "peek", "ret", "te", "end", "source", "f", "ch", "lines", "pos"]}}
{"code": "public UpdateUserRequest(String userName) {setUserName(userName);}\n", "substitutes": {"userName": ["input", "user", "name", "value", "username", "email"]}}
{"code": "public RevFilter negate() {return NotRevFilter.create(this);}\n", "substitutes": {"negate": ["create", "filter", "none", "not", "null"]}}
{"code": "public void setTagger(PersonIdent taggerIdent) {tagger = taggerIdent;}\n", "substitutes": {"setTagger": ["add", "tag", "init", "register", "set"], "taggerIdent": ["ident", "ifier", "id", "person", "identifier", "add", "tag", "init", "register", "null", "set"], "tagger": ["ident", "ifier", "id", "tagging", "person", "identifier", "add", "name", "tag", "init", "register", "null", "set"]}}
{"code": "public static BufferSize automatic() {Runtime rt = Runtime.getRuntime();final long max = rt.maxMemory(); final long total = rt.totalMemory(); final long free = rt.freeMemory(); final long totalAvailableBytes = max - total + free;long sortBufferByteSize = free/2;final long minBufferSizeBytes = MIN_BUFFER_SIZE_MB*MB;if (sortBufferByteSize <  minBufferSizeBytes|| totalAvailableBytes > 10 * minBufferSizeBytes) { if (totalAvailableBytes/2 > minBufferSizeBytes) { sortBufferByteSize = totalAvailableBytes/2; } else {sortBufferByteSize = Math.max(ABSOLUTE_MIN_SORT_BUFFER_SIZE, sortBufferByteSize);}}return new BufferSize(Math.min((long)Integer.MAX_VALUE, sortBufferByteSize));}\n", "substitutes": {"automatic": ["create", "get", "allocate", "max", "alloc"], "rt": ["create", "get", "runtime", "ir", "r", "br", "allocate", "max", "t", "mem", "stats", "alloc", "Runtime"], "max": ["create", "r", "round", "pow", "alloc", "t", "allocate", "mem", "stats", "Runtime", "MB", "min", "add", "runtime", "ir", "br", "max", "total", "limit", "get"], "total": ["create", "r", "round", "used", "pow", "allocated", "alloc", "t", "allocate", "mem", "stats", "Runtime", "MB", "min", "Total", "add", "runtime", "ir", "br", "max", "total", "limit", "get"], "free": ["create", "r", "round", "used", "pow", "allocated", "alloc", "t", "1", "allocate", "mem", "stats", "Runtime", "MB", "min", "Total", "add", "runtime", "ir", "br", "max", "total", "limit", "free", "get", "available"], "totalAvailableBytes": ["create", "r", "round", "used", "pow", "allocated", "alloc", "GB", "t", "1", "allocate", "mem", "JM", "stats", "Runtime", "MB", "min", "Total", "add", "runtime", "ir", "br", "max", "total", "limit", "free", "get", "available", "size"], "sortBufferByteSize": ["create", "r", "round", "used", "pow", "allocated", "alloc", "GB", "t", "1", "allocate", "mem", "JM", "stats", "Runtime", "MB", "min", "Total", "add", "runtime", "ir", "br", "max", "total", "limit", "free", "get", "available", "size"], "minBufferSizeBytes": ["create", "r", "round", "used", "pow", "threshold", "allocated", "alloc", "GB", "0", "t", "1", "allocate", "KB", "mem", "JM", "stats", "Runtime", "MB", "min", "Total", "add", "runtime", "ir", "br", "max", "total", "limit", "free", "get", "available", "size"]}}
{"code": "public static int trimTrailingWhitespace(byte[] raw, int start, int end) {int ptr = end - 1;while (start <= ptr && isWhitespace(raw[ptr]))ptr--;return ptr + 1;}\n", "substitutes": {"trimTrailingWhitespace": ["skip", "next", "index", "find", "pos"], "raw": ["skip", "next", "input", "data", "index", "bytes", "find", "buf", "pos", "b", "buffer"], "start": ["skip", "next", "input", "data", "begin", "end", "index", "bytes", "0", "1", "start", "find", "buf", "offset", "pos", "b", "buffer"], "end": ["data", "n", "start", "buffer", "input", "begin", "0", "1", "offset", "len", "stop", "next", "index", "b", "limit", "skip", "length", "end", "bytes", "find", "buf", "pos"], "ptr": ["data", "n", "start", "buffer", "input", "begin", "0", "1", "offset", "len", "stop", "next", "index", "b", "limit", "i", "j", "skip", "length", "end", "bytes", "find", "buf", "count", "pos"]}}
{"code": "public TopMarginRecord( RecordInputStream in ) {field_1_margin = in.readDouble();}\n", "substitutes": {"in": ["ins", "in", "din", "is", "out", "stream"], "field_1_margin": ["width", "ins", "in", "height", "din", "top", "bottom", "is", "out", "margin", "stream"]}}
{"code": "public RetrieveEnvironmentInfoRequest(EnvironmentInfoType infoType) {setInfoType(infoType.toString());}\n", "substitutes": {"infoType": ["info", "s", "e", "t", "value", "type"]}}
{"code": "public CreatePlayerSessionsResult createPlayerSessions(CreatePlayerSessionsRequest request) {request = beforeClientExecution(request);return executeCreatePlayerSessions(request);}\n", "substitutes": {"createPlayerSessions": ["create", "begin", "execute", "call", "run"], "request": ["input", "create", "begin", "parent", "execute", "resource", "call", "run", "request", "req", "query", "argument"]}}
{"code": "public CreateProxySessionResult createProxySession(CreateProxySessionRequest request) {request = beforeClientExecution(request);return executeCreateProxySession(request);}\n", "substitutes": {"createProxySession": ["create", "begin", "execute", "call", "run"], "request": ["input", "create", "begin", "parent", "execute", "call", "run", "request", "req", "query", "argument", "p"]}}
{"code": "public int getObjectType() {return type;}\n", "substitutes": {"getObjectType": ["kind", "get", "Type", "size", "type"]}}
{"code": "public String getScheme() {return scheme;}\n", "substitutes": {"getScheme": ["name", "scheme", "Scheme", "get"]}}
{"code": "public void characters(char[] ch, int start, int length) {contents.append(ch, start, length);}\n", "substitutes": {"characters": ["add", "append", "insert", "write", "put"], "ch": ["text", "add", "append", "buf", "chars", "characters", "insert", "buffer", "content", "write", "put"], "start": ["index", "off", "text", "add", "append", "start", "buf", "chars", "characters", "insert", "offset", "pos", "buffer", "content", "write", "put"], "length": ["append", "start", "buffer", "content", "write", "put", "characters", "offset", "len", "stop", "index", "off", "text", "add", "chars", "length", "end", "count", "buf", "insert", "pos"]}}
{"code": "public FetchAlbumTagPhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"FetchAlbumTagPhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n", "substitutes": {}}
{"code": "public DeleteMembersResult deleteMembers(DeleteMembersRequest request) {request = beforeClientExecution(request);return executeDeleteMembers(request);}\n", "substitutes": {"deleteMembers": ["begin", "execute", "delete", "send", "complete"], "request": ["input", "begin", "parent", "execute", "resource", "request", "call", "req", "delete", "query", "send", "p", "complete"]}}
{"code": "public GetContactReachabilityStatusResult getContactReachabilityStatus(GetContactReachabilityStatusRequest request) {request = beforeClientExecution(request);return executeGetContactReachabilityStatus(request);}\n", "substitutes": {"getContactReachabilityStatus": ["get", "execute", "status", "call", "run"], "request": ["input", "get", "parent", "execute", "status", "call", "run", "request", "req", "query", "instruction", "p"]}}
{"code": "@Override public boolean remove(Object o) {return Impl.this.remove(o) != null;}\n", "substitutes": {"remove": ["convert", "apply", "get", "equals", "accept", "invoke", "contains", "remove"], "o": ["convert", "obj", "apply", "get", "id", "equals", "object", "o", "accept", "invoke", "i", "contains", "remove"]}}
{"code": "public E last() {return backingMap.lastKey();}\n", "substitutes": {"last": ["next", "get", "peek", "key", "last"]}}
{"code": "public CreateStreamingDistributionResult createStreamingDistribution(CreateStreamingDistributionRequest request) {request = beforeClientExecution(request);return executeCreateStreamingDistribution(request);}\n", "substitutes": {"createStreamingDistribution": ["create", "execute", "call", "run", "describe"], "request": ["input", "create", "parent", "argument", "execute", "resource", "call", "run", "request", "req", "instruction", "query", "describe", "parameters", "p"]}}
{"code": "public boolean isAbsolute() {return absolute;}\n", "substitutes": {"isAbsolute": ["Absolute", "relative", "absolute"]}}
{"code": "public DisableAddOnResult disableAddOn(DisableAddOnRequest request) {request = beforeClientExecution(request);return executeDisableAddOn(request);}\n", "substitutes": {"disableAddOn": ["update", "disable", "execute", "delete", "enable"], "request": ["input", "update", "parent", "disable", "execute", "resource", "request", "req", "call", "delete", "argument", "p", "enable"]}}
{"code": "public DescribeAliasResult describeAlias(DescribeAliasRequest request) {request = beforeClientExecution(request);return executeDescribeAlias(request);}\n", "substitutes": {"describeAlias": ["create", "execute", "call", "request", "describe"], "request": ["input", "create", "parent", "argument", "execute", "call", "request", "req", "query", "describe"]}}
{"code": "public void next(int delta) {while (--delta >= 0) {if (currentSubtree != null)ptr += currentSubtree.getEntrySpan();elseptr++;if (eof())break;parseEntry();}}\n", "substitutes": {"next": ["skip", "update", "parse", "advance", "increment"], "delta": ["skip", "update", "parse", "advance", "index", "n", "increment", "pointer", "offset", "pc", "len", "ptr"], "ptr": ["skip", "update", "parse", "advance", "span", "index", "n", "increment", "pointer", "delta", "offset", "pc", "len", "ptr", "Delta"], "elseptr": ["skip", "update", "parse", "advance", "span", "index", "n", "increment", "pointer", "size", "delta", "offset", "pc", "len", "ptr", "Delta"]}}
{"code": "public RevFilter clone() {return new Binary(a.clone(), b.clone());}\n", "substitutes": {"clone": ["binary", "get", "build", "name", "filter", "head", "digest", "init", "hash", "rev"]}}
{"code": "public Reader create(Reader input) {return new PersianCharFilter(input);}\n", "substitutes": {"create": ["wrap", "create", "convert", "filter", "read"], "input": ["wrap", "create", "convert", "input", "in", "filter", "r", "reader", "stream", "read"]}}
{"code": "public String option() {return option;}\n", "substitutes": {"option": ["get", "name", "this", "value", "str", "\"\"", "null", "string"]}}
{"code": "public String toString() {final StringBuilder sb = new StringBuilder(\"[\");for (Object item : this) {if (sb.length()>1) sb.append(\", \");if (item instanceof char[]) {sb.append((char[]) item);} else {sb.append(item);}}return sb.append(']').toString();}\n", "substitutes": {"toString": ["intern", "length", "join", "value", "str", "String", "string", "trim"], "sb": ["result", "intern", "length", "s", "join", "value", "builder", "buf", "str", "buffer", "b", "String", "string", "trim"], "item": ["result", "obj", "intern", "length", "s", "join", "o", "object", "v", "value", "builder", "buf", "str", "buffer", "b", "String", "string", "trim"]}}
{"code": "public DescribeSignalingChannelResult describeSignalingChannel(DescribeSignalingChannelRequest request) {request = beforeClientExecution(request);return executeDescribeSignalingChannel(request);}\n", "substitutes": {"describeSignalingChannel": ["execute", "call", "request", "send", "describe"], "request": ["input", "parent", "argument", "execute", "call", "request", "req", "query", "send", "parameters", "p", "describe"]}}
{"code": "public AttachStaticIpResult attachStaticIp(AttachStaticIpRequest request) {request = beforeClientExecution(request);return executeAttachStaticIp(request);}\n", "substitutes": {"attachStaticIp": ["result", "apply", "execute", "attach", "call"], "request": ["result", "input", "apply", "parent", "execute", "attach", "call", "request", "req", "instruction", "query", "argument", "p"]}}
{"code": "public String toString() {StringBuilder sb = new StringBuilder(64);CellReference crA = new CellReference(_firstRowIndex, _firstColumnIndex, false, false);CellReference crB = new CellReference(_lastRowIndex, _lastColumnIndex, false, false);sb.append(getClass().getName());sb.append(\" [\").append(crA.formatAsString()).append(':').append(crB.formatAsString()).append(\"]\");return sb.toString();}\n", "substitutes": {"toString": ["length", "build", "generate", "reverse", "print", "String", "string", "trim", "format"], "sb": ["result", "length", "build", "s", "generate", "builder", "reverse", "buf", "b", "print", "String", "string", "trim", "format"], "crA": ["A", "a", "reverse", "String", "lb", "format", "build", "s", "generate", "trim", "result", "builder", "b", "fr", "string", "length", "CR", "buf", "AB", "print"], "crB": ["A", "a", "reverse", "String", "lb", "B", "format", "build", "s", "generate", "trim", "result", "cr", "builder", "b", "fr", "string", "length", "CR", "c", "buf", "AB", "print"]}}
{"code": "public BloomFilteringPostingsFormat(PostingsFormat delegatePostingsFormat,BloomFilterFactory bloomFilterFactory) {super(BLOOM_CODEC_NAME);this.delegatePostingsFormat = delegatePostingsFormat;this.bloomFilterFactory = bloomFilterFactory;}\n", "substitutes": {"delegatePostingsFormat": ["f", "filter", "parser", "fs", "factory", "format"], "bloomFilterFactory": ["f", "filter", "parser", "cf", "fs", "factory", "format"]}}
{"code": "public ListTemplatesResult listTemplates(ListTemplatesRequest request) {request = beforeClientExecution(request);return executeListTemplates(request);}\n", "substitutes": {"listTemplates": ["get", "execute", "list", "List", "lists"], "request": ["input", "get", "parent", "response", "execute", "list", "List", "lists", "request", "call", "req", "query", "argument"]}}
{"code": "public TimerThread(long resolution, Counter counter) {super(THREAD_NAME);this.resolution = resolution;this.counter = counter;this.setDaemon(true);}\n", "substitutes": {"resolution": ["id", "duration", "name", "timeout", "interval"], "counter": ["id", "counters", "duration", "name", "timeout", "counter", "c", "count", "Counter", "interval", "timer"]}}
{"code": "public DrawingRecord() {recordData = EMPTY_BYTE_ARRAY;}\n", "substitutes": {"recordData": ["data", "records", "bytes", "buffer", "buffers"]}}
{"code": "public ListDirectoriesResult listDirectories(ListDirectoriesRequest request) {request = beforeClientExecution(request);return executeListDirectories(request);}\n", "substitutes": {"listDirectories": ["ls", "execute", "list", "List", "lists"], "request": ["input", "parent", "ls", "execute", "list", "List", "lists", "request", "call", "req", "instruction", "query", "p"]}}
{"code": "public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {for (int j = 0; j < iterations; ++j) {final byte block = blocks[blocksOffset++];values[valuesOffset++] = (block >>> 7) & 1;values[valuesOffset++] = (block >>> 6) & 1;values[valuesOffset++] = (block >>> 5) & 1;values[valuesOffset++] = (block >>> 4) & 1;values[valuesOffset++] = (block >>> 3) & 1;values[valuesOffset++] = (block >>> 2) & 1;values[valuesOffset++] = (block >>> 1) & 1;values[valuesOffset++] = block & 1;}}\n", "substitutes": {"decode": ["process", "update", "build", "generate", "shuffle"], "blocks": ["process", "update", "data", "build", "bytes", "generate", "shuffle", "block", "blocks", "buffer", "values"], "blocksOffset": ["process", "update", "data", "build", "bytes", "index", "generate", "shuffle", "block", "blocks", "start", "j", "pos", "offset", "flags", "buffer", "i", "values"], "values": ["process", "update", "data", "shuffle", "block", "blocks", "start", "bits", "value", "buffer", "values", "build", "output", "generate", "offset", "result", "index", "flags", "j", "i", "bytes", "pos"], "valuesOffset": ["process", "update", "data", "shuffle", "block", "blocks", "start", "bits", "value", "buffer", "values", "build", "output", "generate", "0", "offset", "result", "index", "flags", "j", "i", "length", "end", "bytes", "pos", "size"], "iterations": ["process", "update", "data", "n", "shuffle", "block", "blocks", "start", "bits", "value", "buffer", "values", "build", "output", "generate", "0", "offset", "len", "result", "index", "flags", "j", "i", "length", "end", "bytes", "count", "pos", "size"], "j": ["process", "update", "data", "n", "shuffle", "block", "blocks", "start", "bits", "value", "r", "e", "buffer", "values", "iter", "build", "output", "generate", "0", "t", "offset", "len", "result", "index", "iteration", "x", "flags", "j", "i", "length", "end", "bytes", "count", "pos", "size"], "block": ["process", "update", "data", "n", "shuffle", "block", "blocks", "start", "bits", "value", "r", "e", "buffer", "values", "iter", "build", "output", "generate", "0", "t", "offset", "len", "result", "index", "iteration", "x", "flags", "b", "j", "i", "length", "end", "bytes", "c", "count", "val", "pos", "size"]}}
{"code": "public GroupingSearch disableCaching() {this.maxCacheRAMMB = null;this.maxDocsToCache = null;return this;}\n", "substitutes": {"disableCaching": ["Size", "reset", "delete", "empty", "clear"], "maxCacheRAMMB": ["filters", "filter", "Size", "reset", "delete", "empty", "limit", "caching", "clear", "cache"], "maxDocsToCache": ["filters", "filter", "group", "groups", "Size", "reset", "delete", "empty", "limit", "caching", "clear", "cache"]}}
{"code": "public static int idealByteArraySize(int need) {for (int i = 4; i < 32; i++)if (need <= (1 << i) - 12)return (1 << i) - 12;return need;}\n", "substitutes": {"idealByteArraySize": ["shift", "need", "pow", "abs", "mod"], "need": ["s", "n", "0", "shift", "bits", "need", "pow", "abs", "1", "32", "8", "b", "size", "len", "mod", "12"], "i": ["n", "8", "shift", "bits", "pow", "mod", "s", "0", "1", "need", "len", "12", "x", "abs", "b", "d", "16", "j", "i", "k", "31", "c", "32", "size"]}}
{"code": "public UpdateAssessmentTargetResult updateAssessmentTarget(UpdateAssessmentTargetRequest request) {request = beforeClientExecution(request);return executeUpdateAssessmentTarget(request);}\n", "substitutes": {"updateAssessmentTarget": ["update", "apply", "execute", "run", "call"], "request": ["input", "update", "apply", "parent", "execute", "resource", "run", "call", "request", "req", "query", "argument", "p"]}}
{"code": "public ModifyVolumeResult modifyVolume(ModifyVolumeRequest request) {request = beforeClientExecution(request);return executeModifyVolume(request);}\n", "substitutes": {"modifyVolume": ["update", "create", "execute", "run", "modify"], "request": ["input", "update", "create", "parent", "execute", "resource", "run", "request", "call", "req", "argument", "modify"]}}
{"code": "public Cell merge(Cell m, Cell e) {if (m.cmd == e.cmd && m.ref == e.ref && m.skip == e.skip) {Cell c = new Cell(m);c.cnt += e.cnt;return c;} else {return null;}}\n", "substitutes": {"merge": ["intersect", "union", "merge", "add", "compare"], "m": ["intersect", "f", "s", "union", "cell", "merge", "add", "compare", "c", "a", "b"], "e": ["intersect", "f", "s", "union", "cell", "merge", "add", "n", "compare", "c", "a", "r", "o", "rc", "b", "l"], "c": ["cell", "n", "merged", "r", "a", "l", "s", "o", "compare", "t", "rc", "result", "union", "merge", "add", "b", "intersect", "f", "c"], "cnt": ["cell", "n", "merged", "r", "a", "ref", "seq", "l", "s", "o", "compare", "t", "rc", "offset", "result", "union", "merge", "add", "b", "skip", "intersect", "f", "c", "count", "pos"]}}
{"code": "public ByteBuffer read(int length, long position) throws IOException {if(position >= size()) {throw new IndexOutOfBoundsException(\"Position \" + position + \" past the end of the file\");}ByteBuffer dst;if (writable) {dst = channel.map(FileChannel.MapMode.READ_WRITE, position, length);buffersToClean.add(dst);} else {channel.position(position);dst = ByteBuffer.allocate(length);int worked = IOUtils.readFully(channel, dst);if(worked == -1) {throw new IndexOutOfBoundsException(\"Position \" + position + \" past the end of the file\");}}dst.position(0);return dst;}\n", "substitutes": {"read": ["copy", "buffer", "write", "clean", "read"], "length": ["length", "copy", "capacity", "1024", "channel", "0", "count", "limit", "size", "buffer", "type", "write", "clean", "read"], "position": ["mark", "capacity", "1024", "start", "position", "buffer", "type", "write", "0", "offset", "clean", "read", "index", "copy", "channel", "limit", "seek", "skip", "length", "count", "pos", "size"], "dst": ["mark", "file", "capacity", "1024", "start", "position", "buffer", "type", "write", "0", "offset", "clean", "stream", "read", "result", "index", "copy", "channel", "buff", "limit", "b", "reader", "seek", "skip", "length", "bytes", "count", "buf", "pos", "size"], "worked": ["mark", "file", "capacity", "1024", "n", "start", "position", "buffer", "type", "write", "0", "offset", "len", "clean", "stream", "read", "result", "index", "copy", "channel", "buff", "limit", "b", "reader", "seek", "skip", "length", "bytes", "count", "buf", "pos", "size"]}}
{"code": "public void respondActivityTaskCompleted(RespondActivityTaskCompletedRequest request) {request = beforeClientExecution(request);executeRespondActivityTaskCompleted(request);}\n", "substitutes": {"respondActivityTaskCompleted": ["process", "completed", "execute", "call", "complete"], "request": ["process", "input", "parent", "completed", "response", "execute", "resource", "operation", "call", "request", "req", "query", "argument", "complete"]}}
{"code": "public synchronized final void incrementProgressBy(int diff) {setProgress(mProgress + diff);}\n", "substitutes": {"incrementProgressBy": ["update", "advance", "progressed", "increment", "progress"], "diff": ["update", "step", "advance", "progressed", "n", "increment", "amount", "value", "progress", "1", "i"]}}
{"code": "public MetadataDiff compareMetadata(DirCacheEntry entry) {if (entry.isAssumeValid())return MetadataDiff.EQUAL;if (entry.isUpdateNeeded())return MetadataDiff.DIFFER_BY_METADATA;if (isModeDifferent(entry.getRawMode()))return MetadataDiff.DIFFER_BY_METADATA;int type = mode & FileMode.TYPE_MASK;if (type == FileMode.TYPE_TREE || type == FileMode.TYPE_GITLINK)return MetadataDiff.EQUAL;if (!entry.isSmudged() && entry.getLength() != (int) getEntryLength())return MetadataDiff.DIFFER_BY_METADATA;Instant cacheLastModified = entry.getLastModifiedInstant();Instant fileLastModified = getEntryLastModifiedInstant();if (timestampComparator.compare(cacheLastModified, fileLastModified,getOptions().getCheckStat() == CheckStat.MINIMAL) != 0) {return MetadataDiff.DIFFER_BY_TIMESTAMP;}if (entry.isSmudged()) {return MetadataDiff.SMUDGED;}return MetadataDiff.EQUAL;}\n", "substitutes": {"compareMetadata": ["diff", "update", "apply", "check", "compare"], "entry": ["diff", "update", "entry", "apply", "entries", "file", "check", "compare", "e", "c", "this", "mode", "cache"], "type": ["kind", "update", "file", "bit", "e", "type", "mask", "diff", "entries", "compare", "this", "t", "offset", "mode", "apply", "typ", "cache", "entry", "check", "c"], "cacheLastModified": ["kind", "update", "file", "bit", "e", "type", "mask", "diff", "entries", "stamp", "compare", "this", "t", "created", "offset", "mode", "apply", "typ", "ts", "cache", "entry", "check", "timestamp", "c", "modified", "updated", "now"], "fileLastModified": ["kind", "update", "file", "bit", "latest", "e", "type", "mask", "diff", "entries", "stamp", "compare", "this", "t", "created", "offset", "mode", "apply", "typ", "ts", "cache", "entry", "check", "timestamp", "c", "modified", "updated", "now"]}}
{"code": "public static NumberRecord convertToNumberRecord(RKRecord rk) {NumberRecord num = new NumberRecord();num.setColumn(rk.getColumn());num.setRow(rk.getRow());num.setXFIndex(rk.getXFIndex());num.setValue(rk.getRKNumber());return num;}\n", "substitutes": {"convertToNumberRecord": ["convert", "create", "parse", "number", "make"], "rk": ["convert", "create", "parse", "number", "record", "make", "rec", "row", "ra", "r"], "num": ["convert", "create", "parse", "number", "result", "res", "record", "make", "rec", "row", "ra", "r", "ret", "c"]}}
{"code": "public CharBuffer put(char[] src, int srcOffset, int charCount) {byteBuffer.limit(limit * SizeOf.CHAR);byteBuffer.position(position * SizeOf.CHAR);if (byteBuffer instanceof ReadWriteDirectByteBuffer) {((ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, charCount);} else {((ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, charCount);}this.position += charCount;return this;}\n", "substitutes": {"put": ["get", "add", "append", "set", "put"], "src": ["get", "array", "bytes", "add", "append", "buf", "chars", "b", "buffer", "set", "put"], "srcOffset": ["get", "array", "bytes", "index", "add", "limit", "append", "position", "buf", "offset", "chars", "pos", "b", "buffer", "set", "put"], "charCount": ["append", "value", "position", "buffer", "content", "put", "array", "offset", "len", "set", "index", "add", "dest", "chars", "limit", "b", "length", "get", "bytes", "remaining", "buf", "pos"], "position": ["capacity", "append", "value", "position", "buffer", "content", "put", "array", "offset", "len", "set", "index", "add", "dest", "chars", "limit", "b", "skip", "length", "get", "bytes", "remaining", "buf", "pos"]}}
{"code": "public int getCells() {Iterator<Character> i = cells.keySet().iterator();int size = 0;for (; i.hasNext();) {Character c = i.next();Cell e = at(c);if (e.cmd >= 0 || e.ref >= 0) {size++;}}return size;}\n", "substitutes": {"getCells": ["length", "capacity", "count", "sizes", "size"], "i": ["iter", "k", "length", "capacity", "e", "c", "count", "iterator", "sizes", "it", "size", "i"], "size": ["iter", "k", "length", "capacity", "n", "cells", "e", "c", "count", "iterator", "sizes", "it", "size", "rows", "i"], "c": ["iter", "k", "length", "char", "capacity", "n", "cells", "e", "c", "ch", "count", "iterator", "sizes", "it", "character", "size", "rows", "i"], "e": ["cell", "capacity", "n", "e", "a", "character", "rows", "iter", "char", "cells", "t", "x", "iterator", "it", "i", "k", "length", "ch", "c", "count", "sizes", "size"]}}
{"code": "public BeiderMorseFilterFactory(Map<String,String> args) {super(args);NameType nameType = NameType.valueOf(get(args, \"nameType\", NameType.GENERIC.toString()));RuleType ruleType = RuleType.valueOf(get(args, \"ruleType\", RuleType.APPROX.toString()));boolean concat = getBoolean(args, \"concat\", true);engine = new PhoneticEngine(nameType, ruleType, concat);Set<String> langs = getSet(args, \"languageSet\");languageSet = (null == langs || (1 == langs.size() && langs.contains(\"auto\"))) ? null : LanguageSet.from(langs);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n", "substitutes": {"nameType": ["Name", "filename", "n", "name", "prefix", "this", "names", "namespace", "type"], "ruleType": ["kind", "Name", "filename", "n", "name", "prefix", "this", "rules", "names", "namespace", "root", "type", "rule"], "concat": ["kind", "recursive", "n", "force", "namespace", "auto", "debug", "type", "rule", "name", "this", "names", "root", "enabled", "prefix", "optimize", "Name", "filename", "override", "rules"], "engine": ["kind", "recursive", "n", "force", "compiler", "namespace", "auto", "debug", "type", "rule", "name", "this", "names", "root", "enabled", "prefix", "eng", "parser", "optimize", "Name", "filename", "override", "rules", "engine", "processor"], "langs": ["kind", "recursive", "n", "force", "compiler", "namespace", "auto", "debug", "type", "rule", "name", "this", "names", "set", "root", "enabled", "languages", "settings", "prefix", "eng", "parser", "optimize", "Name", "sets", "filename", "override", "language", "rules", "engine", "processor"], "languageSet": ["kind", "recursive", "n", "force", "compiler", "namespace", "auto", "debug", "type", "rule", "name", "this", "lang", "names", "set", "root", "enabled", "languages", "settings", "prefix", "eng", "parser", "args", "optimize", "Name", "sets", "filename", "override", "language", "rules", "engine", "processor"]}}
{"code": "public static double varp(double[] v) {double r = Double.NaN;if (v!=null && v.length > 1) {r = devsq(v) /v.length;}return r;}\n", "substitutes": {"varp": ["r", "pdf", "sd", "std", "variance"], "v": ["x", "vec", "r", "a", "pdf", "sd", "std", "arr", "args", "d", "p", "variance"], "r": ["result", "cov", "x", "v", "vec", "r", "a", "var", "pdf", "sd", "std", "arr", "args", "d", "p", "variance"]}}
{"code": "public PersianNormalizationFilterFactory(Map<String,String> args) {super(args);if (!args.isEmpty()) {throw new IllegalArgumentException(\"Unknown parameters: \" + args);}}\n", "substitutes": {}}
{"code": "public static WeightedTerm[] getTerms(Query query, boolean prohibited, String fieldName) {HashSet<WeightedTerm> terms = new HashSet<>();Predicate<String> fieldSelector = fieldName == null ? f -> true : fieldName::equals;query.visit(new BoostedTermExtractor(1, terms, prohibited, fieldSelector));return terms.toArray(new WeightedTerm[0]);}\n", "substitutes": {"getTerms": ["get", "filter", "term", "extract", "terms"], "query": ["get", "f", "filter", "r", "term", "q", "extract", "query", "graph", "terms", "search"], "prohibited": ["ignore", "get", "f", "filter", "negate", "r", "weighted", "boost", "reverse", "term", "q", "extract", "query", "graph", "fuzzy", "terms", "search", "inclusive"], "fieldName": ["ignore", "r", "reverse", "term", "inclusive", "s", "filter", "name", "F", "boost", "fuzzy", "negate", "prefix", "weighted", "field", "q", "extract", "graph", "selector", "terms", "search", "get", "f", "fields", "query"], "terms": ["ignore", "r", "reverse", "term", "inclusive", "s", "filter", "name", "weights", "F", "boost", "0", "fuzzy", "set", "result", "results", "negate", "prefix", "weighted", "ret", "field", "q", "extract", "graph", "selector", "terms", "search", "get", "f", "fields", "query"], "fieldSelector": ["ignore", "r", "reverse", "term", "inclusive", "s", "condition", "filter", "name", "weights", "F", "boost", "0", "fuzzy", "compare", "set", "result", "cond", "results", "negate", "prefix", "weighted", "ret", "field", "q", "extract", "graph", "selector", "terms", "search", "predicate", "get", "f", "fields", "query"]}}
{"code": "public DeleteDocumentationPartResult deleteDocumentationPart(DeleteDocumentationPartRequest request) {request = beforeClientExecution(request);return executeDeleteDocumentationPart(request);}\n", "substitutes": {"deleteDocumentationPart": ["begin", "execute", "delete", "complete", "remove"], "request": ["input", "begin", "parent", "response", "execute", "request", "req", "call", "delete", "query", "complete", "remove"]}}
{"code": "public String toString() {StringBuilder sb = new StringBuilder();sb.append(\"[CHART]\\n\");sb.append(\"    .x     = \").append(getX()).append('\\n');sb.append(\"    .y     = \").append(getY()).append('\\n');sb.append(\"    .width = \").append(getWidth()).append('\\n');sb.append(\"    .height= \").append(getHeight()).append('\\n');sb.append(\"[/CHART]\\n\");return sb.toString();}\n", "substitutes": {"toString": ["get", "build", "generate", "html", "render"], "sb": ["ss", "get", "build", "s", "generate", "b", "SB", "sb", "html", "render"]}}
{"code": "public final short get(int index) {checkIndex(index);return backingArray[offset + index];}\n", "substitutes": {"get": ["get", "peek", "lookup", "value", "item"], "index": ["length", "get", "peek", "index", "lookup", "0", "value", "1", "position", "size", "pos", "offset", "item", "i"]}}
{"code": "public String toString(){return image;}\n", "substitutes": {"toString": ["name", "get", "src", "image"]}}
{"code": "public ValueEval evaluate(int srcRowIndex, int srcColumnIndex, ValueEval arg0, ValueEval arg1) {try {AreaEval reA = evaluateRef(arg0);AreaEval reB = evaluateRef(arg1);AreaEval result = resolveRange(reA, reB);if (result == null) {return ErrorEval.NULL_INTERSECTION;}return result;} catch (EvaluationException e) {return e.getErrorEval();}}\n", "substitutes": {"evaluate": ["eval", "range", "execute", "evaluate", "resolve"], "srcRowIndex": ["eval", "range", "column", "index", "row", "execute", "evaluate", "offset", "resolve", "col"], "srcColumnIndex": ["eval", "range", "column", "index", "row", "execute", "evaluate", "offset", "columns", "resolve", "col"], "arg0": ["eval", "range", "column", "arg", "op", "index", "expr", "row", "execute", "evaluate", "src", "val", "offset", "columns", "resolve", "col"], "arg1": ["column", "ref", "col", "eval", "op", "offset", "result", "range", "index", "expr", "execute", "evaluate", "src", "expression", "row", "val", "columns", "resolve", "arg"], "reA": ["column", "A", "r", "a", "ref", "col", "eval", "op", "offset", "result", "range", "index", "expr", "execute", "ra", "evaluate", "src", "expression", "row", "val", "AB", "columns", "resolve", "arg"], "reB": ["column", "A", "r", "a", "ref", "B", "col", "eval", "op", "offset", "result", "range", "index", "expr", "execute", "ra", "evaluate", "src", "b", "expression", "row", "val", "AB", "columns", "resolve", "arg"], "result": ["column", "A", "r", "a", "ref", "B", "col", "eval", "op", "intersection", "offset", "result", "range", "res", "index", "expr", "execute", "ra", "ret", "evaluate", "src", "b", "expression", "row", "val", "AB", "columns", "resolve", "arg"]}}
{"code": "public void clear() {weightBySpanQuery.clear();}\n", "substitutes": {"clear": ["execute", "delete", "close", "free", "clear", "remove"]}}
{"code": "public int findEndOffset(StringBuilder buffer, int start) {if( start > buffer.length() || start < 0 ) return start;bi.setText(buffer.substring(start));return bi.next() + start;}\n", "substitutes": {"findEndOffset": ["skip", "next", "index", "start", "pos"], "buffer": ["skip", "next", "input", "bi", "s", "index", "text", "start", "buf", "str", "pos", "b", "buffer"], "start": ["skip", "next", "input", "bi", "s", "index", "off", "text", "0", "1", "start", "offset", "buf", "str", "pos", "b", "buffer", "i"]}}
{"code": "final public SrndQuery PrimaryQuery() throws ParseException {SrndQuery q;switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {case LPAREN:jj_consume_token(LPAREN);q = FieldsQuery();jj_consume_token(RPAREN);break;case OR:case AND:case W:case N:q = PrefixOperatorQuery();break;case TRUNCQUOTED:case QUOTED:case SUFFIXTERM:case TRUNCTERM:case TERM:q = SimpleTerm();break;default:jj_la1[5] = jj_gen;jj_consume_token(-1);throw new ParseException();}OptionalWeights(q);{if (true) return q;}throw new Error(\"Missing return statement in function\");}\n", "substitutes": {"PrimaryQuery": ["Return", "parse", "returns", "statement"], "q": ["result", "parse", "f", "w", "statement", "returns", "ret", "r", "Return", "q", "query"], "jj_la1": ["result", "input", "parse", "f", "w", "statement", "returns", "this", "ret", "r", "Return", "q", "query", "args", "p"]}}
{"code": "public DeleteApiKeyResult deleteApiKey(DeleteApiKeyRequest request) {request = beforeClientExecution(request);return executeDeleteApiKey(request);}\n", "substitutes": {"deleteApiKey": ["update", "begin", "execute", "delete", "complete"], "request": ["input", "update", "begin", "parent", "response", "execute", "request", "call", "req", "delete", "query", "argument", "complete"]}}
{"code": "public InsertTagsRequest() {super(\"Ots\", \"2016-06-20\", \"InsertTags\", \"ots\");setMethod(MethodType.POST);}\n", "substitutes": {}}
{"code": "public DeleteUserByPrincipalIdResult deleteUserByPrincipalId(DeleteUserByPrincipalIdRequest request) {request = beforeClientExecution(request);return executeDeleteUserByPrincipalId(request);}\n", "substitutes": {"deleteUserByPrincipalId": ["update", "execute", "call", "delete", "complete"], "request": ["input", "update", "parent", "op", "execute", "call", "request", "req", "instruction", "delete", "query", "complete"]}}
{"code": "public DescribeNetworkInterfacesResult describeNetworkInterfaces(DescribeNetworkInterfacesRequest request) {request = beforeClientExecution(request);return executeDescribeNetworkInterfaces(request);}\n", "substitutes": {"describeNetworkInterfaces": ["execute", "call", "request", "describe", "summary"], "request": ["input", "parent", "op", "argument", "execute", "call", "request", "req", "instruction", "query", "describe", "summary", "p"]}}
{"code": "public int serialize( int offset, byte[] data, EscherSerializationListener listener ){listener.beforeRecordSerialize( offset, getRecordId(), this );LittleEndian.putShort( data, offset, getOptions() );LittleEndian.putShort( data, offset + 2, getRecordId() );LittleEndian.putInt( data, offset + 4, 8 );LittleEndian.putInt( data, offset + 8, field_1_numShapes );LittleEndian.putInt( data, offset + 12, field_2_lastMSOSPID );listener.afterRecordSerialize( offset + 16, getRecordId(), getRecordSize(), this );return getRecordSize();}\n", "substitutes": {"serialize": ["process", "initialize", "encode", "compress", "write"], "offset": ["process", "initialize", "2", "index", "off", "0", "1", "start", "4", "encode", "version", "size", "compress", "offset", "pos", "write", "i"], "data": ["process", "data", "8", "start", "buffer", "write", "out", "2", "0", "1", "offset", "initialize", "index", "off", "encode", "version", "b", "i", "4", "buf", "compress", "pos", "size", "payload"], "listener": ["process", "data", "handler", "8", "e", "start", "buffer", "write", "out", "l", "2", "0", "1", "callback", "offset", "listener", "initialize", "index", "off", "encode", "version", "b", "i", "ce", "listeners", "4", "buf", "compress", "pos", "size", "payload"]}}
{"code": "public CreateSecurityConfigurationResult createSecurityConfiguration(CreateSecurityConfigurationRequest request) {request = beforeClientExecution(request);return executeCreateSecurityConfiguration(request);}\n", "substitutes": {"createSecurityConfiguration": ["create", "update", "execute", "call", "describe"], "request": ["input", "create", "update", "parent", "argument", "execute", "resource", "call", "request", "req", "describe", "p"]}}
{"code": "public DescribeClientVpnConnectionsResult describeClientVpnConnections(DescribeClientVpnConnectionsRequest request) {request = beforeClientExecution(request);return executeDescribeClientVpnConnections(request);}\n", "substitutes": {"describeClientVpnConnections": ["execute", "call", "send", "summary", "describe"], "request": ["input", "parent", "argument", "execute", "call", "request", "req", "query", "send", "summary", "p", "describe"]}}
{"code": "public static void fill(double[] array, double value) {for (int i = 0; i < array.length; i++) {array[i] = value;}}\n", "substitutes": {"fill": ["add", "fill", "insert", "push", "set"], "array": ["result", "data", "array", "add", "a", "fill", "insert", "push", "set", "arr", "values"], "value": ["result", "data", "array", "x", "v", "add", "0", "a", "value", "val", "fill", "insert", "push", "d", "set", "arr", "values"], "i": ["data", "n", "a", "value", "fill", "values", "array", "0", "set", "result", "x", "index", "add", "arr", "d", "i", "j", "k", "v", "val", "insert", "push"]}}
{"code": "public boolean hasNext() {return nextId < cells.length;}\n", "substitutes": {"hasNext": ["next", "advance", "exists", "Next", "valid"]}}
{"code": "public PostingsEnum reset(int[] postings) {this.postings = postings;upto = -2;freq = 0;return this;}\n", "substitutes": {"reset": ["set", "add", "append", "postings"], "postings": ["po", "data", "nil", "array", "params", "add", "0", "append", "value", "postings", "args", "null", "set", "p", "values"], "upto": ["data", "params", "append", "value", "values", "array", "0", "offset", "null", "set", "po", "nil", "index", "add", "postings", "args", "count", "pos", "size", "p"], "freq": ["data", "params", "append", "value", "position", "values", "array", "0", "offset", "null", "set", "po", "nil", "index", "add", "postings", "args", "count", "pos", "size", "p"]}}
{"code": "public final boolean hasAll(RevFlagSet set) {return (flags & set.mask) == set.mask;}\n", "substitutes": {"hasAll": ["equals", "equal", "matches", "contains", "match"], "set": ["flag", "s", "f", "equals", "this", "r", "equal", "flags", "b", "matches", "set", "contains", "match"]}}
{"code": "public ModifyAccountResult modifyAccount(ModifyAccountRequest request) {request = beforeClientExecution(request);return executeModifyAccount(request);}\n", "substitutes": {"modifyAccount": ["update", "create", "execute", "modify", "edit"], "request": ["input", "update", "create", "execute", "resource", "request", "call", "req", "argument", "parameters", "modify", "edit", "p"]}}
{"code": "public Token LT(int k) {lazyInit();if ( k==0 ) return null;if ( k < 0 ) return LB(-k);int i = p + k - 1;sync(i);if ( i >= tokens.size() ) { return tokens.get(tokens.size()-1);}return tokens.get(i);}\n", "substitutes": {"LT": ["next", "get", "LB", "LT", "lb"], "k": ["next", "get", "LB", "s", "2", "n", "t", "1", "p", "q", "size", "P", "LT", "lb", "i", "l"], "i": ["n", "lb", "l", "LB", "s", "2", "t", "1", "offset", "P", "next", "index", "q", "j", "i", "k", "get", "pos", "size", "LT", "p"]}}
{"code": "public void removeSheet(int sheetIndex) {if (boundsheets.size() > sheetIndex) {records.remove(records.getBspos() - (boundsheets.size() - 1) + sheetIndex);boundsheets.remove(sheetIndex);fixTabIdRecord();}int sheetNum1Based = sheetIndex + 1;for(int i=0; i<getNumNames(); i++) {NameRecord nr = getNameRecord(i);if(nr.getSheetNumber() == sheetNum1Based) {nr.setSheetNumber(0);} else if(nr.getSheetNumber() > sheetNum1Based) {nr.setSheetNumber(nr.getSheetNumber()-1);}}if (linkTable != null) {linkTable.removeSheet(sheetIndex);}}\n", "substitutes": {"removeSheet": ["add", "delete", "close", "free", "clear", "remove"], "sheetIndex": ["index", "n", "add", "name", "0", "1", "this", "delete", "i", "offset", "close", "free", "clear", "remove", "sheet"], "sheetNum1Based": ["n", "start", "delete", "sheet", "name", "0", "1", "this", "last", "null", "offset", "close", "clear", "index", "add", "free", "i", "remove", "end"], "i": ["n", "start", "delete", "sheet", "name", "0", "1", "this", "last", "null", "offset", "close", "clear", "index", "add", "free", "i", "remove", "j", "k", "end", "c"], "nr": ["n", "r", "start", "delete", "sheet", "record", "name", "0", "1", "this", "last", "null", "offset", "close", "clear", "index", "rec", "add", "free", "i", "remove", "j", "k", "end", "c"]}}
{"code": "public void removeName(String name) {int index = getNameIndex(name);removeName(index);}\n", "substitutes": {"removeName": ["index", "add", "name", "append", "delete", "remove"], "name": ["s", "index", "id", "n", "add", "name", "key", "append", "prefix", "delete", "remove"], "index": ["s", "index", "id", "n", "add", "name", "key", "append", "prefix", "delete", "i", "pos", "remove"]}}
{"code": "public boolean equals(final Object o) {if (!(o instanceof Property)) {return false;}final Property p = (Property) o;final Object pValue = p.getValue();final long pId = p.getID();if (id != pId || (id != 0 && !typesAreEqual(type, p.getType()))) {return false;}if (value == null && pValue == null) {return true;}if (value == null || pValue == null) {return false;}final Class<?> valueClass = value.getClass();final Class<?> pValueClass = pValue.getClass();if (!(valueClass.isAssignableFrom(pValueClass)) &&!(pValueClass.isAssignableFrom(valueClass))) {return false;}if (value instanceof byte[]) {byte[] thisVal = (byte[]) value, otherVal = (byte[]) pValue;int len = unpaddedLength(thisVal);if (len != unpaddedLength(otherVal)) {return false;}for (int i=0; i<len; i++) {if (thisVal[i] != otherVal[i]) {return false;}}return true;}return value.equals(pValue);}\n", "substitutes": {"equals": ["equals", "compare", "equal", "matches", "contains"], "o": ["obj", "equals", "object", "o", "compare", "equal", "value", "matches", "contains", "p"], "p": ["obj", "equals", "object", "o", "prop", "compare", "this", "equal", "value", "property", "child", "matches", "contains", "p"], "pValue": ["object", "value", "type", "contains", "obj", "other", "id", "o", "key", "compare", "this", "equal", "null", "property", "matches", "Value", "parent", "equals", "v", "prop", "child", "val", "p"], "pId": ["object", "value", "ID", "type", "contains", "obj", "pid", "other", "id", "o", "key", "compare", "this", "equal", "1", "0", "null", "property", "matches", "Value", "parent", "equals", "v", "prop", "child", "val", "p"], "valueClass": ["object", "value", "ID", "type", "contains", "obj", "pid", "other", "id", "o", "key", "compare", "this", "equal", "1", "0", "class", "null", "property", "matches", "Value", "parent", "equals", "v", "cl", "prop", "c", "child", "val", "p"], "pValueClass": ["object", "base", "value", "ID", "type", "contains", "obj", "pid", "other", "id", "o", "key", "compare", "this", "equal", "1", "0", "class", "target", "null", "property", "matches", "Value", "parent", "equals", "v", "cl", "prop", "c", "child", "val", "p"], "thisVal": ["data", "object", "base", "value", "ID", "type", "contains", "obj", "pid", "other", "id", "o", "key", "compare", "this", "equal", "1", "0", "class", "target", "null", "property", "b", "matches", "Value", "parent", "bytes", "equals", "v", "cl", "prop", "c", "child", "buf", "val", "p"], "otherVal": ["tmp", "data", "object", "base", "value", "ID", "type", "contains", "obj", "pid", "other", "id", "o", "key", "compare", "this", "equal", "1", "0", "class", "target", "null", "result", "property", "b", "matches", "Value", "parent", "bytes", "equals", "v", "cl", "prop", "c", "child", "buf", "val", "p"], "len": ["tmp", "data", "object", "n", "base", "value", "ID", "type", "contains", "l", "obj", "pid", "other", "id", "o", "key", "compare", "this", "equal", "1", "0", "class", "target", "null", "len", "result", "property", "b", "matches", "length", "Value", "parent", "bytes", "equals", "v", "cl", "prop", "c", "child", "buf", "val", "size", "p"], "i": ["tmp", "data", "object", "n", "base", "value", "ID", "type", "contains", "l", "obj", "pid", "other", "id", "o", "key", "compare", "this", "equal", "1", "0", "class", "target", "null", "len", "result", "index", "property", "b", "matches", "i", "j", "k", "length", "Value", "parent", "bytes", "equals", "v", "cl", "prop", "c", "ii", "child", "buf", "val", "pos", "size", "p"]}}
{"code": "public GetRepoBuildListRequest() {super(\"cr\", \"2016-06-07\", \"GetRepoBuildList\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/build\");setMethod(MethodType.GET);}\n", "substitutes": {}}
{"code": "public MessageWriter() {buf = new ByteArrayOutputStream();enc = new OutputStreamWriter(getRawStream(), UTF_8);}\n", "substitutes": {"buf": ["bos", "s", "w", "b", "out"], "enc": ["bos", "s", "w", "Writer", "writer", "tw", "b", "out"]}}
{"code": "public void append(RecordBase r){_recs.add(r);}\n", "substitutes": {"append": ["record", "add", "append", "push", "put"], "r": ["record", "rec", "add", "base", "c", "append", "r", "ref", "push", "put"]}}
{"code": "public void close() throws IOException {if (read(skipBuffer) != -1 || actualSize != expectedSize) {throw new CorruptObjectException(MessageFormat.format(JGitText.get().packfileCorruptionDetected,JGitText.get().wrongDecompressedLength));}int used = bAvail - inf.getRemaining();if (0 < used) {onObjectData(src, buf, p, used);use(used);}inf.reset();}\n", "substitutes": {"close": ["reset", "close", "corrupt", "complete", "read"], "used": ["info", "f", "inf", "n", "false", "p", "reset", "remaining", "size", "src", "close", "len", "true", "corrupt", "complete", "read"]}}
{"code": "public DescribeModelPackageResult describeModelPackage(DescribeModelPackageRequest request) {request = beforeClientExecution(request);return executeDescribeModelPackage(request);}\n", "substitutes": {"describeModelPackage": ["execute", "request", "call", "describe", "summary"], "request": ["input", "parent", "argument", "execute", "request", "call", "req", "query", "describe", "summary"]}}
{"code": "public void construct(CellValueRecordInterface rec, RecordStream rs, SharedValueManager sfh) {if (rec instanceof FormulaRecord) {FormulaRecord formulaRec = (FormulaRecord)rec;StringRecord cachedText;Class<? extends Record> nextClass = rs.peekNextClass();if (nextClass == StringRecord.class) {cachedText = (StringRecord) rs.getNext();} else {cachedText = null;}insertCell(new FormulaRecordAggregate(formulaRec, cachedText, sfh));} else {insertCell(rec);}}\n", "substitutes": {"construct": ["process", "record", "add", "insert", "populate"], "rec": ["process", "cell", "record", "rec", "add", "row", "c", "insert", "ti", "ce", "populate"], "rs": ["process", "cell", "r", "records", "streams", "out", "iter", "record", "rs", "stream", "rec", "add", "populate", "in", "row", "c", "insert", "ti", "ce"], "sfh": ["process", "cell", "r", "manager", "sm", "records", "streams", "out", "vm", "iter", "cm", "record", "rs", "stream", "m", "rec", "add", "mm", "populate", "in", "row", "c", "insert", "ti", "ce"], "formulaRec": ["process", "cell", "r", "manager", "sm", "records", "streams", "out", "vm", "iter", "cm", "record", "rs", "stream", "m", "rec", "add", "ra", "formula", "mm", "fr", "populate", "in", "f", "row", "c", "insert", "ti", "ce"], "cachedText": ["process", "cell", "r", "manager", "sm", "records", "streams", "out", "vm", "iter", "ss", "cm", "s", "record", "rs", "sr", "stream", "result", "m", "rec", "add", "ra", "formula", "str", "mm", "fr", "populate", "in", "f", "row", "c", "insert", "ti", "ce"], "nextClass": ["process", "cell", "r", "manager", "sm", "records", "streams", "out", "vm", "type", "iter", "ss", "cm", "s", "record", "t", "rs", "class", "sr", "stream", "result", "next", "m", "rec", "add", "ra", "formula", "str", "mm", "fr", "populate", "in", "f", "row", "cl", "c", "insert", "ti", "ce"]}}
{"code": "public Decompressor clone() {return new DeflateDecompressor();}\n", "substitutes": {"clone": ["delegate", "create", "get", "build"]}}
{"code": "public UpdateS3ResourcesResult updateS3Resources(UpdateS3ResourcesRequest request) {request = beforeClientExecution(request);return executeUpdateS3Resources(request);}\n", "substitutes": {"updateS3Resources": ["update", "apply", "execute", "run", "put"], "request": ["input", "update", "apply", "parent", "execute", "resource", "run", "request", "call", "req", "query", "argument", "p", "put"]}}
{"code": "public GroupQueryNode(QueryNode query) {if (query == null) {throw new QueryNodeError(new MessageImpl(QueryParserMessages.PARAMETER_VALUE_NOT_SUPPORTED, \"query\", \"null\"));}allocate();setLeaf(false);add(query);}\n", "substitutes": {"query": ["Null", "v", "n", "value", "child", "param", "query", "empty", "null", "root", "node", "arg"]}}
{"code": "public CharSequence toQueryString(EscapeQuerySyntax escaper) {StringBuilder path = new StringBuilder();path.append(\"/\").append(getFirstPathElement());for (QueryText pathelement : getPathElements(1)) {CharSequence value = escaper.escape(pathelement.value, Locale.getDefault(), Type.STRING);path.append(\"/\\\"\").append(value).append(\"\\\"\");}return path.toString();}\n", "substitutes": {"toQueryString": ["escaped", "expand", "path", "escape", "evaluate"], "escaper": ["sc", "escaped", "expand", "syntax", "path", "regex", "escape", "e", "evaluate", "sq"], "path": ["result", "sc", "s", "escaped", "expand", "syntax", "path", "regex", "escape", "e", "builder", "evaluate", "sq", "buf", "query", "b"], "pathelement": ["regex", "syntax", "e", "s", "sq", "result", "element", "sc", "expand", "text", "escape", "builder", "evaluate", "q", "b", "escaped", "path", "child", "buf", "query"], "value": ["regex", "syntax", "e", "value", "content", "s", "sq", "result", "element", "sc", "expand", "text", "escape", "builder", "evaluate", "q", "b", "escaped", "path", "child", "buf", "query"]}}
{"code": "public void removeCellComment() {HSSFComment comment = _sheet.findCellComment(_record.getRow(), _record.getColumn());_comment = null;if (null == comment){return;}_sheet.getDrawingPatriarch().removeShape(comment);}\n", "substitutes": {"removeCellComment": ["destroy", "delete", "close", "clear", "remove"], "comment": ["s", "destroy", "cell", "c", "delete", "cc", "comment", "close", "clear", "remove"], "_comment": ["s", "destroy", "cell", "name", "c", "delete", "cc", "comment", "pattern", "close", "comments", "Comment", "clear", "remove"]}}
{"code": "public void reset() {arriving = -1;leaving = -1;}\n", "substitutes": {"reset": ["leaving", "leave", "exit", "clear", "remove"], "arriving": ["entering", "right", "leaving", "leave", "opening", "exit", "leading", "clear", "remove"], "leaving": ["entering", "right", "leaving", "leave", "opening", "exiting", "exit", "leading", "sending", "waiting", "outgoing", "clear", "remove"]}}
{"code": "public ActivateUserResult activateUser(ActivateUserRequest request) {request = beforeClientExecution(request);return executeActivateUser(request);}\n", "substitutes": {"activateUser": ["update", "execute", "call", "activation", "activate"], "request": ["input", "update", "parent", "execute", "resource", "call", "request", "req", "activation", "query", "activate", "argument"]}}
{"code": "public boolean isCharsetDetected() {throw new UnsupportedOperationException();}\n", "substitutes": {"isCharsetDetected": ["unused", "unsupported", "empty", "remove"]}}
{"code": "public Cluster modifySnapshotCopyRetentionPeriod(ModifySnapshotCopyRetentionPeriodRequest request) {request = beforeClientExecution(request);return executeModifySnapshotCopyRetentionPeriod(request);}\n", "substitutes": {"modifySnapshotCopyRetentionPeriod": ["update", "apply", "Name", "snapshot", "Update"], "request": ["input", "update", "apply", "op", "Name", "resource", "request", "req", "call", "snapshot", "Update", "query", "p"]}}
{"code": "public DeleteClusterSubnetGroupResult deleteClusterSubnetGroup(DeleteClusterSubnetGroupRequest request) {request = beforeClientExecution(request);return executeDeleteClusterSubnetGroup(request);}\n", "substitutes": {"deleteClusterSubnetGroup": ["execute", "run", "call", "delete", "send"], "request": ["input", "parent", "op", "execute", "run", "call", "request", "req", "delete", "query", "instruction", "send", "p"]}}
{"code": "public static String decode(byte[] buffer) {return decode(buffer, 0, buffer.length);}\n", "substitutes": {"decode": ["escape", "encode", "str", "string", "format"], "buffer": ["input", "data", "bytes", "escape", "encode", "str", "buf", "b", "string", "format"]}}
{"code": "public int getDefaultPort() {return -1;}\n", "substitutes": {"getDefaultPort": ["length", "get", "index", "random", "size"]}}
{"code": "public StopTaskResult stopTask(StopTaskRequest request) {request = beforeClientExecution(request);return executeStopTask(request);}\n", "substitutes": {"stopTask": ["execute", "start", "run", "delete", "stop"], "request": ["input", "parent", "execute", "start", "run", "request", "call", "req", "delete", "query", "argument", "stop", "p"]}}
{"code": "public void seekExact(BytesRef target, TermState otherState) {assert otherState != null && otherState instanceof BlockTermState;assert !doOrd || ((BlockTermState) otherState).ord < numTerms;state.copyFrom(otherState);seekPending = true;indexIsCurrent = false;term.copyBytes(target);}\n", "substitutes": {"seekExact": ["skip", "copy", "transfer", "write", "put"], "target": ["skip", "bytes", "copy", "transfer", "state", "this", "ref", "term", "b", "out", "buffer", "write", "put"], "otherState": ["ref", "term", "buffer", "out", "write", "st", "put", "ss", "s", "transfer", "this", "target", "index", "copy", "state", "b", "skip", "source", "parent", "bytes"]}}
{"code": "public SeriesToChartGroupRecord(RecordInputStream in) {field_1_chartGroupIndex = in.readShort();}\n", "substitutes": {"in": ["ins", "in", "record", "din", "is", "out", "stream"], "field_1_chartGroupIndex": ["ins", "in", "index", "record", "series", "din", "channel", "group", "channels", "is", "out", "stream"]}}
{"code": "public static void writeUnicodeStringFlagAndData(LittleEndianOutput out, String value) {boolean is16Bit = hasMultibyte(value);out.writeByte(is16Bit ? 0x01 : 0x00);if (is16Bit) {putUnicodeLE(value, out);} else {putCompressedUnicode(value, out);}}\n", "substitutes": {"writeUnicodeStringFlagAndData": ["output", "append", "encode", "write", "put"], "out": ["w", "output", "o", "append", "os", "encode", "writer", "out", "write", "put"], "value": ["flag", "data", "s", "w", "output", "o", "append", "b", "value", "os", "encode", "str", "writer", "out", "write", "string", "put"], "is16Bit": ["data", "binary", "bit", "append", "value", "writer", "out", "write", "put", "complete", "flag", "s", "mult", "output", "o", "os", "m", "w", "encode", "str", "b", "string", "multi", "multiple"]}}
{"code": "public AuthorizeSecurityGroupIngressResult authorizeSecurityGroupIngress(AuthorizeSecurityGroupIngressRequest request) {request = beforeClientExecution(request);return executeAuthorizeSecurityGroupIngress(request);}\n", "substitutes": {"authorizeSecurityGroupIngress": ["create", "execute", "call", "initiate", "authorize"], "request": ["input", "create", "parent", "response", "execute", "call", "request", "req", "instruction", "query", "initiate", "argument", "authorize"]}}
{"code": "public void addFile(String file) {checkFileNames(Collections.singleton(file));setFiles.add(namedForThisSegment(file));}\n", "substitutes": {"addFile": ["visit", "check", "add", "set", "put"], "file": ["visit", "file", "check", "path", "add", "name", "filename", "segment", "set", "put"]}}
{"code": "public void setSize(int width, int height) {mWidth = width;mHeight = height;}\n", "substitutes": {"setSize": ["relocate", "resize", "init", "size", "set"], "width": ["width", "relocate", "resize", "w", "init", "size", "set", "Width"], "height": ["width", "relocate", "Height", "resize", "h", "w", "height", "y", "init", "size", "set", "Width"], "mWidth": ["width", "relocate", "Height", "resize", "h", "w", "m", "height", "y", "init", "size", "set", "Width"], "mHeight": ["width", "relocate", "Height", "resize", "h", "w", "m", "height", "y", "init", "size", "set", "Width"]}}
{"code": "public final void setPrecedenceFilterSuppressed(boolean value) {if (value) {this.reachesIntoOuterContext |= 0x40000000;}else {this.reachesIntoOuterContext &= ~SUPPRESS_PRECEDENCE_FILTER;}}\n", "substitutes": {"setPrecedenceFilterSuppressed": ["produce", "accept", "value", "push", "set"], "value": ["produce", "extended", "accept", "value", "preserved", "suppress", "compressed", "suppressed", "push", "set", "p"], "reachesIntoOuterContext": ["produce", "extended", "filter", "accept", "value", "preserved", "suppress", "compressed", "suppressed", "push", "flags", "set", "pattern", "mask", "p"]}}
{"code": "public IntervalSet LOOK(ATNState s, RuleContext ctx) {return LOOK(s, null, ctx);}\n", "substitutes": {"LOOK": ["create", "apply", "get", "run", "evaluate", "init", "set", "rule"], "s": ["create", "apply", "get", "s", "state", "this", "t", "a", "run", "evaluate", "init", "null", "set", "rule", "st"], "ctx": ["create", "a", "rule", "st", "context", "s", "this", "t", "null", "ic", "set", "apply", "sc", "state", "evaluate", "tc", "get", "c", "run", "init"]}}
{"code": "public void serialize(LittleEndianOutput out) {out.writeShort(getOptionFlags());out.writeShort(getRowHeight());}\n", "substitutes": {"serialize": ["store", "encode", "print", "write", "format"], "out": ["bos", "w", "output", "o", "store", "encode", "out", "print", "write", "os", "format"]}}
{"code": "public Builder(boolean dedup) {this.dedup = dedup;}\n", "substitutes": {"dedup": ["disabled", "enabled", "state", "block", "value", "required", "b", "true"]}}
{"code": "public Hashtable(int capacity, float loadFactor) {this(capacity);if (loadFactor <= 0 || Float.isNaN(loadFactor)) {throw new IllegalArgumentException(\"Load factor: \" + loadFactor);}}\n", "substitutes": {"capacity": ["index", "n", "key", "name", "hash", "size"], "loadFactor": ["load", "f", "index", "n", "key", "name", "capacity", "weight", "value", "hash", "size", "factor"]}}
{"code": "public Object get(CharSequence key) {final int bucket = normalCompletion.getBucket(key);return bucket == -1 ? null : Long.valueOf(bucket);}\n", "substitutes": {"get": ["get", "bucket", "lookup", "value", "opt"], "key": ["get", "s", "id", "bucket", "key", "lookup", "name", "value", "prefix", "c", "opt"], "bucket": ["buckets", "get", "s", "id", "n", "bucket", "key", "lookup", "name", "value", "prefix", "c", "count", "bid", "val", "opt", "b"]}}
{"code": "public ListHyperParameterTuningJobsResult listHyperParameterTuningJobs(ListHyperParameterTuningJobsRequest request) {request = beforeClientExecution(request);return executeListHyperParameterTuningJobs(request);}\n", "substitutes": {"listHyperParameterTuningJobs": ["execute", "list", "lists", "run", "call"], "request": ["input", "parent", "op", "execute", "list", "lists", "run", "call", "request", "req", "instruction", "query"]}}
{"code": "public DeleteTableResult deleteTable(String tableName) {return deleteTable(new DeleteTableRequest().withTableName(tableName));}\n", "substitutes": {"deleteTable": ["execute", "drop", "request", "table", "delete", "del", "remove"], "tableName": ["id", "n", "execute", "drop", "name", "key", "prefix", "request", "table", "delete", "del", "remove"]}}
{"code": "public final boolean lessThan(TextFragment fragA, TextFragment fragB){if (fragA.getScore() == fragB.getScore())return fragA.fragNum > fragB.fragNum;else return fragA.getScore() < fragB.getScore();}\n", "substitutes": {"lessThan": ["equals", "compare", "equal", "matches", "greater"], "fragA": ["equals", "text", "compare", "fragment", "equal", "tag", "fragments", "a", "frag", "matches", "greater"], "fragB": ["result", "f", "equals", "text", "compare", "fragment", "equal", "tag", "fragments", "a", "c", "frag", "br", "b", "matches", "greater"]}}
{"code": "public void freeBefore(int pos) {assert pos >= 0;assert pos <= nextPos;final int newCount = nextPos - pos;assert newCount <= count: \"newCount=\" + newCount + \" count=\" + count;assert newCount <= buffer.length: \"newCount=\" + newCount + \" buf.length=\" + buffer.length;count = newCount;}\n", "substitutes": {"freeBefore": ["update", "resize", "add", "append", "reset"], "pos": ["update", "resize", "index", "add", "0", "append", "start", "position", "reset", "count", "pos", "offset", "i"], "newCount": ["update", "n", "append", "start", "position", "0", "1", "offset", "len", "resize", "index", "add", "max", "total", "i", "length", "count", "reset", "pos", "size"], "count": ["update", "n", "append", "start", "position", "buffer", "0", "1", "offset", "len", "resize", "index", "add", "max", "total", "i", "length", "count", "reset", "pos", "size"]}}
{"code": "public UpdateHITTypeOfHITResult updateHITTypeOfHIT(UpdateHITTypeOfHITRequest request) {request = beforeClientExecution(request);return executeUpdateHITTypeOfHIT(request);}\n", "substitutes": {"updateHITTypeOfHIT": ["update", "create", "execute", "run", "call"], "request": ["input", "update", "create", "parent", "execute", "resource", "run", "call", "request", "req", "query", "instruction"]}}
{"code": "public UpdateRecommenderConfigurationResult updateRecommenderConfiguration(UpdateRecommenderConfigurationRequest request) {request = beforeClientExecution(request);return executeUpdateRecommenderConfiguration(request);}\n", "substitutes": {"updateRecommenderConfiguration": ["update", "apply", "execute", "run", "call"], "request": ["input", "update", "apply", "parent", "execute", "resource", "run", "call", "request", "req", "query", "argument", "p"]}}
{"code": "public int compareTo(BytesRef other) {return Arrays.compareUnsigned(this.bytes, this.offset, this.offset + this.length,other.bytes, other.offset, other.offset + other.length);}\n", "substitutes": {"compareTo": ["equals", "compare", "eq", "compared", "Compare"], "other": ["other", "equals", "o", "reference", "another", "compare", "this", "a", "ref", "eq", "compared", "b", "that", "Compare"]}}
{"code": "public int stem(char s[], int len) {if (len > 4 && s[len-1] == 's')len--;if (len > 5 &&(endsWith(s, len, \"ene\") ||  (endsWith(s, len, \"ane\") &&useNynorsk                 )))return len - 3;if (len > 4 &&(endsWith(s, len, \"er\") ||   endsWith(s, len, \"en\") ||   endsWith(s, len, \"et\") ||   (endsWith(s, len, \"ar\") &&useNynorsk                 )))return len - 2;if (len > 3)switch(s[len-1]) {case 'a':     case 'e':     return len - 1;}return len;}\n", "substitutes": {"stem": ["length", "count", "find", "pos", "len"], "s": ["input", "length", "s", "text", "c", "count", "find", "str", "chars", "pos", "b", "len", "alphabet"], "len": ["n", "start", "input", "s", "stem", "0", "t", "1", "len", "index", "text", "str", "chars", "b", "i", "j", "length", "alphabet", "c", "count", "find", "pos", "p"]}}
{"code": "public DescribeDBSnapshotsResult describeDBSnapshots(DescribeDBSnapshotsRequest request) {request = beforeClientExecution(request);return executeDescribeDBSnapshots(request);}\n", "substitutes": {"describeDBSnapshots": ["execute", "list", "call", "describe", "summary"], "request": ["input", "parent", "op", "argument", "execute", "list", "call", "request", "req", "instruction", "query", "describe", "summary", "p"]}}
{"code": "public SortedSetDocValuesFacetField(String dim, String label) {super(\"dummy\", TYPE);FacetField.verifyLabel(label);FacetField.verifyLabel(dim);this.dim = dim;this.label = label;}\n", "substitutes": {"dim": ["label", "key", "name", "TYPE", "value", "field", "type"], "label": ["label", "key", "name", "TYPE", "value", "field", "val", "type"]}}
{"code": "public CreateDocumentationPartResult createDocumentationPart(CreateDocumentationPartRequest request) {request = beforeClientExecution(request);return executeCreateDocumentationPart(request);}\n", "substitutes": {"createDocumentationPart": ["create", "copy", "execute", "call", "describe"], "request": ["input", "create", "parent", "copy", "argument", "response", "execute", "resource", "call", "request", "req", "describe", "parameters"]}}
{"code": "public String getValue() {return value;}\n", "substitutes": {"getValue": ["get", "value", "str", "string", "trim"]}}
{"code": "public ShortBuffer asReadOnlyBuffer() {return duplicate();}\n", "substitutes": {"asReadOnlyBuffer": ["duplicate", "get", "dup", "copy", "clone"]}}
{"code": "public UpdateDataSourcePermissionsResult updateDataSourcePermissions(UpdateDataSourcePermissionsRequest request) {request = beforeClientExecution(request);return executeUpdateDataSourcePermissions(request);}\n", "substitutes": {"updateDataSourcePermissions": ["update", "apply", "execute", "call", "permissions"], "request": ["input", "update", "apply", "parent", "execute", "call", "permissions", "request", "req", "query", "instruction", "argument", "p"]}}
{"code": "public static org.apache.poi.hssf.record.Record createSingleRecord(RecordInputStream in) {I_RecordCreator constructor = _recordCreatorsById.get(Integer.valueOf(in.getSid()));if (constructor == null) {return new UnknownRecord(in);}return constructor.create(in);}\n", "substitutes": {"createSingleRecord": ["open", "create", "build", "read"], "in": ["open", "create", "input", "build", "in", "id", "record", "r", "\"\"", "null", "is", "stream", "read"], "constructor": ["create", "r", "input", "creator", "build", "id", "record", "cc", "\"\"", "null", "stream", "read", "open", "builder", "is", "cp", "in", "f", "c"]}}
{"code": "public int getCount() {return mTabs.size();}\n", "substitutes": {"getCount": ["length", "dimensions", "count", "size", "rows"]}}
{"code": "public DeleteApplicationReferenceDataSourceResult deleteApplicationReferenceDataSource(DeleteApplicationReferenceDataSourceRequest request) {request = beforeClientExecution(request);return executeDeleteApplicationReferenceDataSource(request);}\n", "substitutes": {"deleteApplicationReferenceDataSource": ["execute", "run", "call", "delete", "complete"], "request": ["input", "parent", "op", "execute", "run", "call", "request", "req", "delete", "instruction", "query", "p", "complete"]}}
{"code": "public CreateProjectVersionResult createProjectVersion(CreateProjectVersionRequest request) {request = beforeClientExecution(request);return executeCreateProjectVersion(request);}\n", "substitutes": {"createProjectVersion": ["create", "update", "execute", "call", "version"], "request": ["input", "create", "update", "parent", "execute", "resource", "call", "request", "req", "version", "query", "argument", "p"]}}
{"code": "public IntBuffer slice() {return new ReadOnlyIntArrayBuffer(remaining(), backingArray, offset + position);}\n", "substitutes": {"slice": ["get", "available", "allocate", "remaining", "buffer"]}}
{"code": "public final byte get() {if (position == limit) {throw new BufferUnderflowException();}return this.block.peekByte(offset + position++);}\n", "substitutes": {"get": ["next", "get", "peek", "pop", "read"], "position": ["next", "length", "get", "peek", "index", "limit", "0", "pop", "position", "count", "offset", "size", "read"]}}
{"code": "public LongBuffer put(int index, long c) {checkIndex(index);backingArray[offset + index] = c;return this;}\n", "substitutes": {"put": ["add", "append", "fill", "set", "put"], "index": ["length", "index", "off", "add", "0", "append", "1", "position", "size", "fill", "i", "offset", "pos", "set", "put"], "c": ["append", "value", "position", "fill", "put", "0", "1", "offset", "set", "index", "off", "add", "b", "item", "i", "length", "v", "val", "pos", "size"], "backingArray": ["data", "append", "value", "position", "fill", "buffer", "put", "values", "array", "0", "1", "offset", "set", "index", "off", "add", "b", "item", "i", "length", "v", "buf", "val", "pos", "size"], "offset": ["data", "capacity", "append", "value", "position", "fill", "buffer", "put", "values", "array", "0", "1", "offset", "set", "index", "off", "add", "b", "item", "i", "length", "v", "buf", "val", "pos", "size"]}}
{"code": "public StoredField(String name, float value) {super(name, TYPE);fieldsData = value;}\n", "substitutes": {"name": ["path", "key", "name", "NAME", "field"], "value": ["data", "path", "key", "name", "NAME", "TYPE", "value", "DATA", "field", "0", "val", "type"], "fieldsData": ["data", "path", "key", "name", "NAME", "TYPE", "value", "DATA", "field", "0", "current", "count", "val", "type"]}}
{"code": "public IntervalSet getExpectedTokensWithinCurrentRule() {ATN atn = getInterpreter().atn;ATNState s = atn.states.get(getState());return atn.nextTokens(s);}\n", "substitutes": {"getExpectedTokensWithinCurrentRule": ["next", "generate", "tokens", "Tokens", "elements"], "atn": ["next", "an", "context", "f", "generate", "n", "c", "t", "a", "tokens", "e", "Tokens", "elements", "rule"], "s": ["n", "e", "a", "Tokens", "elements", "rule", "st", "context", "s", "generate", "t", "tokens", "states", "next", "inst", "state", "ts", "an", "f", "c"]}}
{"code": "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[FILESHARING]\\n\");buffer.append(\"    .readonly       = \").append(getReadOnly() == 1 ? \"true\" : \"false\").append(\"\\n\");buffer.append(\"    .password       = \").append(Integer.toHexString(getPassword())).append(\"\\n\");buffer.append(\"    .username       = \").append(getUsername()).append(\"\\n\");buffer.append(\"[/FILESHARING]\\n\");return buffer.toString();}\n", "substitutes": {"toString": ["length", "build", "trim", "name", "listing", "reverse", "String", "string", "render", "format"], "buffer": ["result", "length", "build", "s", "trim", "name", "listing", "builder", "reverse", "buf", "buffer", "b", "String", "string", "render", "format"]}}
{"code": "public SubmoduleInitCommand(Repository repo) {super(repo);paths = new ArrayList<>();}\n", "substitutes": {"repo": ["repository", "parent", "path", "repositories", "repo", "rep", "root"], "paths": ["repository", "parent", "path", "list", "children", "repositories", "repo", "rep", "root", "modules", "commands"]}}
{"code": "public void include(String name, AnyObjectId id) {boolean validRefName = Repository.isValidRefName(name) || Constants.HEAD.equals(name);if (!validRefName)throw new IllegalArgumentException(MessageFormat.format(JGitText.get().invalidRefName, name));if (include.containsKey(name))throw new IllegalStateException(JGitText.get().duplicateRef + name);include.put(name, id.toObjectId());}\n", "substitutes": {"include": ["references", "entries", "add", "ref", "names", "register", "map", "cache", "set", "put"], "name": ["ref", "url", "rel", "put", "entries", "id", "key", "name", "names", "hash", "map", "set", "references", "reference", "add", "prefix", "cache", "path", "branch", "register"], "id": ["object", "ref", "url", "rel", "put", "obj", "entries", "id", "o", "key", "name", "names", "hash", "map", "set", "references", "reference", "add", "prefix", "cache", "path", "branch", "register"], "validRefName": ["object", "validate", "ref", "url", "rel", "put", "obj", "entries", "id", "o", "key", "name", "exists", "names", "hash", "map", "found", "set", "references", "reference", "add", "prefix", "cache", "path", "branch", "register", "valid", "ok"]}}
{"code": "public Cluster enableSnapshotCopy(EnableSnapshotCopyRequest request) {request = beforeClientExecution(request);return executeEnableSnapshotCopy(request);}\n", "substitutes": {"enableSnapshotCopy": ["copy", "execute", "call", "snapshot", "Copy"], "request": ["input", "copy", "execute", "resource", "call", "request", "req", "snapshot", "argument", "Copy", "p"]}}
{"code": "public ValueFiller getValueFiller() {return new ValueFiller();}\n", "substitutes": {"getValueFiller": ["wrap", "create", "get", "f", "factory"]}}
{"code": "public void serialize(LittleEndianOutput out) {out.writeByte(getPane());out.writeShort(getActiveCellRow());out.writeShort(getActiveCellCol());out.writeShort(getActiveCellRef());int nRefs = field_6_refs.length;out.writeShort(nRefs);for (CellRangeAddress8Bit field_6_ref : field_6_refs) {field_6_ref.serialize(out);}}\n", "substitutes": {"serialize": ["output", "store", "encode", "print", "write", "format"], "out": ["bos", "output", "o", "this", "store", "encode", "out", "print", "write", "os", "format"], "nRefs": ["length", "bos", "output", "o", "n", "this", "store", "encode", "out", "size", "count", "print", "len", "write", "os", "format"], "field_6_ref": ["n", "r", "ref", "out", "write", "format", "output", "o", "this", "addr", "len", "os", "field", "encode", "print", "length", "bos", "f", "address", "store", "count", "size"]}}
{"code": "public static Counter newCounter() {return newCounter(false);}\n", "substitutes": {"newCounter": ["create", "get", "counter", "current", "count", "of"]}}
{"code": "public boolean get(String name, boolean dflt) {boolean vals[] = (boolean[]) valByRound.get(name);if (vals != null) {return vals[roundNumber % vals.length];}String sval = props.getProperty(name, \"\" + dflt);if (sval.indexOf(\":\") < 0) {return Boolean.valueOf(sval).booleanValue();}int k = sval.indexOf(\":\");String colName = sval.substring(0, k);sval = sval.substring(k + 1);colForValByRound.put(name, colName);vals = propToBooleanArray(sval);valByRound.put(name, vals);return vals[roundNumber % vals.length];}\n", "substitutes": {"get": ["eval", "get", "remove", "find", "poll", "val", "eq", "opt", "put"], "name": ["eval", "get", "column", "remove", "key", "name", "row", "field", "find", "poll", "val", "eq", "opt", "put", "col"], "dflt": ["column", "value", "put", "col", "eval", "key", "name", "poll", "eq", "opt", "default", "field", "remove", "get", "v", "row", "prop", "find", "val"], "vals": ["tmp", "column", "value", "put", "col", "eval", "key", "name", "poll", "eq", "opt", "result", "res", "default", "field", "b", "arr", "remove", "get", "v", "row", "prop", "find", "val"], "sval": ["tmp", "column", "value", "put", "col", "eval", "s", "key", "name", "poll", "eq", "opt", "result", "res", "default", "field", "property", "b", "arr", "remove", "get", "v", "row", "prop", "find", "val", "p"], "k": ["tmp", "column", "value", "start", "put", "col", "l", "eval", "s", "key", "name", "poll", "eq", "opt", "offset", "result", "res", "index", "default", "field", "property", "b", "arr", "remove", "i", "get", "v", "row", "prop", "find", "val", "pos", "p"], "colName": ["tmp", "column", "value", "start", "put", "col", "l", "eval", "s", "key", "name", "poll", "eq", "opt", "offset", "result", "res", "index", "default", "field", "property", "b", "arr", "remove", "i", "get", "v", "row", "prop", "c", "find", "val", "pos", "p"]}}
{"code": "public void preSerialize(){if(records.getTabpos() > 0) {TabIdRecord tir = ( TabIdRecord ) records.get(records.getTabpos());if(tir._tabids.length < boundsheets.size()) {fixTabIdRecord();}}}\n", "substitutes": {"preSerialize": ["fix", "update", "reset", "close", "clear"], "tir": ["fix", "update", "record", "rec", "tab", "r", "reset", "cd", "ti", "close", "clear"]}}
{"code": "public LimitTokenCountAnalyzer(Analyzer delegate, int maxTokenCount, boolean consumeAllTokens) {super(delegate.getReuseStrategy());this.delegate = delegate;this.maxTokenCount = maxTokenCount;this.consumeAllTokens = consumeAllTokens;}\n", "substitutes": {"delegate": ["s", "analysis", "this", "strategy", "parser", "analyze", "zer", "rule", "analy"], "maxTokenCount": ["s", "analysis", "this", "strategy", "parser", "count", "analyze", "offset", "size", "threshold", "max", "limit", "zer", "rule", "analy"], "consumeAllTokens": ["recursive", "force", "analysis", "strict", "zer", "threshold", "inclusive", "rule", "s", "this", "strategy", "analyze", "offset", "parser", "max", "exclusive", "limit", "cache", "analy", "count", "size", "reuse"]}}
{"code": "public ExternalBookBlock(int numberOfSheets) {_externalBookRecord = SupBookRecord.createInternalReferences((short) numberOfSheets);_externalNameRecords = new ExternalNameRecord[0];_crnBlocks = new CRNBlock[0];}\n", "substitutes": {"numberOfSheets": ["length", "id", "index", "0", "size", "type"], "_externalBookRecord": ["references", "length", "records", "id", "index", "reference", "0", "_", "ref", "size", "type"], "_externalNameRecords": ["references", "length", "records", "id", "index", "reference", "0", "_", "blocks", "ref", "names", "size", "type", "declarations"], "_crnBlocks": ["references", "result", "length", "records", "id", "index", "reference", "0", "_", "blocks", "ref", "block", "names", "body", "b", "size", "type", "declarations"]}}
{"code": "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append(\"[SCENARIOPROTECT]\\n\");buffer.append(\"    .protect         = \").append(getProtect()).append(\"\\n\");buffer.append(\"[/SCENARIOPROTECT]\\n\");return buffer.toString();}\n", "substitutes": {"toString": ["length", "get", "build", "inspect", "output", "reverse", "protect", "string", "trim"], "buffer": ["result", "length", "get", "build", "inspect", "s", "output", "builder", "reverse", "buf", "b", "protect", "string", "trim"]}}
{"code": "public PushCommand setThin(boolean thin) {checkCallable();this.thin = thin;return this;}\n", "substitutes": {"setThin": ["thick", "add", "append", "thin"], "thin": ["in", "add", "append", "inner", "inside", "thin", "thick", "margin", "nin"]}}
{"code": "public int compareTo(SearcherTracker other) {return Double.compare(other.recordTimeSec, recordTimeSec);}\n", "substitutes": {"compareTo": ["get", "equals", "compare", "eq", "compared"], "other": ["get", "s", "equals", "tracker", "compare", "t", "this", "eq", "compared", "ts", "tc"]}}
{"code": "public ReverseStringFilter create(TokenStream in) {return new ReverseStringFilter(in);}\n", "substitutes": {"create": ["wrap", "create", "parse", "build", "of"], "in": ["wrap", "create", "parse", "token", "build", "s", "input", "tokens", "of", "stream"]}}
{"code": "public BlockList() {directory = BlockList.<T> newDirectory(256);directory[0] = BlockList.<T> newBlock();tailBlock = directory[0];}\n", "substitutes": {"directory": ["dir", "children", "block", "blocks", "directory", "tail", "root"], "tailBlock": ["dir", "children", "block", "blocks", "directory", "tail", "Block", "b", "root"]}}
{"code": "public QueryScorer(WeightedSpanTerm[] weightedTerms) {this.fieldWeightedSpanTerms = new HashMap<>(weightedTerms.length);for (int i = 0; i < weightedTerms.length; i++) {WeightedSpanTerm existingTerm = fieldWeightedSpanTerms.get(weightedTerms[i].term);if ((existingTerm == null) ||(existingTerm.weight < weightedTerms[i].weight)) {fieldWeightedSpanTerms.put(weightedTerms[i].term, weightedTerms[i]);maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());}}skipInitExtractor = true;}\n", "substitutes": {"weightedTerms": ["fields", "term", "args", "terms", "words"], "fieldWeightedSpanTerms": ["result", "filters", "fields", "weights", "term", "map", "args", "terms", "words"], "i": ["result", "k", "filters", "index", "w", "fields", "n", "weights", "0", "ii", "term", "map", "j", "args", "terms", "words", "i"], "existingTerm": ["ft", "n", "term", "words", "weights", "0", "t", "tf", "map", "result", "index", "w", "args", "terms", "j", "i", "k", "filters", "f", "fields", "ii"], "maxTermWeight": ["ft", "n", "term", "words", "weights", "0", "t", "tf", "weight", "1", "map", "result", "index", "w", "weighted", "100", "args", "terms", "j", "i", "k", "filters", "f", "Weight", "fields", "ii"]}}
{"code": "public boolean equals(Object _other) {assert neverEquals(_other);if (_other instanceof MergedGroup) {MergedGroup<?> other = (MergedGroup<?>) _other;if (groupValue == null) {return other == null;} else {return groupValue.equals(other);}} else {return false;}}\n", "substitutes": {"equals": ["equals", "merge", "add", "compare", "equal", "contains"], "_other": ["obj", "other", "equals", "merge", "add", "o", "compare", "group", "equal", "value", "g", "contains"], "other": ["obj", "other", "equals", "merge", "add", "o", "compare", "group", "equal", "value", "merged", "g", "contains"]}}
{"code": "public final Charset charset() {return cs;}\n", "substitutes": {"charset": ["create", "get", "copy", "current", "cs"]}}
{"code": "public DescribeExperimentResult describeExperiment(DescribeExperimentRequest request) {request = beforeClientExecution(request);return executeDescribeExperiment(request);}\n", "substitutes": {"describeExperiment": ["execute", "request", "call", "send", "describe"], "request": ["input", "parent", "argument", "execute", "request", "call", "req", "query", "send", "describe"]}}
{"code": "public EscherGraphics(HSSFShapeGroup escherGroup, HSSFWorkbook workbook, Color forecolor, float verticalPointsPerPixel ){this.escherGroup = escherGroup;this.workbook = workbook;this.verticalPointsPerPixel = verticalPointsPerPixel;this.verticalPixelsPerPoint = 1 / verticalPointsPerPixel;this.font = new Font(\"Arial\", 0, 10);this.foreground = forecolor;}\n", "substitutes": {"escherGroup": ["parent", "shape", "group", "groups", "g"], "workbook": ["parent", "w", "shape", "book", "work", "group", "groups", "notebook", "writer", "g", "sheet"], "forecolor": ["parent", "background", "color", "w", "f", "shape", "book", "work", "group", "groups", "null", "foreground", "notebook", "fill", "writer", "g", "sheet"], "verticalPointsPerPixel": ["color", "padding", "fill", "writer", "sheet", "2", "shape", "alpha", "null", "g", "background", "w", "book", "work", "100", "notebook", "width", "parent", "f", "height", "group", "groups", "foreground", "size", "3"], "verticalPixelsPerPoint": ["color", "padding", "fill", "writer", "sheet", "2", "shape", "alpha", "null", "g", "background", "w", "book", "work", "100", "notebook", "ratio", "width", "parent", "f", "height", "group", "groups", "foreground", "scale", "size", "3"], "font": ["font", "color", "padding", "family", "fill", "writer", "sheet", "Font", "2", "shape", "alpha", "null", "g", "background", "w", "book", "work", "title", "100", "notebook", "ratio", "fonts", "width", "parent", "f", "height", "group", "groups", "foreground", "scale", "size", "3"], "foreground": ["font", "color", "padding", "family", "fill", "writer", "sheet", "Font", "2", "shape", "alpha", "outline", "null", "g", "background", "w", "book", "work", "title", "100", "notebook", "ratio", "fonts", "width", "parent", "f", "height", "group", "groups", "foreground", "scale", "size", "3"]}}
{"code": "public String pattern() {return patternText;}\n", "substitutes": {"pattern": ["pattern", "text", "get", "name"]}}
{"code": "public DeleteRouteTableResult deleteRouteTable(DeleteRouteTableRequest request) {request = beforeClientExecution(request);return executeDeleteRouteTable(request);}\n", "substitutes": {"deleteRouteTable": ["create", "destroy", "execute", "run", "delete"], "request": ["input", "create", "parent", "destroy", "execute", "resource", "run", "request", "req", "call", "delete", "query", "p"]}}
{"code": "public AssociateVPCWithHostedZoneResult associateVPCWithHostedZone(AssociateVPCWithHostedZoneRequest request) {request = beforeClientExecution(request);return executeAssociateVPCWithHostedZone(request);}\n", "substitutes": {"associateVPCWithHostedZone": ["update", "create", "execute", "call", "associate"], "request": ["input", "update", "create", "op", "execute", "call", "request", "req", "instruction", "associate", "argument", "p"]}}
{"code": "public PutIntegrationResult putIntegration(PutIntegrationRequest request) {request = beforeClientExecution(request);return executePutIntegration(request);}\n", "substitutes": {"putIntegration": ["update", "execute", "run", "send", "put"], "request": ["input", "update", "parent", "argument", "execute", "run", "request", "call", "req", "query", "send", "put"]}}
{"code": "public SimpleEntry(K theKey, V theValue) {key = theKey;value = theValue;}\n", "substitutes": {"theKey": ["k", "key", "name", "value", "Key", "null"], "theValue": ["k", "v", "key", "name", "this", "value", "Key", "val", "\"\"", "null", "the"], "key": ["k", "entry", "id", "v", "path", "key", "name", "this", "value", "Key", "val", "\"\"", "null", "the"], "value": ["k", "entry", "id", "v", "path", "key", "name", "this", "value", "Key", "val", "\"\"", "null", "the", "values"]}}
{"code": "public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {for (int i = 0; i < iterations; ++i) {final long byte0 = blocks[blocksOffset++] & 0xFF;final long byte1 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);final long byte2 = blocks[blocksOffset++] & 0xFF;values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;}}\n", "substitutes": {"decode": ["process", "update", "build", "generate", "shuffle"], "blocks": ["process", "update", "data", "build", "bytes", "generate", "shuffle", "bits", "blocks", "buf", "buffer", "values"], "blocksOffset": ["process", "update", "data", "shuffle", "bits", "blocks", "start", "position", "buffer", "values", "build", "generate", "offset", "index", "i", "j", "bytes", "buf", "pos"], "values": ["process", "update", "data", "shuffle", "bits", "blocks", "start", "position", "buffer", "values", "build", "generate", "offset", "result", "index", "i", "j", "bytes", "buf", "pos"], "valuesOffset": ["process", "update", "data", "shuffle", "bits", "blocks", "start", "position", "buffer", "values", "build", "generate", "offset", "result", "index", "off", "i", "j", "length", "bytes", "count", "buf", "pos", "size"], "iterations": ["process", "update", "data", "n", "shuffle", "bits", "blocks", "start", "position", "buffer", "values", "build", "generate", "offset", "len", "result", "index", "off", "i", "j", "length", "bytes", "count", "buf", "pos", "size"], "i": ["process", "update", "data", "n", "shuffle", "bits", "blocks", "start", "r", "position", "buffer", "values", "iter", "build", "generate", "t", "offset", "len", "result", "iterations", "index", "iteration", "off", "x", "i", "j", "length", "bytes", "count", "buf", "pos", "size"], "byte0": ["process", "update", "data", "bit", "n", "shuffle", "bits", "blocks", "start", "r", "position", "value", "buffer", "values", "iter", "build", "generate", "t", "offset", "len", "result", "iterations", "index", "iteration", "off", "x", "i", "j", "length", "bytes", "count", "buf", "val", "pos", "size"], "byte1": ["process", "update", "data", "bit", "n", "shuffle", "bits", "blocks", "start", "r", "position", "value", "buffer", "mask", "values", "iter", "build", "generate", "t", "offset", "len", "result", "iterations", "index", "iteration", "off", "x", "b", "i", "j", "length", "bytes", "count", "buf", "val", "pos", "size"], "byte2": ["process", "update", "data", "bit", "n", "padding", "shuffle", "bits", "blocks", "start", "r", "position", "value", "shift", "buffer", "mask", "values", "iter", "build", "generate", "t", "offset", "len", "result", "iterations", "index", "iteration", "off", "x", "b", "i", "j", "length", "bytes", "count", "buf", "val", "pos", "size"]}}
{"code": "public DisassociateConnectionFromLagResult disassociateConnectionFromLag(DisassociateConnectionFromLagRequest request) {request = beforeClientExecution(request);return executeDisassociateConnectionFromLag(request);}\n", "substitutes": {"disassociateConnectionFromLag": ["execute", "detach", "call", "delete", "associate"], "request": ["input", "parent", "execute", "detach", "call", "request", "req", "instruction", "delete", "query", "associate", "argument", "p"]}}
{"code": "public FileMode getOldMode() {return oldMode;}\n", "substitutes": {"getOldMode": ["get", "me", "old", "Mode", "mode"]}}
{"code": "@Override public String toString() {return m.toString();}\n", "substitutes": {"toString": ["next", "get", "name", "group", "value", "string"]}}
{"code": "public StopKeyPhrasesDetectionJobResult stopKeyPhrasesDetectionJob(StopKeyPhrasesDetectionJobRequest request) {request = beforeClientExecution(request);return executeStopKeyPhrasesDetectionJob(request);}\n", "substitutes": {"stopKeyPhrasesDetectionJob": ["result", "execute", "call", "run", "stop"], "request": ["result", "input", "parent", "op", "execute", "call", "run", "request", "req", "query", "argument", "stop", "p"]}}
{"code": "public String toString() {return \"[Array Formula or Shared Formula]\\n\" + \"row = \" + getRow() + \"\\n\" + \"col = \" + getColumn() + \"\\n\";}\n", "substitutes": {"toString": ["description", "print", "String", "explain", "format"]}}
{"code": "public ListDominantLanguageDetectionJobsResult listDominantLanguageDetectionJobs(ListDominantLanguageDetectionJobsRequest request) {request = beforeClientExecution(request);return executeListDominantLanguageDetectionJobs(request);}\n", "substitutes": {"listDominantLanguageDetectionJobs": ["ls", "execute", "list", "lists", "listing"], "request": ["input", "op", "ls", "execute", "list", "lists", "listing", "request", "req", "call", "instruction", "query", "p"]}}
{"code": "public String toString() {return \"slice start=\" + start + \" length=\" + length + \" readerIndex=\" + readerIndex;}\n", "substitutes": {"toString": ["info", "description", "str", "describe", "String"]}}
{"code": "public static final int parseHexInt4(final byte digit) {final byte r = digits16[digit];if (r < 0)throw new ArrayIndexOutOfBoundsException();return r;}\n", "substitutes": {"parseHexInt4": ["ord", "get", "index", "r", "digit"], "digit": ["ord", "get", "s", "index", "c", "r", "0", "b", "digit", "i"], "r": ["ord", "get", "s", "index", "v", "c", "r", "0", "value", "hex", "val", "b", "digit", "i"]}}
{"code": "public Attribute(String name, String value) {setName(name);setValue(value);}\n", "substitutes": {"name": ["Name", "key", "name", "value", "field", "attribute"], "value": ["Name", "text", "key", "name", "value", "field", "val", "attribute"]}}
{"code": "public DescribeStackSetOperationResult describeStackSetOperation(DescribeStackSetOperationRequest request) {request = beforeClientExecution(request);return executeDescribeStackSetOperation(request);}\n", "substitutes": {"describeStackSetOperation": ["execute", "call", "request", "send", "describe"], "request": ["input", "parent", "argument", "execute", "call", "request", "req", "query", "send", "p", "describe"]}}
{"code": "public HSSFCell getCell(int cellnum) {return getCell(cellnum, book.getMissingCellPolicy());}\n", "substitutes": {"getCell": ["create", "get", "cell", "make", "add", "missing"], "cellnum": ["create", "get", "id", "index", "cell", "make", "add", "n", "offset", "missing", "i"]}}
{"code": "public void write(byte[] b) {writeContinueIfRequired(b.length);_ulrOutput.write(b);}\n", "substitutes": {"write": ["add", "append", "flush", "send", "write", "put"], "b": ["data", "bytes", "add", "append", "b", "buf", "flush", "send", "buffer", "write", "put"]}}
{"code": "public ResetImageAttributeRequest(String imageId, ResetImageAttributeName attribute) {setImageId(imageId);setAttribute(attribute.toString());}\n", "substitutes": {"imageId": ["id", "identifier", "name", "url", "image"], "attribute": ["id", "identifier", "n", "name", "a", "url", "request", "image", "attributes", "attribute"]}}
{"code": "public void discardResultContents() {resultContents = null;}\n", "substitutes": {"discardResultContents": ["reset", "close", "free", "clear", "remove"], "resultContents": ["result", "results", "contents", "reset", "body", "close", "content", "free", "clear", "remove"]}}
{"code": "public ObjectId getPeeledObjectId() {return getLeaf().getPeeledObjectId();}\n", "substitutes": {"getPeeledObjectId": ["get", "id", "identifier", "key", "value", "Id"]}}
{"code": "public void undeprecateDomain(UndeprecateDomainRequest request) {request = beforeClientExecution(request);executeUndeprecateDomain(request);}\n", "substitutes": {"undeprecateDomain": ["process", "execute", "run", "invoke", "delete"], "request": ["process", "input", "execute", "resource", "Request", "run", "invoke", "request", "call", "delete", "req", "query", "argument"]}}
{"code": "public void write(LittleEndianOutput out) {out.writeByte(sid + getPtgClass());out.writeByte(field_3_string.length()); out.writeByte(_is16bitUnicode ? 0x01 : 0x00);if (_is16bitUnicode) {StringUtil.putUnicodeLE(field_3_string, out);} else {StringUtil.putCompressedUnicode(field_3_string, out);}}\n", "substitutes": {"write": ["output", "store", "encode", "write", "put"], "out": ["bos", "bytes", "output", "o", "this", "os", "store", "encode", "out", "write", "put"]}}
{"code": "public DeleteQueueResult deleteQueue(String queueUrl) {return deleteQueue(new DeleteQueueRequest().withQueueUrl(queueUrl));}\n", "substitutes": {"deleteQueue": ["execute", "request", "delete", "queue", "send", "del", "remove"], "queueUrl": ["id", "execute", "URL", "name", "request", "url", "q", "delete", "queue", "send", "del", "remove"]}}
{"code": "public void setCheckEofAfterPackFooter(boolean b) {checkEofAfterPackFooter = b;}\n", "substitutes": {"setCheckEofAfterPackFooter": ["check", "accept", "init", "b", "set"], "b": ["enabled", "check", "v", "accept", "value", "init", "val", "b", "set"], "checkEofAfterPackFooter": ["finished", "enabled", "f", "check", "v", "done", "accept", "value", "checked", "init", "val", "b", "set"]}}
{"code": "public void swap() {final int sBegin = beginA;final int sEnd = endA;beginA = beginB;endA = endB;beginB = sBegin;endB = sEnd;}\n", "substitutes": {"swap": ["restore", "swap", "reset", "close", "clear"], "sBegin": ["begin", "end", "s", "restore", "swap", "start", "reset", "b", "close", "clear"], "sEnd": ["begin", "end", "s", "sa", "restore", "swap", "null", "start", "reset", "b", "close", "clear", "i"], "beginA": ["begin", "end", "s", "sa", "index", "restore", "swap", "0", "null", "start", "a", "reset", "b", "close", "clear", "i"], "endA": ["begin", "end", "s", "sa", "index", "restore", "End", "swap", "0", "null", "start", "a", "offset", "reset", "b", "close", "clear", "i"], "beginB": ["begin", "end", "s", "sa", "index", "restore", "End", "swap", "0", "null", "start", "a", "offset", "reset", "b", "close", "clear", "i"], "endB": ["begin", "end", "s", "sa", "index", "restore", "End", "swap", "0", "null", "start", "a", "offset", "reset", "b", "close", "clear", "i"]}}
{"code": "public int getPackedGitWindowSize() {return packedGitWindowSize;}\n", "substitutes": {"getPackedGitWindowSize": ["width", "length", "get", "sizeof", "size"]}}
{"code": "public PutMetricDataResult putMetricData(PutMetricDataRequest request) {request = beforeClientExecution(request);return executePutMetricData(request);}\n", "substitutes": {"putMetricData": ["update", "execute", "call", "send", "put"], "request": ["input", "update", "parent", "argument", "response", "execute", "call", "request", "req", "query", "send", "put"]}}
{"code": "public GetCelebrityRecognitionResult getCelebrityRecognition(GetCelebrityRecognitionRequest request) {request = beforeClientExecution(request);return executeGetCelebrityRecognition(request);}\n", "substitutes": {"getCelebrityRecognition": ["get", "receive", "call", "learn", "async"], "request": ["input", "get", "parent", "op", "receive", "call", "request", "learn", "req", "query", "async", "instruction"]}}
{"code": "public CreateQueueRequest(String queueName) {setQueueName(queueName);}\n", "substitutes": {"queueName": ["key", "name", "prefix", "q", "username", "queue", "null"]}}
{"code": "public Area3DPxg(int externalWorkbookNumber, SheetIdentifier sheetName, AreaReference arearef) {super(arearef);this.externalWorkbookNumber = externalWorkbookNumber;this.firstSheetName = sheetName.getSheetIdentifier().getName();if (sheetName instanceof SheetRangeIdentifier) {this.lastSheetName = ((SheetRangeIdentifier)sheetName).getLastSheetIdentifier().getName();} else {this.lastSheetName = null;}}\n", "substitutes": {"externalWorkbookNumber": ["id", "index", "0", "level", "offset", "i", "sheet"], "sheetName": ["next", "parent", "id", "index", "identifier", "fi", "0", "first", "this", "from", "start", "level", "offset", "i", "sheet"], "arearef": ["identifier", "start", "ref", "sheet", "id", "0", "this", "level", "offset", "next", "references", "index", "reference", "fi", "first", "i", "parent", "area", "from"], "firstSheetName": ["identifier", "start", "ref", "sheet", "id", "name", "0", "this", "level", "offset", "next", "references", "index", "reference", "fi", "prefix", "first", "title", "i", "parent", "area", "from"], "lastSheetName": ["identifier", "start", "ref", "sheet", "id", "name", "0", "this", "last", "ranges", "level", "offset", "next", "references", "range", "index", "reference", "fi", "prefix", "first", "title", "i", "parent", "area", "from"]}}
{"code": "public void setBaseline(long clockTime) {t0 = clockTime;timeout = t0 + ticksAllowed;}\n", "substitutes": {"setBaseline": ["update", "tick", "timeout", "start", "reset"], "clockTime": ["update", "tick", "baseline", "base", "timeout", "start", "reset", "delta", "b", "p"], "t0": ["update", "tick", "horizon", "baseline", "base", "timeout", "clock", "start", "0", "1", "reset", "delta", "b", "p"], "timeout": ["update", "tick", "horizon", "baseline", "base", "timeout", "clock", "start", "0", "1", "offset", "reset", "delta", "b", "p"]}}
{"code": "public MoveAddressToVpcResult moveAddressToVpc(MoveAddressToVpcRequest request) {request = beforeClientExecution(request);return executeMoveAddressToVpc(request);}\n", "substitutes": {"moveAddressToVpc": ["update", "apply", "execute", "call", "run"], "request": ["input", "update", "apply", "parent", "execute", "call", "run", "request", "req", "instruction", "query", "argument"]}}
{"code": "public String toString() {String coll = collectionModel.getName();if (coll != null) {return String.format(Locale.ROOT, \"LM %s - %s\", getName(), coll);} else {return String.format(Locale.ROOT, \"LM %s\", getName());}}\n", "substitutes": {"toString": ["build", "output", "name", "title", "summary"], "coll": ["build", "output", "n", "key", "name", "collection", "title", "c", "summary", "col"]}}
{"code": "public DescribeLagsResult describeLags(DescribeLagsRequest request) {request = beforeClientExecution(request);return executeDescribeLags(request);}\n", "substitutes": {"describeLags": ["begin", "list", "summarize", "summary", "describe"], "request": ["input", "begin", "parent", "argument", "list", "request", "req", "call", "query", "summarize", "summary", "describe"]}}
{"code": "public AreaEval offset(int relFirstRowIx, int relLastRowIx,int relFirstColIx, int relLastColIx) {if (_refEval == null) {return _areaEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);}return _refEval.offset(relFirstRowIx, relLastRowIx, relFirstColIx, relLastColIx);}\n", "substitutes": {"offset": ["eval", "create", "get", "apply", "ref", "evaluate", "eq", "set"], "relFirstRowIx": ["eval", "create", "get", "apply", "id", "index", "row", "ref", "evaluate", "eq", "offset", "set", "i"], "relLastRowIx": ["create", "column", "start", "ref", "col", "eval", "id", "0", "eq", "offset", "set", "apply", "index", "y", "evaluate", "i", "get", "row", "columns"], "relFirstColIx": ["create", "column", "start", "ref", "col", "eval", "id", "0", "eq", "offset", "set", "apply", "index", "y", "evaluate", "i", "width", "get", "row", "columns"], "relLastColIx": ["create", "column", "n", "start", "ref", "col", "eval", "id", "0", "eq", "offset", "set", "apply", "index", "adjust", "y", "evaluate", "flags", "i", "width", "get", "row", "columns", "factor"]}}
{"code": "public ShortBuffer put(short[] src, int srcOffset, int shortCount) {byteBuffer.limit(limit * SizeOf.SHORT);byteBuffer.position(position * SizeOf.SHORT);if (byteBuffer instanceof ReadWriteDirectByteBuffer) {((ReadWriteDirectByteBuffer) byteBuffer).put(src, srcOffset, shortCount);} else {((ReadWriteHeapByteBuffer) byteBuffer).put(src, srcOffset, shortCount);}this.position += shortCount;return this;}\n", "substitutes": {"put": ["get", "add", "append", "set", "put"], "src": ["get", "array", "bytes", "add", "append", "src", "buf", "b", "buffer", "set", "put"], "srcOffset": ["get", "array", "bytes", "index", "add", "limit", "append", "src", "buf", "position", "offset", "pos", "b", "buffer", "set", "put"], "shortCount": ["capacity", "append", "value", "position", "buffer", "put", "array", "offset", "len", "set", "index", "add", "dest", "src", "limit", "b", "length", "get", "bytes", "remaining", "buf", "pos"], "position": ["capacity", "append", "value", "position", "buffer", "put", "array", "offset", "len", "set", "index", "off", "add", "dest", "src", "limit", "b", "skip", "length", "get", "bytes", "remaining", "buf", "pos"]}}
{"code": "public void initialize(final String cat) {this._cat=cat;}\n", "substitutes": {"initialize": ["cat", "category", "add", "init", "set"], "cat": ["catalog", "cat", "category", "add", "name", "c", "init", "set"], "_cat": ["catalog", "cat", "category", "text", "add", "name", "c", "init", "set"]}}
{"code": "public void write(int oneByte) throws IOException {out.write(oneByte);written++;}\n", "substitutes": {"write": ["skip", "wrote", "println", "append", "flush", "print", "write", "put"], "oneByte": ["skip", "wrote", "written", "s", "w", "n", "c", "println", "append", "flush", "b", "print", "write", "put"], "written": ["skip", "wrote", "written", "s", "w", "n", "c", "println", "append", "offset", "position", "size", "flush", "pos", "b", "print", "write", "put"]}}
{"code": "public DescribeImportImageTasksResult describeImportImageTasks(DescribeImportImageTasksRequest request) {request = beforeClientExecution(request);return executeDescribeImportImageTasks(request);}\n", "substitutes": {"describeImportImageTasks": ["list", "execute", "call", "describe", "summary"], "request": ["input", "parent", "argument", "list", "execute", "call", "request", "req", "instruction", "query", "describe", "summary"]}}
{"code": "public ColumnInfoRecord(RecordInputStream in) {_firstCol = in.readUShort();_lastCol  = in.readUShort();_colWidth = in.readUShort();_xfIndex  = in.readUShort();_options   = in.readUShort();switch(in.remaining()) {case 2: field_6_reserved  = in.readUShort();break;case 1:field_6_reserved  = in.readByte();break;case 0:field_6_reserved  = 0;break;default:throw new RuntimeException(\"Unusual record size remaining=(\" + in.remaining() + \")\");}}\n", "substitutes": {"in": ["input", "ins", "in", "is", "reader", "stream"], "_firstCol": ["input", "length", "ins", "in", "id", "index", "size", "offset", "is", "reader", "stream"], "_lastCol": ["input", "length", "ins", "in", "id", "index", "name", "_", "size", "offset", "is", "reader", "stream"], "_colWidth": ["input", "length", "ins", "in", "id", "index", "name", "_", "size", "version", "flags", "offset", "is", "reader", "stream"], "_xfIndex": ["input", "length", "ins", "in", "id", "index", "name", "_", "size", "version", "flags", "offset", "is", "type", "reader", "stream"], "_options": ["input", "length", "ins", "in", "id", "index", "name", "_", "size", "version", "flags", "offset", "is", "type", "reader", "stream"], "field_6_reserved": ["input", "length", "ins", "in", "id", "index", "columns", "options", "name", "_", "size", "version", "flags", "offset", "is", "type", "reader", "stream"]}}
{"code": "public Status(IndexDiff diff) {super();this.diff = diff;hasUncommittedChanges = !diff.getAdded().isEmpty() || !diff.getChanged().isEmpty() || !diff.getRemoved().isEmpty() || !diff.getMissing().isEmpty() || !diff.getModified().isEmpty() || !diff.getConflicting().isEmpty();clean = !hasUncommittedChanges && diff.getUntracked().isEmpty();}\n", "substitutes": {"diff": ["diff", "info", "index", "dirty", "e", "status", "null", "d", "clean"], "hasUncommittedChanges": ["diff", "inconsistent", "info", "index", "dirty", "changed", "e", "status", "modified", "cleaned", "empty", "removed", "null", "d", "clean", "added"], "clean": ["diff", "inconsistent", "info", "index", "dirty", "changed", "e", "status", "modified", "cleaned", "stable", "empty", "removed", "null", "d", "sorted", "clean", "added"]}}
{"code": "public CreateExperimentResult createExperiment(CreateExperimentRequest request) {request = beforeClientExecution(request);return executeCreateExperiment(request);}\n", "substitutes": {"createExperiment": ["create", "execute", "call", "run", "send"], "request": ["input", "create", "parent", "argument", "execute", "resource", "call", "run", "request", "req", "query", "send", "parameters"]}}
{"code": "public UnknownRecord clone() {return copy();}\n", "substitutes": {"clone": ["get", "copy", "record", "Copy", "copies"]}}
{"code": "public FloatBuffer slice() {byteBuffer.limit(limit * SizeOf.FLOAT);byteBuffer.position(position * SizeOf.FLOAT);ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());FloatBuffer result = new FloatToByteBufferAdapter(bb);byteBuffer.clear();return result;}\n", "substitutes": {"slice": ["create", "get", "build", "duplicate", "copy", "allocate", "buffer", "clear"], "bb": ["result", "create", "data", "get", "build", "duplicate", "copy", "allocate", "buf", "slice", "buffer", "clear"], "result": ["result", "create", "data", "get", "build", "duplicate", "copy", "a", "allocate", "buf", "b", "slice", "buffer", "adapter", "clear"]}}
{"code": "public DescribeSnapshotSchedulesResult describeSnapshotSchedules(DescribeSnapshotSchedulesRequest request) {request = beforeClientExecution(request);return executeDescribeSnapshotSchedules(request);}\n", "substitutes": {"describeSnapshotSchedules": ["execute", "list", "call", "describe", "summary"], "request": ["input", "parent", "execute", "list", "call", "request", "req", "instruction", "query", "describe", "summary", "p"]}}
{"code": "public ListImagesResult listImages(ListImagesRequest request) {request = beforeClientExecution(request);return executeListImages(request);}\n", "substitutes": {"listImages": ["index", "execute", "list", "lists", "images"], "request": ["input", "parent", "index", "execute", "list", "lists", "request", "call", "req", "instruction", "query", "images", "p"]}}
{"code": "public Diff(int ins, int del, int rep, int noop) {INSERT = ins;DELETE = del;REPLACE = rep;NOOP = noop;}\n", "substitutes": {"ins": ["ins", "inc", "add", "insert", "put"], "del": ["de", "ins", "dele", "inc", "add", "delet", "delete", "rem", "insert", "del", "put"], "rep": ["de", "ins", "replace", "dele", "inc", "add", "replacement", "delet", "REPL", "repl", "delete", "rem", "insert", "del", "put"], "noop": ["ins", "dele", "n", "repl", "delete", "prev", "put", "op", "next", "de", "inc", "add", "replacement", "delet", "REPL", "rem", "skip", "no", "replace", "insert", "del"], "INSERT": ["ins", "dele", "n", "repl", "delete", "prev", "put", "op", "next", "de", "inc", "add", "replacement", "delet", "REPL", "SELECT", "rem", "READ", "skip", "UPDATE", "no", "replace", "insert", "ADD", "del", "INS"], "DELETE": ["ins", "dele", "n", "repl", "delete", "prev", "put", "op", "next", "de", "inc", "add", "replacement", "delet", "REPL", "SELECT", "DEL", "MOD", "rem", "READ", "skip", "UPDATE", "no", "replace", "DATA", "insert", "ADD", "del", "INS"], "REPLACE": ["ins", "dele", "n", "REPORT", "repl", "delete", "prev", "put", "op", "next", "de", "inc", "add", "replacement", "delet", "REPL", "SELECT", "DEL", "MOD", "rem", "READ", "skip", "UPDATE", "no", "RP", "replace", "PR", "DATA", "rep", "insert", "ADD", "del", "INS"], "NOOP": ["NEXT", "ins", "dele", "n", "REPORT", "repl", "delete", "prev", "put", "op", "OP", "next", "de", "inc", "add", "replacement", "delet", "REPL", "SELECT", "DEL", "MOD", "rem", "POP", "READ", "skip", "UPDATE", "no", "RP", "replace", "PR", "DATA", "rep", "insert", "ADD", "del", "INS"]}}
{"code": "public String toFormulaString(String[] operands){StringBuilder buffer = new StringBuilder();buffer.append(operands[ 0 ]);buffer.append(\",\");buffer.append(operands[ 1 ]);return buffer.toString();}\n", "substitutes": {"toFormulaString": ["build", "join", "execute", "assemble", "format"], "operands": ["variables", "build", "s", "arguments", "params", "join", "execute", "args", "assemble", "parts", "values", "format"], "buffer": ["result", "variables", "build", "s", "arguments", "params", "join", "execute", "builder", "b", "buf", "args", "assemble", "parts", "values", "format"]}}
{"code": "public static void setupEnvironment(String[] workbookNames, ForkedEvaluator[] evaluators) {WorkbookEvaluator[] wbEvals = new WorkbookEvaluator[evaluators.length];for (int i = 0; i < wbEvals.length; i++) {wbEvals[i] = evaluators[i]._evaluator;}CollaboratingWorkbooksEnvironment.setup(workbookNames, wbEvals);}\n", "substitutes": {"setupEnvironment": ["create", "build", "initialize", "init", "setup"], "workbookNames": ["create", "build", "initialize", "arguments", "paths", "names", "init", "setup", "args", "null", "files", "env"], "evaluators": ["writers", "create", "build", "initialize", "arguments", "paths", "evaluations", "readers", "rules", "names", "pairs", "init", "setup", "args", "null", "files", "env"], "wbEvals": ["create", "readers", "files", "build", "names", "pairs", "null", "writers", "result", "initialize", "args", "arr", "paths", "evaluations", "arguments", "rules", "builders", "init", "setup", "env"], "i": ["create", "n", "readers", "files", "build", "names", "pairs", "null", "writers", "result", "initialize", "index", "args", "arr", "i", "j", "k", "paths", "evaluations", "arguments", "rules", "builders", "init", "setup", "env"]}}
{"code": "public ListPhotoTagsRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"ListPhotoTags\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n", "substitutes": {}}
{"code": "public RandomSamplingFacetsCollector(int sampleSize, long seed) {super(false);this.sampleSize = sampleSize;this.random = new XORShift64Random(seed);this.sampledDocs = null;}\n", "substitutes": {"sampleSize": ["iterations", "n", "seed", "count", "threads", "limit", "size"], "seed": ["iterations", "length", "samples", "n", "seed", "random", "count", "threads", "limit", "size"], "random": ["rand", "iterations", "length", "generator", "samples", "n", "r", "seed", "random", "count", "threads", "limit", "size"], "sampledDocs": ["rand", "iterations", "length", "generator", "samples", "n", "shuffle", "r", "weights", "seed", "random", "count", "pool", "threads", "limit", "size"]}}
{"code": "public AllocateStaticIpResult allocateStaticIp(AllocateStaticIpRequest request) {request = beforeClientExecution(request);return executeAllocateStaticIp(request);}\n", "substitutes": {"allocateStaticIp": ["create", "apply", "execute", "allocate", "call"], "request": ["input", "create", "apply", "parent", "execute", "allocate", "call", "request", "req", "instruction", "query", "parameters", "p"]}}
{"code": "public FeatRecord(RecordInputStream in) {futureHeader = new FtrHeader(in);isf_sharedFeatureType = in.readShort();reserved1 = in.readByte();reserved2 = in.readInt();int cref = in.readUShort();cbFeatData = in.readInt();reserved3 = in.readShort();cellRefs = new CellRangeAddress[cref];for(int i=0; i<cellRefs.length; i++) {cellRefs[i] = new CellRangeAddress(in);}switch(isf_sharedFeatureType) {case FeatHdrRecord.SHAREDFEATURES_ISFPROTECTION:sharedFeature = new FeatProtection(in);break;case FeatHdrRecord.SHAREDFEATURES_ISFFEC2:sharedFeature = new FeatFormulaErr2(in);break;case FeatHdrRecord.SHAREDFEATURES_ISFFACTOID:sharedFeature = new FeatSmartTag(in);break;default:logger.log( POILogger.ERROR, \"Unknown Shared Feature \" + isf_sharedFeatureType + \" found!\");}}\n", "substitutes": {"in": ["input", "ins", "in", "f", "record", "this", "0", "i", "null", "is", "reader", "true", "stream"], "futureHeader": ["input", "ins", "in", "f", "record", "this", "0", "header", "i", "null", "is", "trailer", "reader", "fr", "true", "stream"], "isf_sharedFeatureType": ["kind", "ins", "header", "type", "trailer", "true", "input", "record", "this", "0", "null", "stream", "feat", "reserved", "field", "version", "flags", "is", "reader", "fr", "i", "in", "f", "feature", "size"], "reserved1": ["kind", "ins", "header", "type", "trailer", "true", "input", "record", "name", "this", "0", "null", "stream", "feat", "reserved", "field", "version", "flags", "is", "reader", "fr", "i", "in", "f", "feature", "size"], "reserved2": ["kind", "ins", "header", "type", "trailer", "true", "input", "record", "name", "this", "0", "null", "offset", "stream", "feat", "reserved", "field", "version", "flags", "is", "reader", "fr", "i", "length", "in", "f", "feature", "size"], "cref": ["kind", "ins", "capacity", "256", "header", "type", "trailer", "true", "input", "record", "name", "this", "0", "null", "offset", "stream", "feat", "reserved", "field", "version", "flags", "is", "reader", "fr", "i", "length", "in", "f", "feature", "4", "size", "3"], "cbFeatData": ["kind", "ins", "capacity", "256", "unused", "header", "type", "trailer", "true", "input", "record", "name", "this", "0", "null", "offset", "stream", "feat", "reserved", "field", "version", "flags", "is", "reader", "fr", "i", "length", "in", "f", "feature", "4", "size", "3"], "reserved3": ["kind", "ins", "capacity", "256", "unused", "header", "type", "trailer", "true", "input", "record", "name", "this", "0", "null", "offset", "stream", "feat", "reserved", "field", "version", "flags", "is", "reader", "fr", "i", "length", "in", "f", "feature", "4", "size", "3"], "cellRefs": ["kind", "ins", "capacity", "256", "unused", "header", "type", "trailer", "true", "input", "record", "name", "this", "0", "ranges", "cells", "addresses", "rs", "addr", "null", "offset", "stream", "feat", "reserved", "field", "version", "flags", "is", "reader", "fr", "i", "length", "in", "f", "feature", "4", "regions", "size", "3"], "i": ["kind", "ins", "capacity", "256", "unused", "n", "header", "type", "trailer", "true", "input", "record", "name", "this", "0", "ranges", "cells", "addresses", "rs", "addr", "null", "offset", "stream", "feat", "index", "reserved", "field", "version", "flags", "is", "reader", "fr", "i", "j", "k", "length", "in", "f", "feature", "4", "regions", "pos", "size", "3"], "sharedFeature": ["kind", "ins", "capacity", "256", "unused", "n", "section", "header", "type", "trailer", "true", "input", "record", "name", "this", "0", "ranges", "cells", "addresses", "rs", "addr", "null", "offset", "stream", "feat", "result", "index", "reserved", "ret", "field", "version", "flags", "is", "reader", "fr", "i", "j", "k", "length", "in", "f", "feature", "4", "regions", "pos", "size", "3"]}}
{"code": "public RevCommit tryFastForward(RevCommit newCommit) throws IOException,GitAPIException {Ref head = getHead();ObjectId headId = head.getObjectId();if (headId == null)throw new RefNotFoundException(MessageFormat.format(JGitText.get().refNotResolved, Constants.HEAD));RevCommit headCommit = walk.lookupCommit(headId);if (walk.isMergedInto(newCommit, headCommit))return newCommit;String headName = getHeadName(head);return tryFastForward(headName, headCommit, newCommit);}\n", "substitutes": {"tryFastForward": ["diff", "update", "put", "replace", "merge", "add", "resolve"], "newCommit": ["diff", "update", "put", "walk", "replace", "w", "merge", "add", "head", "this", "tail", "commit", "null", "root", "false", "resolve"], "head": ["update", "link", "ref", "tail", "put", "diff", "h", "this", "null", "root", "walk", "w", "merge", "add", "head", "rev", "replace", "commit", "false", "resolve"], "headId": ["update", "link", "object", "ref", "tail", "put", "diff", "obj", "h", "id", "o", "this", "null", "root", "walk", "w", "merge", "add", "head", "rev", "replace", "commit", "false", "resolve"], "headCommit": ["update", "link", "object", "ref", "tail", "put", "diff", "obj", "h", "id", "o", "this", "origin", "null", "root", "commits", "walk", "w", "merge", "add", "head", "rev", "replace", "commit", "false", "resolve"], "headName": ["update", "link", "object", "ref", "tail", "put", "diff", "obj", "h", "id", "o", "key", "name", "this", "origin", "null", "root", "commits", "walk", "w", "merge", "add", "head", "rev", "replace", "path", "commit", "false", "resolve"]}}
{"code": "public CreateSnapshotScheduleResult createSnapshotSchedule(CreateSnapshotScheduleRequest request) {request = beforeClientExecution(request);return executeCreateSnapshotSchedule(request);}\n", "substitutes": {"createSnapshotSchedule": ["create", "execute", "call", "run", "schedule"], "request": ["input", "create", "parent", "execute", "resource", "call", "run", "request", "req", "instruction", "argument", "schedule", "p"]}}
{"code": "public Record getNext() {if(!hasNext()) {throw new RuntimeException(\"Attempt to read past end of record stream\");}_countRead ++;return _list.get(_nextIndex++);}\n", "substitutes": {"getNext": ["next", "get", "peek", "Next", "read"], "_countRead": ["next", "get", "peek", "index", "position", "Index", "Next", "offset", "i", "read"], "_nextIndex": ["next", "get", "peek", "index", "position", "Index", "Next", "offset", "pos", "i", "read"]}}
{"code": "public String toString() {return RawParseUtils.decode(buf.toByteArray());}\n", "substitutes": {"toString": ["parse", "get", "decode", "string", "read"]}}
{"code": "public ListTablesRequest(String exclusiveStartTableName) {setExclusiveStartTableName(exclusiveStartTableName);}\n", "substitutes": {"exclusiveStartTableName": ["key", "name", "prefix", "table", "query", "null"]}}
{"code": "public EnableAlarmActionsResult enableAlarmActions(EnableAlarmActionsRequest request) {request = beforeClientExecution(request);return executeEnableAlarmActions(request);}\n", "substitutes": {"enableAlarmActions": ["execute", "call", "run", "activate", "enable"], "request": ["input", "op", "response", "execute", "resource", "call", "run", "request", "req", "query", "instruction", "activate", "enable"]}}
{"code": "public Builder() {this(true);}\n", "substitutes": {"this": ["Builder", "builder"]}}
{"code": "public boolean equals(Object obj) {final State other = (State) obj;return is_final == other.is_final&& Arrays.equals(this.labels, other.labels)&& referenceEquals(this.states, other.states);}\n", "substitutes": {"equals": ["equals", "compare", "equal", "eq", "matches", "contains"], "obj": ["obj", "other", "equals", "object", "o", "compare", "equal", "value", "eq", "argument", "matches", "contains"], "other": ["obj", "other", "s", "equals", "object", "o", "state", "compare", "equal", "value", "a", "child", "eq", "argument", "matches", "contains", "st", "l"]}}
{"code": "public TokenStream create(TokenStream input) {return new EnglishPossessiveFilter(input);}\n", "substitutes": {"create": ["wrap", "create", "convert", "apply", "filter"], "input": ["wrap", "create", "convert", "apply", "token", "input", "s", "filter", "tokens", "stream"]}}
{"code": "public void clearFormatting() {_string = cloneStringIfRequired();_string.clearFormatting();addToSSTIfRequired();}\n", "substitutes": {"clearFormatting": ["trim", "reset", "init", "close", "free", "clear"], "_string": ["s", "trim", "text", "this", "reset", "str", "init", "string", "close", "String", "free", "clear"]}}
{"code": "public int get(int index, long[] arr, int off, int len) {assert len > 0 : \"len must be > 0 (got \" + len + \")\";assert index >= 0 && index < valueCount;len = Math.min(len, valueCount - index);Arrays.fill(arr, off, off + len, 0);return len;}\n", "substitutes": {"get": ["get", "fill", "insert", "set", "read"], "index": ["length", "get", "index", "off", "n", "1", "fill", "insert", "offset", "len", "set", "i", "read"], "arr": ["data", "n", "value", "fill", "values", "array", "1", "offset", "len", "set", "read", "index", "off", "arr", "i", "length", "get", "buf", "insert"], "off": ["data", "n", "value", "start", "fill", "values", "array", "1", "offset", "len", "set", "read", "index", "off", "arr", "i", "length", "get", "end", "buf", "insert", "pos"], "len": ["data", "n", "value", "start", "fill", "values", "array", "1", "offset", "len", "set", "read", "index", "off", "arr", "i", "length", "get", "end", "count", "buf", "insert", "pos", "size"]}}
{"code": "public DeleteRouteResponseResult deleteRouteResponse(DeleteRouteResponseRequest request) {request = beforeClientExecution(request);return executeDeleteRouteResponse(request);}\n", "substitutes": {"deleteRouteResponse": ["execute", "run", "delete", "send", "complete"], "request": ["input", "parent", "argument", "response", "execute", "resource", "run", "request", "req", "call", "delete", "send", "complete"]}}
{"code": "public String toPrivateString() {return format(true, false);}\n", "substitutes": {"toPrivateString": ["get", "print", "formatted", "true", "format"]}}
{"code": "public CreatePresignedDomainUrlResult createPresignedDomainUrl(CreatePresignedDomainUrlRequest request) {request = beforeClientExecution(request);return executeCreatePresignedDomainUrl(request);}\n", "substitutes": {"createPresignedDomainUrl": ["result", "create", "execute", "call", "run"], "request": ["result", "create", "input", "parent", "op", "execute", "call", "run", "request", "req", "query", "instruction", "p"]}}
{"code": "public void write(int oneChar) {doWrite(new char[] { (char) oneChar }, 0, 1);}\n", "substitutes": {"write": ["append", "flush", "Write", "write", "put"], "oneChar": ["n", "c", "append", "value", "b", "val", "flush", "i", "Write", "write", "put"]}}
{"code": "public SSTRecord getSSTRecord() {return sstRecord;}\n", "substitutes": {"getSSTRecord": ["create", "get", "copy", "record", "current"]}}
{"code": "public String toString() {return \"term=\" + term + \",field=\" + field + \",value=\" + valueToString() + \",docIDUpto=\" + docIDUpto;}\n", "substitutes": {"toString": ["description", "str", "String", "string", "format"]}}
{"code": "public boolean isSaturated(FuzzySet bloomFilter, FieldInfo fieldInfo) {return bloomFilter.getSaturation() > 0.9f;}\n", "substitutes": {"isSaturated": ["apply", "filter", "accept", "passes", "matches"], "bloomFilter": ["subject", "apply", "source", "s", "f", "filter", "accept", "passes", "field", "matches", "set"], "fieldInfo": ["subject", "info", "apply", "source", "s", "f", "mi", "fi", "filter", "accept", "passes", "field", "matches", "set"]}}
{"code": "public Builder(boolean ignoreCase) {this.ignoreCase = ignoreCase;}\n", "substitutes": {"ignoreCase": ["disabled", "enabled", "state", "block", "value", "required", "b", "true"]}}
{"code": "public String toString() {return getClass().getName()+ \"(maxBasicQueries: \" + maxBasicQueries+ \", queriesMade: \" + queriesMade+ \")\";}\n", "substitutes": {"toString": ["description", "desc", "name", "pretty", "describe"]}}
{"code": "public DeleteDataSourceResult deleteDataSource(DeleteDataSourceRequest request) {request = beforeClientExecution(request);return executeDeleteDataSource(request);}\n", "substitutes": {"deleteDataSource": ["create", "update", "execute", "run", "delete"], "request": ["input", "create", "update", "parent", "execute", "resource", "run", "request", "call", "req", "delete", "query", "p"]}}
{"code": "public RebootNodeResult rebootNode(RebootNodeRequest request) {request = beforeClientExecution(request);return executeRebootNode(request);}\n", "substitutes": {"rebootNode": ["create", "begin", "execute", "reboot", "invoke"], "request": ["input", "create", "begin", "parent", "execute", "resource", "reboot", "request", "invoke", "call", "req", "argument", "p"]}}
{"code": "public void processChildRecords() {convertRawBytesToEscherRecords();}\n", "substitutes": {"processChildRecords": ["end", "destroy", "execute", "run", "close"]}}
{"code": "public CreateOrUpdateTagsResult createOrUpdateTags(CreateOrUpdateTagsRequest request) {request = beforeClientExecution(request);return executeCreateOrUpdateTags(request);}\n", "substitutes": {"createOrUpdateTags": ["create", "update", "execute", "tags", "call"], "request": ["input", "create", "update", "execute", "resource", "tags", "call", "request", "req", "query", "argument", "p"]}}
{"code": "public FileSnapshot getSnapShot() {return snapShot;}\n", "substitutes": {"getSnapShot": ["clone", "snapshot", "copy", "get"]}}
{"code": "public InputStream openResource(String resource) throws IOException {final InputStream stream = (clazz != null) ?clazz.getResourceAsStream(resource) :loader.getResourceAsStream(resource);if (stream == null)throw new IOException(\"Resource not found: \" + resource);return stream;}\n", "substitutes": {"openResource": ["open", "get", "resource", "load", "stream"], "resource": ["open", "get", "id", "filename", "path", "resource", "name", "url", "load", "stream"], "stream": ["open", "input", "get", "is", "id", "in", "res", "filename", "path", "resource", "name", "url", "load", "stream"]}}
{"code": "public String toString() {StringBuilder sb = new StringBuilder(64);sb.append(getClass().getName()).append(\" [\");sb.append(\"sid=\").append(HexDump.shortToHex(_sid));sb.append(\" size=\").append(_data.length);sb.append(\" : \").append(HexDump.toHex(_data));sb.append(\"]\\n\");return sb.toString();}\n", "substitutes": {"toString": ["length", "intern", "build", "dumps", "dump", "hex", "String", "string", "trim"], "sb": ["result", "length", "intern", "build", "s", "dumps", "dump", "hex", "builder", "buf", "buffer", "b", "String", "string", "trim"]}}
{"code": "public int nextIndex() {return index;}\n", "substitutes": {"nextIndex": ["length", "get", "index", "position", "size"]}}
{"code": "public CharSequence toQueryString(EscapeQuerySyntax escaper) {if (isDefaultField(this.field)) {return \"\\\"\" + getTermEscapeQuoted(escaper) + \"\\\"\";} else {return this.field + \":\" + \"\\\"\" + getTermEscapeQuoted(escaper) + \"\\\"\";}}\n", "substitutes": {"toQueryString": ["escaped", "escape", "field", "quote", "quoted"], "escaper": ["escaped", "syntax", "escape", "e", "this", "sym", "field", "term", "quote", "ex", "quoted", "expr"]}}
{"code": "public CalcModeRecord clone() {return copy();}\n", "substitutes": {"clone": ["clone", "Copy", "duplicate", "copy"]}}
{"code": "public boolean isOutput() {return output;}\n", "substitutes": {"isOutput": ["output", "get", "exists", "ok"]}}
{"code": "public CreateNetworkInterfaceResult createNetworkInterface(CreateNetworkInterfaceRequest request) {request = beforeClientExecution(request);return executeCreateNetworkInterface(request);}\n", "substitutes": {"createNetworkInterface": ["result", "create", "execute", "call", "run"], "request": ["result", "create", "input", "parent", "execute", "resource", "call", "run", "request", "req", "argument", "parameters", "p"]}}
{"code": "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_password);}\n", "substitutes": {"serialize": ["store", "encode", "flush", "write", "format"], "out": ["bos", "w", "output", "o", "store", "encode", "flush", "out", "write", "os", "format"]}}
{"code": "public StopDominantLanguageDetectionJobResult stopDominantLanguageDetectionJob(StopDominantLanguageDetectionJobRequest request) {request = beforeClientExecution(request);return executeStopDominantLanguageDetectionJob(request);}\n", "substitutes": {"stopDominantLanguageDetectionJob": ["execute", "call", "run", "pause", "stop"], "request": ["input", "parent", "op", "execute", "call", "run", "request", "req", "query", "pause", "stop", "p"]}}
{"code": "public ECSMetadataServiceCredentialsFetcher withConnectionTimeout(int milliseconds) {this.connectionTimeoutInMilliseconds = milliseconds;return this;}\n", "substitutes": {"withConnectionTimeout": ["Timeout", "timeout", "milliseconds", "time"], "milliseconds": ["Timeout", "v", "n", "timeout", "amount", "value", "time", "ele", "milliseconds"], "connectionTimeoutInMilliseconds": ["Timeout", "seconds", "v", "n", "delay", "timeout", "amount", "value", "time", "ele", "ms", "milliseconds"]}}
{"code": "public GetGatewayGroupResult getGatewayGroup(GetGatewayGroupRequest request) {request = beforeClientExecution(request);return executeGetGatewayGroup(request);}\n", "substitutes": {"getGatewayGroup": ["get", "execute", "list", "first", "call"], "request": ["input", "get", "response", "execute", "list", "resource", "first", "call", "request", "req", "query"]}}
{"code": "public FloatBuffer slice() {return new ReadOnlyFloatArrayBuffer(remaining(), backingArray, offset + position);}\n", "substitutes": {"slice": ["get", "available", "allocate", "remaining", "buffer"]}}
{"code": "public static String join(Collection<String> parts, String separator,String lastSeparator) {StringBuilder sb = new StringBuilder();int i = 0;int lastIndex = parts.size() - 1;for (String part : parts) {sb.append(part);if (i == lastIndex - 1) {sb.append(lastSeparator);} else if (i != lastIndex) {sb.append(separator);}i++;}return sb.toString();}\n", "substitutes": {"join": ["join", "split", "part", "str", "format"], "parts": ["result", "components", "join", "list", "partitions", "collection", "split", "part", "str", "parts", "format"], "separator": ["result", "components", "glue", "join", "suffix", "list", "partitions", "collection", "split", "prefix", "part", "last", "str", "sep", "parts", "format"], "lastSeparator": ["result", "components", "glue", "join", "suffix", "list", "partitions", "collection", "split", "prefix", "part", "last", "str", "sep", "parts", "format"], "sb": ["collection", "split", "format", "s", "join", "partitions", "last", "result", "joined", "suffix", "prefix", "builder", "part", "str", "b", "sep", "parts", "components", "list", "buf", "glue"], "i": ["collection", "split", "position", "format", "s", "join", "partitions", "last", "result", "joined", "index", "suffix", "prefix", "builder", "part", "str", "b", "sep", "parts", "i", "j", "components", "list", "count", "buf", "pos", "glue"], "lastIndex": ["n", "collection", "split", "position", "format", "l", "s", "join", "partitions", "last", "len", "result", "joined", "index", "suffix", "prefix", "builder", "part", "str", "b", "sep", "parts", "i", "j", "components", "length", "end", "list", "count", "buf", "pos", "size", "glue"], "part": ["n", "collection", "split", "r", "position", "format", "l", "s", "join", "partitions", "last", "len", "result", "joined", "index", "suffix", "prefix", "builder", "part", "str", "b", "sep", "item", "parts", "i", "j", "components", "length", "end", "list", "count", "buf", "pos", "size", "p", "glue"]}}
{"code": "public String toString() {return \"(\" + a.toString() + \" AND \" + b.toString() + \")\"; }\n", "substitutes": {"toString": ["length", "compose", "join", "name", "where", "and", "string", "size", "AND", "trim"]}}
{"code": "public ListSubscriptionsByTopicRequest(String topicArn, String nextToken) {setTopicArn(topicArn);setNextToken(nextToken);}\n", "substitutes": {"topicArn": ["token", "topics", "topic", "name", "key", "Topic", "null", "pattern"], "nextToken": ["token", "next", "topics", "page", "topic", "name", "key", "Token", "Topic", "top", "null", "pattern"]}}
{"code": "public byte readByte() {return bytes[pos--];}\n", "substitutes": {"readByte": ["next", "get", "peek", "current", "prev"], "pos": ["next", "get", "peek", "index", "current", "position", "pos", "size", "prev", "i"]}}
{"code": "public TerminateClientVpnConnectionsResult terminateClientVpnConnections(TerminateClientVpnConnectionsRequest request) {request = beforeClientExecution(request);return executeTerminateClientVpnConnections(request);}\n", "substitutes": {"terminateClientVpnConnections": ["begin", "execute", "call", "run", "terminate"], "request": ["input", "begin", "parent", "execute", "call", "run", "request", "req", "query", "instruction", "terminate", "argument"]}}
{"code": "public ReceiveMessageRequest(String queueUrl) {setQueueUrl(queueUrl);}\n", "substitutes": {"queueUrl": ["path", "URL", "name", "url", "message", "queue", "null"]}}
{"code": "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_barSpace);out.writeShort(field_2_categorySpace);out.writeShort(field_3_formatFlags);}\n", "substitutes": {"serialize": ["store", "encode", "flush", "write", "format"], "out": ["bos", "stream", "w", "output", "o", "store", "encode", "flush", "out", "write", "os", "format"]}}
{"code": "public Object common(Object output1, Object output2) {return outputs.common((T) output1, (T) output2);}\n", "substitutes": {"common": ["union", "merge", "compare", "combine", "put"], "output1": ["input", "union", "output", "merge", "o", "compare", "value", "combine", "target", "out", "put"], "output2": ["input", "result", "other", "union", "output", "merge", "o", "compare", "value", "combine", "target", "out", "put"]}}
{"code": "public CreateVariableResult createVariable(CreateVariableRequest request) {request = beforeClientExecution(request);return executeCreateVariable(request);}\n", "substitutes": {"createVariable": ["create", "generate", "execute", "call", "invoke"], "request": ["input", "create", "parent", "generate", "execute", "resource", "call", "invoke", "request", "req", "query", "argument", "parameters", "p"]}}
{"code": "public static final int match(byte[] b, int ptr, byte[] src) {if (ptr + src.length > b.length)return -1;for (int i = 0; i < src.length; i++, ptr++)if (b[ptr] != src[i])return -1;return ptr;}\n", "substitutes": {"match": ["index", "compare", "find", "hash", "search"], "b": ["index", "compare", "b", "dest", "find", "buf", "src", "target", "hash", "search", "dst", "out", "orig"], "ptr": ["n", "start", "out", "orig", "compare", "0", "1", "target", "offset", "hash", "index", "dest", "src", "b", "search", "dst", "j", "i", "find", "buf", "pos", "match"], "src": ["n", "r", "start", "a", "out", "orig", "s", "compare", "0", "1", "target", "offset", "hash", "m", "index", "dest", "src", "b", "search", "dst", "j", "i", "c", "find", "buf", "pos", "match"], "i": ["n", "r", "start", "a", "out", "orig", "s", "compare", "0", "1", "target", "offset", "hash", "m", "index", "dest", "src", "b", "search", "dst", "j", "i", "c", "find", "buf", "pos", "match"]}}
{"code": "public int fillFields(byte[] data, int offset, EscherRecordFactory recordFactory) {int bytesRemaining = readHeader( data, offset );int pos            = offset + 8;int size           = 0;field_1_rectX1 =  LittleEndian.getInt( data, pos + size );size+=4;field_2_rectY1 =  LittleEndian.getInt( data, pos + size );size+=4;field_3_rectX2 =  LittleEndian.getInt( data, pos + size );size+=4;field_4_rectY2 =  LittleEndian.getInt( data, pos + size );size+=4;bytesRemaining -= size;if (bytesRemaining != 0) {throw new RecordFormatException(\"Expected no remaining bytes but got \" + bytesRemaining);}return 8 + size + bytesRemaining;}\n", "substitutes": {"fillFields": ["parse", "decode", "extract", "read", "format"], "data": ["input", "parse", "data", "bytes", "decode", "buf", "extract", "b", "buffer", "read", "format"], "offset": ["input", "parse", "data", "length", "bytes", "index", "off", "decode", "start", "offset", "buf", "extract", "pos", "b", "buffer", "read", "format"], "recordFactory": ["data", "start", "buffer", "factory", "format", "input", "decode", "tf", "cf", "offset", "read", "parse", "index", "off", "extract", "b", "length", "f", "bytes", "buf", "pos", "fs"], "bytesRemaining": ["data", "n", "start", "header", "buffer", "factory", "format", "input", "err", "decode", "1", "tf", "cf", "offset", "len", "read", "parse", "index", "off", "ret", "leftover", "extract", "total", "b", "length", "f", "bytes", "4", "remaining", "buf", "pos", "fs"], "pos": ["data", "n", "8", "start", "header", "buffer", "factory", "format", "input", "err", "decode", "1", "tf", "cf", "offset", "len", "read", "parse", "index", "off", "ret", "leftover", "extract", "total", "b", "length", "end", "f", "bytes", "4", "remaining", "buf", "pos", "fs", "size"], "size": ["data", "n", "padding", "8", "start", "header", "buffer", "factory", "format", "input", "2", "err", "decode", "1", "tf", "cf", "offset", "len", "read", "12", "parse", "index", "off", "ret", "field", "leftover", "extract", "total", "b", "i", "length", "end", "f", "bytes", "4", "remaining", "buf", "count", "6", "pos", "fs", "size", "3"], "field_1_rectX1": ["data", "n", "padding", "8", "start", "header", "position", "buffer", "factory", "format", "input", "2", "err", "decode", "1", "tf", "cf", "offset", "len", "read", "12", "parse", "index", "off", "ret", "field", "leftover", "extract", "total", "b", "i", "length", "end", "f", "bytes", "4", "remaining", "buf", "count", "6", "pos", "fs", "size", "3"], "field_2_rectY1": ["data", "n", "padding", "8", "start", "header", "position", "buffer", "factory", "format", "input", "2", "err", "decode", "1", "tf", "cf", "offset", "len", "read", "12", "parse", "index", "off", "ret", "field", "leftover", "extract", "total", "b", "i", "length", "end", "f", "bytes", "4", "remaining", "buf", "count", "6", "pos", "fs", "size", "3"], "field_3_rectX2": ["data", "n", "padding", "8", "start", "header", "position", "buffer", "factory", "format", "input", "2", "err", "decode", "1", "tf", "cf", "offset", "len", "read", "12", "parse", "index", "off", "ret", "field", "leftover", "extract", "total", "b", "i", "length", "end", "f", "bytes", "4", "remaining", "buf", "count", "6", "pos", "fs", "size", "3"], "field_4_rectY2": ["data", "n", "padding", "8", "start", "header", "position", "buffer", "factory", "format", "input", "2", "err", "decode", "1", "tf", "cf", "offset", "len", "read", "12", "parse", "index", "off", "ret", "field", "leftover", "extract", "total", "b", "i", "length", "end", "f", "bytes", "4", "remaining", "buf", "count", "6", "pos", "fs", "size", "3"]}}
{"code": "public CreateCloudFrontOriginAccessIdentityResult createCloudFrontOriginAccessIdentity(CreateCloudFrontOriginAccessIdentityRequest request) {request = beforeClientExecution(request);return executeCreateCloudFrontOriginAccessIdentity(request);}\n", "substitutes": {"createCloudFrontOriginAccessIdentity": ["create", "apply", "execute", "call", "invoke"], "request": ["input", "create", "apply", "parent", "op", "execute", "call", "invoke", "request", "req", "query", "instruction"]}}
{"code": "public boolean isNamespaceAware() {return getFeature (XmlPullParser.FEATURE_PROCESS_NAMESPACES);}\n", "substitutes": {"isNamespaceAware": ["process", "supported", "exists", "accept", "features"]}}
{"code": "public void setOverridable(boolean on) {overridable = on;}\n", "substitutes": {"setOverridable": ["enabled", "on", "override", "set", "enable"], "on": ["enabled", "v", "on", "override", "value", "val", "b", "set", "enable"], "overridable": ["disabled", "overriding", "enabled", "v", "visible", "on", "override", "value", "val", "b", "set", "enable"]}}
{"code": "public String getClassName() {return className;}\n", "substitutes": {"getClassName": ["name", "Name", "get"]}}
{"code": "public synchronized DirectoryReader getIndexReader() {if (indexReader != null) {indexReader.incRef();}return indexReader;}\n", "substitutes": {"getIndexReader": ["open", "get", "ref", "instance", "init"]}}
{"code": "public int indexOfKey(int key) {return binarySearch(mKeys, 0, mSize, key);}\n", "substitutes": {"indexOfKey": ["get", "index", "find", "hash", "search"], "key": ["k", "get", "index", "n", "key", "find", "offset", "hash", "search", "i"]}}
{"code": "public BlankRecord(RecordInputStream in) {field_1_row = in.readUShort();field_2_col = in.readShort();field_3_xf  = in.readShort();}\n", "substitutes": {"in": ["input", "ins", "in", "is", "reader", "out", "stream"], "field_1_row": ["input", "ins", "in", "record", "field", "version", "offset", "is", "type", "reader", "out", "stream"], "field_2_col": ["input", "width", "column", "ins", "in", "record", "row", "field", "version", "size", "offset", "is", "type", "reader", "out", "stream", "col"], "field_3_xf": ["column", "ins", "type", "out", "col", "input", "record", "offset", "stream", "field", "version", "flags", "is", "reader", "width", "length", "in", "row", "size"]}}
{"code": "public long length() {return length;}\n", "substitutes": {"length": ["length", "get", "id", "index", "0", "value", "count", "offset", "size"]}}
{"code": "public PasswordRecord(RecordInputStream in) {field_1_password = in.readShort();}\n", "substitutes": {"in": ["ins", "in", "is", "out", "stream"], "field_1_password": ["length", "ins", "in", "password", "version", "flags", "is", "type", "out", "stream"]}}
{"code": "public HashMap(int capacity, float loadFactor) {this(capacity);if (loadFactor <= 0 || Float.isNaN(loadFactor)) {throw new IllegalArgumentException(\"Load factor: \" + loadFactor);}}\n", "substitutes": {"capacity": ["k", "id", "index", "key", "name", "size"], "loadFactor": ["load", "k", "id", "index", "f", "capacity", "key", "name", "weight", "value", "size", "factor"]}}
{"code": "public void run() {long lastReopenStartNS = System.nanoTime();while (!finish) {while (!finish) {reopenLock.lock();try {boolean hasWaiting = waitingGen > searchingGen;final long nextReopenStartNS = lastReopenStartNS + (hasWaiting ? targetMinStaleNS : targetMaxStaleNS);final long sleepNS = nextReopenStartNS - System.nanoTime();if (sleepNS > 0) {reopenCond.awaitNanos(sleepNS);} else {break;}} catch (InterruptedException ie) {Thread.currentThread().interrupt();return;} finally {reopenLock.unlock();}}if (finish) {break;}lastReopenStartNS = System.nanoTime();refreshStartGen = writer.getMaxCompletedSequenceNumber();try {manager.maybeRefreshBlocking();} catch (IOException ioe) {throw new RuntimeException(ioe);}}}\n", "substitutes": {"run": ["refresh", "reopen", "run", "close", "wait"], "lastReopenStartNS": ["end", "refresh", "finish", "reopen", "current", "ns", "start", "run", "now", "close", "wait", "started"], "hasWaiting": ["next", "finished", "end", "refresh", "finish", "reopen", "current", "ns", "start", "last", "run", "delta", "now", "partial", "close", "wait", "started"], "nextReopenStartNS": ["next", "finished", "end", "refresh", "finish", "reopen", "current", "ns", "start", "last", "run", "timeout", "delta", "now", "partial", "close", "wait", "started"], "sleepNS": ["finished", "refresh", "lag", "current", "timeout", "start", "elapsed", "ns", "last", "delta", "close", "interval", "started", "next", "finish", "delay", "partial", "end", "reopen", "run", "remaining", "now", "wait"], "refreshStartGen": ["finished", "refresh", "lag", "current", "timeout", "start", "seq", "elapsed", "generation", "ns", "last", "delta", "close", "interval", "started", "next", "finish", "delay", "sequence", "partial", "end", "reopen", "run", "remaining", "pending", "now", "wait"]}}
{"code": "public DeleteLoginProfileRequest(String userName) {setUserName(userName);}\n", "substitutes": {"userName": ["user", "name", "value", "username", "null", "email"]}}
{"code": "public E pollFirst() {return (size == 0) ? null : removeFirstImpl();}\n", "substitutes": {"pollFirst": ["next", "peek", "first", "pop", "remove"]}}
{"code": "public CreatePhotoRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"CreatePhoto\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n", "substitutes": {}}
{"code": "public String getName() {return \"resolve\"; }\n", "substitutes": {"getName": ["usage", "build", "call", "help", "resolve"]}}
{"code": "public int findEndOffset(StringBuilder buffer, int start) {if( start > buffer.length() || start < 0 ) return start;int offset, count = maxScan;for( offset = start; offset < buffer.length() && count > 0; count-- ){if( boundaryChars.contains( buffer.charAt( offset ) ) ) return offset;offset++;}return start;}\n", "substitutes": {"findEndOffset": ["skip", "index", "find", "search", "scan"], "buffer": ["skip", "input", "s", "index", "text", "builder", "find", "buffer", "b", "search", "scan"], "start": ["skip", "input", "end", "s", "index", "text", "0", "builder", "start", "find", "offset", "count", "position", "buffer", "b", "search", "scan", "pos"], "offset": ["start", "position", "buffer", "input", "s", "0", "offset", "index", "text", "builder", "b", "search", "scan", "i", "j", "skip", "end", "find", "count", "pos"], "count": ["n", "start", "position", "buffer", "input", "span", "s", "0", "offset", "len", "index", "text", "builder", "max", "b", "search", "scan", "limit", "i", "j", "skip", "end", "find", "count", "pos", "size"]}}
{"code": "public void setObjectChecker(ObjectChecker oc) {objCheck = oc;}\n", "substitutes": {"setObjectChecker": ["check", "add", "assign", "init", "set"], "oc": ["cp", "check", "o", "add", "c", "cf", "assign", "init", "b", "cr", "set"], "objCheck": ["cp", "check", "o", "add", "c", "this", "cf", "assign", "init", "b", "cr", "set"]}}
{"code": "public BaseRef(AreaEval ae) {_refEval = null;_areaEval = ae;_firstRowIndex = ae.getFirstRow();_firstColumnIndex = ae.getFirstColumn();_height = ae.getLastRow() - ae.getFirstRow() + 1;_width = ae.getLastColumn() - ae.getFirstColumn() + 1;}\n", "substitutes": {"ae": ["nil", "area", "this", "ra", "a", "ref", "val", "null", "pa", "el"], "_refEval": ["parent", "nil", "area", "this", "ra", "a", "ref", "_", "val", "null", "buffer", "pa", "root", "el"], "_areaEval": ["parent", "nil", "arc", "area", "this", "ra", "a", "ref", "_", "val", "null", "buffer", "pa", "Area", "root", "el"], "_firstRowIndex": ["a", "ref", "buffer", "pa", "this", "null", "offset", "Area", "root", "nil", "index", "ra", "_", "parent", "arc", "row", "area", "val", "el", "Index"], "_firstColumnIndex": ["a", "ref", "buffer", "pa", "col", "this", "null", "offset", "Area", "root", "nil", "index", "ra", "_", "width", "parent", "arc", "row", "area", "val", "columns", "el", "Index"], "_height": ["a", "ref", "rows", "buffer", "pa", "stride", "col", "this", "null", "offset", "Area", "root", "nil", "index", "ra", "_", "width", "parent", "arc", "height", "row", "area", "val", "columns", "el", "Index"], "_width": ["column", "a", "ref", "rows", "buffer", "pa", "stride", "col", "this", "null", "offset", "Area", "root", "nil", "index", "ra", "_", "width", "parent", "arc", "height", "row", "area", "val", "columns", "el", "Index"]}}
{"code": "public CreateVpcEndpointResult createVpcEndpoint(CreateVpcEndpointRequest request) {request = beforeClientExecution(request);return executeCreateVpcEndpoint(request);}\n", "substitutes": {"createVpcEndpoint": ["create", "execute", "call", "run", "post"], "request": ["input", "create", "execute", "call", "run", "post", "request", "req", "instruction", "query", "argument", "p"]}}
{"code": "public DeregisterWorkspaceDirectoryResult deregisterWorkspaceDirectory(DeregisterWorkspaceDirectoryRequest request) {request = beforeClientExecution(request);return executeDeregisterWorkspaceDirectory(request);}\n", "substitutes": {"deregisterWorkspaceDirectory": ["begin", "execute", "delete", "register", "regenerate"], "request": ["input", "begin", "parent", "execute", "Request", "request", "req", "call", "instruction", "delete", "register", "query", "argument", "regenerate"]}}
{"code": "public ChartFRTInfoRecord(RecordInputStream in) {rt = in.readShort();grbitFrt = in.readShort();verOriginator = in.readByte();verWriter = in.readByte();int cCFRTID = in.readShort();rgCFRTID = new CFRTID[cCFRTID];for (int i = 0; i < cCFRTID; i++) {rgCFRTID[i] = new CFRTID(in);}}\n", "substitutes": {"in": ["ins", "in", "0", "r", "br", "1", "this", "i", "null", "is", "out", "stream"], "rt": ["ins", "in", "id", "ver", "0", "r", "br", "1", "this", "bits", "version", "i", "flags", "null", "is", "out", "stream"], "grbitFrt": ["ins", "r", "bits", "out", "id", "0", "1", "this", "null", "stream", "ver", "br", "vers", "version", "flags", "ts", "is", "i", "in", "ti"], "verOriginator": ["ins", "vendor", "r", "bits", "writer", "out", "id", "0", "1", "this", "null", "stream", "ver", "br", "vers", "version", "flags", "ts", "is", "i", "in", "ti"], "verWriter": ["ins", "vendor", "r", "bits", "writer", "out", "id", "0", "1", "this", "null", "strand", "stream", "ver", "br", "vers", "version", "flags", "ts", "is", "i", "in", "ti"], "cCFRTID": ["ins", "vendor", "n", "capacity", "r", "bits", "writer", "out", "num", "id", "0", "1", "this", "null", "len", "strand", "stream", "ver", "br", "vers", "version", "flags", "ts", "is", "i", "length", "in", "count", "ti", "size"], "rgCFRTID": ["ins", "vendor", "n", "capacity", "r", "bits", "chains", "writer", "out", "IDs", "num", "id", "0", "1", "this", "rs", "null", "len", "strand", "stream", "ver", "br", "vers", "version", "flags", "ts", "is", "i", "length", "in", "c", "count", "ti", "size"], "i": ["ins", "vendor", "n", "capacity", "r", "bits", "chains", "writer", "out", "IDs", "num", "id", "0", "1", "this", "rs", "null", "len", "strand", "stream", "index", "ver", "br", "vers", "version", "flags", "ts", "is", "i", "j", "k", "length", "in", "c", "ii", "count", "ti", "size"]}}
{"code": "public Merger newMerger(Repository db) {return new OneSide(db, treeIndex);}\n", "substitutes": {"newMerger": ["create", "one", "merge", "fork", "of"], "db": ["create", "one", "repository", "parent", "merge", "fork", "repo", "rep", "of", "root"]}}
{"code": "public CreateDataSourceFromRedshiftResult createDataSourceFromRedshift(CreateDataSourceFromRedshiftRequest request) {request = beforeClientExecution(request);return executeCreateDataSourceFromRedshift(request);}\n", "substitutes": {"createDataSourceFromRedshift": ["create", "copy", "execute", "call", "run"], "request": ["input", "create", "parent", "copy", "execute", "call", "run", "request", "req", "instruction", "query", "argument", "p"]}}
{"code": "public void clearDFA() {for (int d = 0; d < decisionToDFA.length; d++) {decisionToDFA[d] = new DFA(atn.getDecisionState(d), d);}}\n", "substitutes": {"clearDFA": ["build", "initialize", "reset", "init", "clear"], "d": ["k", "build", "initialize", "index", "n", "false", "ii", "0", "this", "reset", "init", "j", "null", "true", "clear", "i"], "decisionToDFA": ["data", "derivatives", "n", "true", "build", "0", "this", "states", "null", "clear", "initialize", "index", "state", "d", "j", "i", "k", "df", "ii", "reset", "init", "false"]}}
{"code": "public void removeName(String name) {int index = getNameIndex(name);removeName(index);}\n", "substitutes": {"removeName": ["index", "add", "name", "append", "delete", "remove"], "name": ["s", "index", "id", "n", "add", "name", "key", "append", "prefix", "delete", "remove"], "index": ["s", "index", "id", "n", "add", "name", "key", "append", "prefix", "delete", "i", "pos", "remove"]}}
{"code": "public String toString(){StringBuilder buffer = new StringBuilder();buffer.append( \"[RightMargin]\\n\" );buffer.append( \"    .margin               = \" ).append( \" (\" ).append( getMargin() ).append( \" )\\n\" );buffer.append( \"[/RightMargin]\\n\" );return buffer.toString();}\n", "substitutes": {"toString": ["length", "get", "build", "trim", "reverse", "indent", "margin", "render", "format"], "buffer": ["result", "length", "get", "build", "s", "trim", "builder", "reverse", "buf", "indent", "b", "margin", "render", "format"]}}
{"code": "public RefreshAllRecord clone() {return copy();}\n", "substitutes": {"clone": ["clone", "Copy", "copies", "copy"]}}
{"code": "public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig) {super(queryConfig);add(new WildcardQueryNodeProcessor());add(new MultiFieldQueryNodeProcessor());add(new FuzzyQueryNodeProcessor());add(new RegexpQueryNodeProcessor());add(new MatchAllDocsQueryNodeProcessor());add(new OpenRangeQueryNodeProcessor());add(new PointQueryNodeProcessor());add(new PointRangeQueryNodeProcessor());add(new TermRangeQueryNodeProcessor());add(new AllowLeadingWildcardProcessor());add(new AnalyzerQueryNodeProcessor());add(new PhraseSlopQueryNodeProcessor());add(new BooleanQuery2ModifierNodeProcessor());add(new NoChildOptimizationQueryNodeProcessor());add(new RemoveDeletedQueryNodesProcessor());add(new RemoveEmptyNonLeafQueryNodeProcessor());add(new BooleanSingleChildOptimizationQueryNodeProcessor());add(new DefaultPhraseSlopQueryNodeProcessor());add(new BoostQueryNodeProcessor());add(new MultiTermRewriteMethodProcessor());}\n", "substitutes": {"queryConfig": ["config", "handler", "ch", "configuration", "conf"]}}
{"code": "public String formatAsString(String sheetName, boolean useAbsoluteAddress) {StringBuilder sb = new StringBuilder();if (sheetName != null) {sb.append(SheetNameFormatter.format(sheetName));sb.append(\"!\");}CellReference cellRefFrom = new CellReference(getFirstRow(), getFirstColumn(),useAbsoluteAddress, useAbsoluteAddress);CellReference cellRefTo = new CellReference(getLastRow(), getLastColumn(),useAbsoluteAddress, useAbsoluteAddress);sb.append(cellRefFrom.formatAsString());if(!cellRefFrom.equals(cellRefTo)|| isFullColumnRange() || isFullRowRange()){sb.append(':');sb.append(cellRefTo.formatAsString());}return sb.toString();}\n", "substitutes": {"formatAsString": ["get", "id", "label", "cell", "name", "format", "address", "value", "trim", "sheet"], "sheetName": ["get", "column", "id", "label", "cell", "name", "format", "address", "value", "col", "trim", "sheet"], "useAbsoluteAddress": ["wrap", "column", "cell", "strict", "value", "true", "format", "col", "sheet", "id", "name", "0", "1", "null", "trim", "collapse", "escape", "center", "get", "label", "address", "false"], "sb": ["wrap", "column", "cell", "strict", "value", "true", "format", "col", "sheet", "id", "s", "name", "0", "1", "null", "trim", "result", "collapse", "escape", "builder", "center", "b", "get", "label", "address", "buf", "false"], "cellRefFrom": ["wrap", "column", "cell", "strict", "value", "ref", "to", "true", "format", "col", "sheet", "id", "s", "name", "0", "1", "From", "null", "trim", "result", "collapse", "escape", "builder", "center", "b", "fr", "get", "label", "address", "from", "buf", "false"], "cellRefTo": ["wrap", "column", "cell", "strict", "value", "ref", "to", "true", "format", "col", "sheet", "id", "s", "name", "0", "1", "last", "From", "null", "trim", "To", "result", "collapse", "reference", "escape", "builder", "center", "b", "fr", "get", "label", "address", "from", "buf", "false"]}}
{"code": "public ByteBuffer put(int index, byte value) {throw new ReadOnlyBufferException();}\n", "substitutes": {"put": ["get", "append", "buffer", "set", "put"], "index": ["get", "index", "key", "name", "append", "position", "offset", "buffer", "set", "put"], "value": ["data", "get", "index", "key", "name", "append", "b", "value", "position", "buf", "offset", "buffer", "set", "put"]}}
{"code": "public void mode(int m) {_mode = m;}\n", "substitutes": {"mode": ["access", "m", "set", "modify", "mode"], "m": ["access", "m", "code", "value", "flags", "set", "modify", "mode", "i"], "_mode": ["access", "m", "code", "modes", "bits", "value", "flags", "set", "modify", "perm", "mode", "i"]}}
{"code": "public ShortBuffer slice() {return new ReadWriteShortArrayBuffer(remaining(), backingArray, offset + position);}\n", "substitutes": {"slice": ["get", "available", "allocate", "remaining", "buffer"]}}
{"code": "public void set(int index, long n) {if (count < index)throw new ArrayIndexOutOfBoundsException(index);else if (count == index)add(n);elseentries[index] = n;}\n", "substitutes": {"set": ["add", "increment", "insert", "set", "put"], "index": ["2", "index", "n", "add", "capacity", "increment", "c", "0", "1", "this", "count", "position", "i", "insert", "offset", "size", "set", "put"], "n": ["n", "capacity", "e", "value", "position", "ele", "put", "2", "key", "increment", "0", "1", "this", "offset", "set", "index", "add", "i", "entry", "c", "count", "val", "insert", "size"], "elseentries": ["n", "capacity", "e", "value", "position", "ele", "elements", "put", "values", "2", "array", "key", "increment", "0", "1", "this", "offset", "set", "index", "add", "counts", "i", "entry", "c", "count", "val", "insert", "size"]}}
{"code": "public ByteBuffer putFloat(float value) {throw new ReadOnlyBufferException();}\n", "substitutes": {"putFloat": ["wrap", "append", "allocate", "buffer", "put"], "value": ["wrap", "f", "v", "append", "value", "allocate", "val", "buffer", "put"]}}
{"code": "public static double max(double[] values) {double max = Double.NEGATIVE_INFINITY;for (double value : values) {max = Math.max(max, value);}return max;}\n", "substitutes": {"max": ["result", "dist", "value", "max", "pow", "abs", "plus", "hypot", "mean", "d", "sum", "min"], "values": ["result", "array", "list", "dist", "value", "max", "pow", "abs", "plus", "hypot", "mean", "arr", "d", "sum", "min", "values"], "value": ["value", "pow", "sum", "values", "array", "hypot", "min", "result", "x", "max", "abs", "mean", "arr", "d", "i", "v", "list", "dist", "plus", "val"]}}
{"code": "public UpdateRepoWebhookRequest() {super(\"cr\", \"2016-06-07\", \"UpdateRepoWebhook\", \"cr\");setUriPattern(\"/repos/[RepoNamespace]/[RepoName]/webhooks/[WebhookId]\");setMethod(MethodType.POST);}\n", "substitutes": {}}
{"code": "public DeleteAttributesRequest(String domainName, String itemName, java.util.List<Attribute> attributes, UpdateCondition expected) {setDomainName(domainName);setItemName(itemName);setAttributes(attributes);setExpected(expected);}\n", "substitutes": {"domainName": ["domains", "dom", "name", "realm", "Domain", "domain"], "itemName": ["domains", "id", "dom", "key", "name", "prefix", "realm", "Domain", "item", "domain"], "attributes": ["Attributes", "ributes", "domains", "id", "dom", "key", "name", "prefix", "realm", "Domain", "attribute", "item", "attributes", "domain"], "expected": ["ributes", "dom", "actual", "attributes", "Attributes", "domains", "id", "key", "name", "condition", "realm", "attribute", "cond", "prefix", "expectation", "expected", "expect", "Domain", "item", "domain"]}}
{"code": "public String toString() {StringBuilder sb = new StringBuilder();sb.append(\"[SXPI]\\n\");for (int i = 0; i < _fieldInfos.length; i++) {sb.append(\"    item[\").append(i).append(\"]=\");_fieldInfos[i].appendDebugInfo(sb);sb.append('\\n');}sb.append(\"[/SXPI]\\n\");return sb.toString();}\n", "substitutes": {"toString": ["info", "inspect", "output", "dump", "debug"], "sb": ["ss", "info", "inspect", "s", "output", "this", "dump", "b", "SB", "//", "sb", "item", "debug", "true", "}"], "i": ["debug", "true", "}", "ss", "s", "output", "key", "this", "SB", "inspect", "index", "field", "b", "sb", "j", "i", "k", "info", "f", "dump", "//", "item"]}}
{"code": "public boolean isSuccessful() {if (mergeResult != null)return mergeResult.getMergeStatus().isSuccessful();else if (rebaseResult != null)return rebaseResult.getStatus().isSuccessful();return true;}\n", "substitutes": {"isSuccessful": ["update", "changed", "equals", "status", "failed", "succeeded", "empty", "size", "clear"]}}
{"code": "public void setBytesValue(byte[] value) {setBytesValue(new BytesRef(value));}\n", "substitutes": {"setBytesValue": ["add", "append", "insert", "set", "write", "put"], "value": ["data", "bytes", "add", "append", "value", "insert", "b", "buffer", "set", "write", "put"]}}
{"code": "public DescribeConnectionsResult describeConnections(DescribeConnectionsRequest request) {request = beforeClientExecution(request);return executeDescribeConnections(request);}\n", "substitutes": {"describeConnections": ["begin", "execute", "send", "summary", "describe"], "request": ["input", "begin", "parent", "argument", "execute", "request", "req", "call", "query", "send", "summary", "describe"]}}
{"code": "public DeletePhotosRequest() {super(\"CloudPhoto\", \"2017-07-11\", \"DeletePhotos\", \"cloudphoto\");setProtocol(ProtocolType.HTTPS);}\n", "substitutes": {}}
{"code": "public void add(E object) {iterator.add(object);subList.sizeChanged(true);end++;}\n", "substitutes": {"add": ["next", "visit", "add", "accept", "append", "remove"], "object": ["next", "element", "visit", "o", "add", "e", "accept", "append", "ele", "item", "el", "remove"], "end": ["next", "element", "visit", "index", "o", "add", "counter", "e", "accept", "append", "count", "size", "i", "ele", "item", "el", "remove"]}}
{"code": "public static ByteBuffer allocate(int capacity) {if (capacity < 0) {throw new IllegalArgumentException();}return new ReadWriteHeapByteBuffer(capacity);}\n", "substitutes": {"allocate": ["wrap", "create", "capacity", "allocate", "alloc"], "capacity": ["wrap", "create", "cap", "capacity", "n", "amount", "allocate", "size", "allocated", "limit", "alloc", "buffer"]}}
{"code": "public SrndQuery getSubQuery(int qn) {return queries.get(qn);}\n", "substitutes": {"getSubQuery": ["get", "lookup", "find", "q", "query"], "qn": ["get", "id", "index", "n", "key", "lookup", "find", "q", "query", "offset", "i"]}}
{"code": "public float currentScore(int docId, String field, int start, int end, int numPayloadsSeen, float currentScore, float currentPayloadScore) {if (numPayloadsSeen == 0) {return currentPayloadScore;} else {return Math.min(currentPayloadScore, currentScore);}}\n", "substitutes": {"currentScore": ["get", "calculate", "score", "compare", "weight", "value", "max", "min"], "docId": ["get", "id", "index", "record", "calculate", "score", "compare", "weight", "value", "max", "version", "type", "min"], "field": ["get", "id", "index", "record", "calculate", "score", "name", "compare", "path", "weight", "value", "max", "url", "text", "version", "type", "min"], "start": ["value", "start", "url", "type", "begin", "id", "record", "calculate", "name", "compare", "weight", "offset", "min", "beg", "index", "score", "text", "max", "version", "get", "path", "pos"], "end": ["value", "start", "url", "type", "begin", "id", "record", "calculate", "name", "compare", "weight", "offset", "min", "stop", "beg", "index", "score", "text", "max", "version", "limit", "length", "get", "end", "path", "pos", "size"], "numPayloadsSeen": ["value", "start", "url", "type", "begin", "id", "record", "calculate", "name", "compare", "weight", "offset", "min", "stop", "beg", "index", "score", "text", "max", "field", "version", "limit", "length", "get", "end", "path", "count", "pos", "size"], "currentPayloadScore": ["value", "start", "url", "type", "begin", "id", "record", "calculate", "name", "compare", "0", "weight", "1", "offset", "min", "stop", "beg", "result", "scores", "index", "score", "text", "max", "field", "version", "limit", "length", "get", "end", "path", "count", "pos", "size"]}}
{"code": "public String toString(){StringBuilder sb = new StringBuilder();sb.append(\"[BLANK]\\n\");sb.append(\"    row= \").append(HexDump.shortToHex(getRow())).append(\"\\n\");sb.append(\"    col= \").append(HexDump.shortToHex(getColumn())).append(\"\\n\");sb.append(\"    xf = \").append(HexDump.shortToHex(getXFIndex())).append(\"\\n\");sb.append(\"[/BLANK]\\n\");return sb.toString();}\n", "substitutes": {"toString": ["length", "build", "output", "dump", "hex", "reverse", "String", "string", "trim"], "sb": ["result", "length", "build", "s", "output", "dump", "hex", "reverse", "builder", "buf", "buffer", "b", "String", "string", "trim"]}}
{"code": "public DescribeLogPatternResult describeLogPattern(DescribeLogPatternRequest request) {request = beforeClientExecution(request);return executeDescribeLogPattern(request);}\n", "substitutes": {"describeLogPattern": ["list", "execute", "request", "call", "describe"], "request": ["input", "parent", "argument", "list", "execute", "request", "call", "req", "query", "describe"]}}
{"code": "public RegisterTransitGatewayMulticastGroupMembersResult registerTransitGatewayMulticastGroupMembers(RegisterTransitGatewayMulticastGroupMembersRequest request) {request = beforeClientExecution(request);return executeRegisterTransitGatewayMulticastGroupMembers(request);}\n", "substitutes": {"registerTransitGatewayMulticastGroupMembers": ["create", "execute", "call", "register", "activate"], "request": ["input", "create", "op", "execute", "call", "request", "req", "instruction", "query", "register", "activate"]}}
{"code": "public GetPhoneNumberSettingsResult getPhoneNumberSettings(GetPhoneNumberSettingsRequest request) {request = beforeClientExecution(request);return executeGetPhoneNumberSettings(request);}\n", "substitutes": {"getPhoneNumberSettings": ["result", "get", "execute", "list", "call"], "request": ["result", "input", "get", "parent", "execute", "list", "call", "request", "req", "instruction", "query", "argument", "p"]}}
{"code": "public ObjectId getData() {return data;}\n", "substitutes": {"getData": ["data", "get", "copy", "Data", "Id"]}}
{"code": "public boolean isDirect() {return false;}\n", "substitutes": {"isDirect": ["check", "validate", "exists", "empty", "valid"]}}
{"code": "public DeleteServerCertificateRequest(String serverCertificateName) {setServerCertificateName(serverCertificateName);}\n", "substitutes": {"serverCertificateName": ["v", "n", "key", "name", "value", "ele"]}}
{"code": "public StringBuffer append(double d) {RealToString.getInstance().appendDouble(this, d);return this;}\n", "substitutes": {"append": ["d", "add", "write", "append"], "d": ["number", "num", "v", "add", "append", "value", "val", "d", "write"]}}
{"code": "public GetEvaluationResult getEvaluation(GetEvaluationRequest request) {request = beforeClientExecution(request);return executeGetEvaluation(request);}\n", "substitutes": {"getEvaluation": ["get", "execute", "evaluate", "call", "run"], "request": ["input", "get", "parent", "response", "execute", "resource", "evaluate", "call", "run", "request", "req", "query", "argument"]}}
{"code": "public LinkedDataRecord getDataName(){return dataName;}\n", "substitutes": {"getDataName": ["data", "get", "Name", "key", "name"]}}
{"code": "public boolean find(int start) {findPos = start;if (findPos < regionStart) {findPos = regionStart;} else if (findPos >= regionEnd) {matchFound = false;return false;}matchFound = findImpl(address, input, findPos, matchOffsets);if (matchFound) {findPos = matchOffsets[1];}return matchFound;}\n", "substitutes": {"find": ["find", "locate", "matches", "contains", "match"], "start": ["input", "index", "address", "find", "position", "locate", "offset", "matches", "contains", "i", "match"], "findPos": ["input", "region", "end", "index", "address", "start", "find", "position", "locate", "offset", "matches", "contains", "i", "match"], "matchFound": ["region", "start", "position", "locate", "true", "contains", "input", "offset", "found", "result", "matched", "index", "matches", "i", "end", "address", "find", "valid", "match"]}}
{"code": "public GetLifecyclePolicyPreviewResult getLifecyclePolicyPreview(GetLifecyclePolicyPreviewRequest request) {request = beforeClientExecution(request);return executeGetLifecyclePolicyPreview(request);}\n", "substitutes": {"getLifecyclePolicyPreview": ["get", "Preview", "receive", "call", "preview"], "request": ["input", "get", "parent", "op", "Preview", "receive", "response", "call", "request", "preview", "req", "query", "instruction"]}}
{"code": "public SinglePositionTokenStream(String word) {termAtt = addAttribute(CharTermAttribute.class);posIncrAtt = addAttribute(PositionIncrementAttribute.class);this.word = word;returned = true;}\n", "substitutes": {"word": ["token", "s", "text", "name", "value", "string"], "termAtt": ["token", "char", "s", "cur", "text", "name", "att", "value", "term", "pos", "string"], "posIncrAtt": ["token", "char", "inst", "s", "cur", "inc", "text", "name", "increment", "att", "value", "term", "pos", "acc", "string"]}}
{"code": "public void serialize(LittleEndianOutput out) {out.writeShort(field_1_print_gridlines);}\n", "substitutes": {"serialize": ["store", "encode", "print", "write", "format"], "out": ["bos", "w", "output", "o", "store", "encode", "out", "print", "write", "os", "format"]}}
{"code": "public String toString() {final StringBuilder s = new StringBuilder();s.append(Constants.typeString(getType()));s.append(' ');s.append(name());s.append(' ');s.append(commitTime);s.append(' ');appendCoreFlags(s);return s.toString();}\n", "substitutes": {"toString": ["length", "description", "build", "name", "version", "type", "summary", "string", "trim", "format"], "s": ["result", "length", "description", "build", "s", "name", "builder", "buf", "version", "b", "type", "summary", "string", "trim", "format"]}}
{"code": "public LsRemoteCommand setRemote(String remote) {checkCallable();this.remote = remote;return this;}\n", "substitutes": {"setRemote": ["Remote", "add", "push", "remote"], "remote": ["Remote", "local", "ip", "source", "add", "name", "value", "src", "str", "remote", "push"]}}
{"code": "public void collapseRow(int rowNumber) {int startRow = findStartOfRowOutlineGroup(rowNumber);RowRecord rowRecord = getRow(startRow);int nextRowIx = writeHidden(rowRecord, startRow);RowRecord row = getRow(nextRowIx);if (row == null) {row = createRow(nextRowIx);insertRow(row);}row.setColapsed(true);}\n", "substitutes": {"collapseRow": ["add", "append", "draw", "insert", "write"], "rowNumber": ["id", "index", "row", "add", "group", "append", "draw", "insert", "write", "i"], "startRow": ["id", "index", "row", "add", "group", "0", "append", "start", "draw", "insert", "pos", "write", "true", "false", "i"], "rowRecord": ["current", "append", "start", "r", "rows", "write", "true", "prev", "col", "id", "0", "index", "add", "i", "row", "group", "draw", "insert", "pos", "false"], "nextRowIx": ["current", "append", "start", "r", "header", "rows", "write", "true", "prev", "col", "id", "0", "offset", "index", "add", "visible", "i", "width", "hidden", "row", "group", "draw", "insert", "pos", "false"], "row": ["current", "append", "start", "r", "header", "rows", "write", "true", "prev", "col", "id", "record", "0", "tr", "offset", "result", "index", "rec", "add", "visible", "i", "width", "hidden", "row", "group", "draw", "insert", "pos", "false"]}}
{"code": "public AssociateSkillGroupWithRoomResult associateSkillGroupWithRoom(AssociateSkillGroupWithRoomRequest request) {request = beforeClientExecution(request);return executeAssociateSkillGroupWithRoom(request);}\n", "substitutes": {"associateSkillGroupWithRoom": ["create", "update", "association", "call", "associate"], "request": ["input", "create", "update", "parent", "association", "call", "request", "req", "instruction", "query", "associate", "argument", "parameters", "p"]}}
{"code": "public String toString() {StringBuilder buffer = new StringBuilder();buffer.append(\"[SERIESLIST]\\n\");buffer.append(\"    .seriesNumbers= \").append(\" (\").append( Arrays.toString(getSeriesNumbers()) ).append(\" )\");buffer.append(\"\\n\");buffer.append(\"[/SERIESLIST]\\n\");return buffer.toString();}\n", "substitutes": {"toString": ["dot", "length", "get", "build", "trim", "list", "reverse", "sort", "summary", "html", "string", "render", "stream"], "buffer": ["reverse", "buffer", "build", "s", "sort", "summary", "html", "trim", "render", "stream", "result", "dot", "builder", "b", "string", "length", "get", "list", "buf"]}}
{"code": "public QueryConfigHandler getQueryConfigHandler() {return this.queryConfig;}\n", "substitutes": {"getQueryConfigHandler": ["get", "config", "this", "instance", "Config"]}}
{"code": "public String getClassArg() {if (null != originalArgs) {String className = originalArgs.get(CLASS_NAME);if (null != className) {return className;}}return getClass().getName();}\n", "substitutes": {"getClassArg": ["get", "Name", "name", "args", "String"], "className": ["get", "s", "Name", "name", "c", "value", "val", "args", "String", "arg"]}}
